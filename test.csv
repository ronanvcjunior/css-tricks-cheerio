id,title,url,image,author,date,dateUpdate,tags,articleContent
1,Passkeys: What the Heck and Why?,https://css-tricks.com/passkeys-what-the-heck-and-why/,https://css-tricks.com/wp-content/uploads/2023/02/assertion.png,Neal Fennimore,1681268400000,,"[""passkeys"",""security"",""webauthn""]","These things called **passkeys** sure are making the rounds these days. They were a main attraction at [W3C TPAC 2022](https://www.w3.org/2022/09/TPAC/demos/passkeys.html), gained support in [Safari 16](https://developer.apple.com/documentation/safari-release-notes/safari-16_1-release-notes/), are finding their way into [macOS and iOS](https://developer.apple.com/passkeys/), and are slated to be [the future for password managers like 1Password](https://www.future.1password.com/passkeys/). They are [already supported](https://passkeys.dev/device-support/) in Android, and will soon find their way into Chrome OS and Windows in future releases.

Geeky OS security enhancements don’t exactly make big headlines in the front-end community, but it stands to reason that passkeys are going to be a “thing”. And considering how passwords and password apps affect the user experience of things like authentication and form processing, we might want to at least wrap our minds around them, so we know what’s coming.

That’s the point of this article. I’ve been studying and experimenting with passkeys — and the WebAuthn API they are built on top of — for some time now. Let me share what I’ve learned.

### [](#aa-table-of-contents)Table of contents

*   [Terminology](#terminology)
*   [What are passkeys?](#what-are-passkeys)
*   [How do passkeys replace passwords?](#how-do-passkeys-replace-passwords)
*   [More about cryptography](#more-about-cryptography)
*   [How do we access passkeys?](#how-do-we-access-passkeys)
*   [The difference between passkeys and WebAuthn](#the-difference-between-passkeys-and-webauthn)
*   [The process… in a nutshell](#the-process-in-a-nutshell)
*   [The meat and potatoes](#the-meat-and-potatoes)
*   [Some downsides](#some-downsides)
*   [Where are things going?](#where-are-things-going)
*   [Resources](#resources)

### [](#aa-terminology)Terminology

Here’s the obligatory section of the terminology you’re going to want to know as we dig in. Like most tech, passkeys are wrought with esoteric verbiage and acronyms that are often roadblocks to understanding. I’ll try to de-mystify several for you here.

*   **Relying Party:** the server you will be authenticating against. We’ll use “server” to imply the Relying Party in this article.
*   **Client:** in our case, the web browser or operating system.
*   **Authenticator:** Software and/or hardware devices that allow generation and storage for public key pairs.
*   **FIDO**: An open standards body that also creates specifications around FIDO credentials.
*   **WebAuthn**: The underlying protocol for passkeys, Also known as a [FIDO2](https://fidoalliance.org/fido2/) credential or single-device FIDO credentials.
*   **Passkeys**: WebAuthn, but with cloud syncing (also called multi-device FIDO credentials, discoverable credentials, or resident credentials).
*   **Public Key Cryptography:** A generated key pair that includes a private and public key. Depending on the algorithm, it should either be used for signing and verification or encrypting and decrypting. This is also known as _asymmetric cryptography_.
*   **RSA:** An acronym of the creators’ names, Rivest Shamir and Adel. RSA is an older, but still useful, family of public key cryptography based on factoring primes.
*   **Elliptic Curve Cryptography (ECC):** A newer family of cryptography [based on elliptic curves](https://csrc.nist.gov/Projects/Elliptic-Curve-Cryptography).
*   **ES256:** An elliptic curve public key that uses an ECDSA signing algorithm ([PDF](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf)) with [SHA256](https://en.wikipedia.org/wiki/SHA-2) for hashing.
*   **RS256:** Like ES256, but it uses RSA with [RSASSA-PKCS1-v1.5](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign#rsassa-pkcs1-v1_5_2) and SHA256.

### [](#aa-what-are-passkeys)What are passkeys?

Before we can talk specifically about passkeys, we need to talk about another protocol called [WebAuthn](https://webauthn.guide/) (also known as FIDO2). Passkeys are a specification that is built on top of WebAuthn. WebAuthn allows for public key cryptography to replace passwords. We use some sort of security device, such as a hardware key or [Trusted Platform Module](https://learn.microsoft.com/en-us/windows/security/information-protection/tpm/trusted-platform-module-top-node) (TPM), to create private and public keys.

The public key is for anyone to use. The private key, however, cannot be removed from the device that generated it. This was one of the issues with WebAuthn; if you lose the device, you lose access.

Passkeys solves this by providing a cloud sync of your credentials. In other words, what you generate on your computer can now also be used on your phone (though confusingly, there are single-device credentials too).

Currently, at the time of writing, only iOS, macOS, and Android provide full support for cloud-synced passkeys, and even then, they are limited by the browser being used. Google and Apple provide an interface for syncing via their [Google Password Manager](https://passwords.google.com/) and [Apple iCloud Keychain](https://support.apple.com/en-us/HT204085) services, respectively.

### [](#aa-how-do-passkeys-replace-passwords)How do passkeys replace passwords?

In public key cryptography, you can perform what is known as _signing_. Signing takes a piece of data and then runs it through a signing algorithm with the private key, where it can then be verified with the public key.

Anyone can generate a public key pair, and it’s not attributable to any person since any person could have generated it in the first place. What makes it useful is that only data signed with the private key can be verified with the public key. That’s the portion that replaces a password — a server stores the public key, and we sign in by verifying that we have the other half (e.g. private key), by signing a random challenge.

As an added benefit, since we’re storing the user’s public keys within a database, there is no longer concern with password breaches affecting millions of users. This reduces phishing, breaches, and a slew of other security issues that our password-dependent world currently faces. If a database is breached, all that’s stored in the user’s public keys, making it virtually useless to an attacker.

No more forgotten emails and their associated passwords, either! The browser will remember which credentials you used for which website — all you need to do is make a couple of clicks, and you’re logged in. You can provide a secondary means of verification to use the passkey, such as biometrics or a pin, but those are still much faster than the passwords of yesteryear.

### [](#aa-more-about-cryptography)More about cryptography

Public key cryptography involves having a private and a public key (known as a key pair). The keys are generated together and have separate uses. For example, the private key is intended to be kept secret, and the public key is intended for whomever you want to exchange messages with.

When it comes to encrypting and decrypting a message, the recipient’s public key is used to encrypt a message so that only the recipient’s private key can decrypt the message. In security parlance, this is known as “providing confidentiality”. However, this doesn’t provide proof that the sender is who they say they are, as anyone can potentially use a public key to send someone an encrypted message.

There are cases where we need to verify that a message did indeed come from its sender. In these cases, we use signing and signature verification to ensure that the sender is who they say they are (also known as _authenticity_). In public key (also called _asymmetric_) cryptography, this is generally done by signing the hash of a message, so that only the public key can correctly verify it. The hash and the sender’s private key produce a signature after running it through an algorithm, and then anyone can verify the message came from the sender with the sender’s public key.

### [](#aa-how-do-we-access-passkeys)How do we access passkeys?

To access passkeys, we first need to generate and store them somewhere. Some of this functionality can be provided with an authenticator. An _authenticator_ is any hardware or software-backed device that provides the ability for cryptographic key generation. Think of those one-time passwords you get from [Google Authenticator](https://support.google.com/accounts/answer/1066447?hl=en&co=GENIE.Platform%3DAndroid), [1Password](https://1password.com/), or [LastPass](https://www.lastpass.com/), among others.

For example, a software authenticator can use the Trusted Platform Module (TPM) or secure enclave of a device to create credentials. The credentials can be then stored remotely and synced across devices e.g. passkeys. A hardware authenticator would be something like a [YubiKey](https://www.yubico.com/), which can generate and store keys on the device itself.

To access the authenticator, the browser needs to have access to hardware, and for that, we need an interface. The interface we use here is the Client to Authenticator Protocol (CTAP). It allows access to different authenticators over different mechanisms. For example, we can access an authenticator over NFC, USB, and Bluetooth by utilizing CTAP.

One of the more interesting ways to use passkeys is by connecting your phone over Bluetooth to another device that might not support passkeys. When the devices are paired over Bluetooth, I can log into the browser on my computer using my phone as an intermediary!

### [](#aa-the-difference-between-passkeys-and-webauthn)The difference between passkeys and WebAuthn

Passkeys and WebAuthn keys differ in several ways. First, passkeys are considered multi-device credentials and can be synced across devices. By contrast, WebAuthn keys are single-device credentials — a fancy way of saying you’re bound to one device for verification.

Second, to authenticate to a server, WebAuthn keys need to provide the user handle for login, after which an `allowCredentials` list is returned to the client from the server, which informs what credentials can be used to log in. **Passkeys skip this step and use the server’s domain name to show which keys are already bound to that site.** You’re able to select the passkey that is associated with that server, as it’s already known by your system.

Otherwise, the keys are cryptographically the same; they only differ in how they’re stored and what information they use to start the login process.

### [](#aa-the-process-in-a-nutshell)The process… in a nutshell

The process for generating a WebAuthn or a passkey is very similar: get a challenge from the server and then use the `navigator.credentials.create` web API to generate a public key pair. Then, send the challenge and the public key back to the server to be stored.

Upon receiving the public key and challenge, the server validates the challenge and the session from which it was created. If that checks out, the public key is stored, as well as any other relevant information like the user identifier or attestation data, in the database.

The user has one more step — retrieve another challenge from the server and use the `navigator.credentials.get` API to sign the challenge. We send back the signed challenge to the server, and the server verifies the challenge, then logs us in if the signature passes.

There is, of course, quite a bit more to each step. But that is generally how we’d log into a website using WebAuthn or passkeys.

### [](#aa-the-meat-and-potatoes)The meat and potatoes

Passkeys are used in two distinct phases: the **attestation** and **assertion** phases.

The attestation phase can also be thought of as the registration phase. You’d sign up with an email and password for a new website, however, in this case, we’d be using our passkey.

The assertion phase is similar to how you’d log in to a website after signing up.

#### [](#aa-attestation)Attestation

[![](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/attestation.png?resize=736%2C569&ssl=1)](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/attestation.png?ssl=1)

[View full size](https://css-tricks.com/wp-content/uploads/2023/02/attestation.png)

The `navigator.credentials.create` API is the focus of our attestation phase. We’re registered as a new user in the system and need to generate a new public key pair. However, we need to specify what kind of key pair we want to generate. That means we need to provide options to `navigator.credentials.create`.

    // The `challenge` is random and has to come from the server
    const publicKey: PublicKeyCredentialCreationOptions = {
      challenge: safeEncode(challenge),
      rp: {
        id: window.location.host,
        name: document.title,
      },
      user: {
        id: new TextEncoder().encode(crypto.randomUUID()), // Why not make it random?
        name: 'Your username',
        displayName: 'Display name in browser',
      },
      pubKeyCredParams: [
        {
          type: 'public-key',
          alg: -7, // ES256
        },
        {
          type: 'public-key',
          alg: -256, // RS256
        },
      ],
      authenticatorSelection: {
        userVerification: 'preferred', // Do you want to use biometrics or a pin?
        residentKey: 'required', // Create a resident key e.g. passkey
      },
      attestation: 'indirect', // indirect, direct, or none
      timeout: 60_000,
    };

    const pubKeyCredential: PublicKeyCredential = await navigator.credentials.create({
      publicKey
    });
    const {
      id // the key id a.k.a. kid
    } = pubKeyCredential;
    const pubKey = pubKeyCredential.response.getPublicKey();
    const { clientDataJSON, attestationObject } = pubKeyCredential.response;
    const { type, challenge, origin } = JSON.parse(new TextDecoder().decode(clientDataJSON));
    // Send data off to the server for registration

We’ll get [`PublicKeyCredential`](https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential) which contains an [`AuthenticatorAttestationResponse`](https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAttestationResponse) that comes back after creation. The credential has the generated key pair’s ID.

The response provides a couple of bits of useful information. First, we have our public key in this response, and we need to send that to the server to be stored. Second, we also get back the `clientDataJSON` property which we can decode, and from there, get back the `type`, `challenge`, and `origin` of the passkey.

For attestation, we want to validate the `type`, `challenge`, and `origin` on the server, as well as store the public key with its identifier, e.g. kid. We can also optionally store the `attestationObject` if we wish. Another useful property to store is the [COSE](https://www.iana.org/assignments/cose/cose.xhtml#algorithms) algorithm, which is defined above in our  `PublicKeyCredentialCreationOptions` with `alg: -7` or `alg: -256`, in order to easily verify any signed challenges in the assertion phase.

#### [](#aa-assertion)Assertion

[![](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/assertion.png?resize=717%2C516&ssl=1)](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/assertion.png?ssl=1)

[View full size](https://css-tricks.com/wp-content/uploads/2023/02/assertion.png)

The `navigator.credentials.get` API will be the focus of the assertion phase. Conceptually, this would be where the user logs in to the web application after signing up.

    // The `challenge` is random and has to come from the server
    const publicKey: PublicKeyCredentialRequestOptions = {
      challenge: new TextEncoder().encode(challenge),
      rpId: window.location.host,
      timeout: 60_000,
    };

    const publicKeyCredential: PublicKeyCredential = await navigator.credentials.get({
      publicKey,
      mediation: 'optional',
    });
    const {
      id // the key id, aka kid
    } = pubKeyCredential;
    const { clientDataJSON, attestationObject, signature, userHandle } = pubKeyCredential.response;
    const { type, challenge, origin } = JSON.parse(new TextDecoder().decode(clientDataJSON));
    // Send data off to the server for verification

We’ll again get a [`PublicKeyCredential`](https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential) with an [`AuthenticatorAssertionResponse`](https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse) this time. The credential again includes the key identifier.

We also get the `type`, `challenge`, and `origin` from the `clientDataJSON` again. The `signature` is now included in the response, as well as the `authenticatorData`. We’ll need those and the `clientDataJSON` to verify that this was signed with the private key.

The [`authenticatorData`](https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse/authenticatorData) includes some properties that are worth tracking First is the SHA256 hash of the origin you’re using, located within the first 32 bytes, which is useful for verifying that request comes from the same origin server. Second is the `signCount`, which is from byte 33 to 37. This is generated from the authenticator and should be compared to its previous value to ensure that nothing fishy is going on with the key. The value should always 0 when it’s a multi-device passkey and should be randomly larger than the previous signCount when it’s a single-device passkey.

Once you’ve asserted your login, you should be logged in — _congratulations_! Passkeys is a pretty great protocol, but it does come with some caveats.

### [](#aa-some-downsides)Some downsides

There’s a lot of upside to Passkeys, however, there are some issues with it at the time of this writing. For one thing, passkeys is somewhat still early support-wise, with only single-device credentials allowed on Windows and very little support for Linux systems. [Passkeys.dev](http://passkeys.dev/) provides a [nice table that’s sort of like the Caniuse of this protocol](https://passkeys.dev/device-support/).

Also, Google’s and Apple’s passkeys platforms do not communicate with each other. If you want to get your credentials from your Android phone over to your iPhone… well, you’re out of luck for now. That’s not to say there is no interoperability! You can log in to your computer by using your phone as an authenticator. But it would be much cleaner just to have it built into the operating system and synced without it being locked at the vendor level.

### [](#aa-where-are-things-going)Where are things going?

What does the passkeys protocol of the future look like? It looks pretty good! Once it gains support from more operating systems, there should be an uptake in usage, and you’ll start seeing it used more and more in the wild. Some [password managers](https://www.future.1password.com/passkeys) are even going to support them first-hand.

Passkeys are by no means only supported on the web. [Android](https://developer.android.com/training/sign-in/passkeys) and [iOS](https://developer.apple.com/documentation/authenticationservices/public-private_key_authentication/supporting_passkeys) will both support native passkeys as first-class citizens. We’re still in the early days of all this, but expect to see it mentioned more and more.

After all, we eliminate the need for passwords, and by doing so, make the world safer for it!

### [](#aa-resources)Resources

Here are some more resources if you want to learn more about Passkeys. There’s also a repository and demo I put together for this article.

*   [Live Demo](https://passkeys.neal.codes/) (no actual information is collected by the form)
*   [Demo GitHub Repository](https://github.com/nealfennimore/passkeys)
*   [YubiKey Documentation](https://developers.yubico.com/Passkeys/)
*   [Passkeys.dev](https://passkeys.dev/)
*   [Passkeys.io](https://www.passkeys.io/)
*   [Webauthn.io](https://webauthn.io/)"
2,Some Cross-Browser DevTools Features You Might Not Know,https://css-tricks.com/some-cross-browser-devtools-features-you-might-not-know/,https://css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721838803_Screenshot2023-01-26at14.00.01.png,Pankaj Parashar,1679454000000,,"[""cross-browser"",""DevTools""]","I spend a lot of time in DevTools, and I’m sure you do too. Sometimes I even bounce between them, especially when I’m debugging cross-browser issues. DevTools is a lot like browsers themselves — not all of the features in one browser’s DevTools will be the same or supported in another browser’s DevTools.

But there are quite a few DevTools features that are interoperable, even some lesser-known ones that I’m about to share with you.

For the sake of brevity, I use “Chromium” to refer to all Chromium-based browsers, like Chrome, Edge, and Opera, in the article. Many of the DevTools in them offer the exact same features and capabilities as one another, so this is just my shorthand for referring to all of them at once.

### [](#aa-search-nodes-in-the-dom-tree)Search nodes in the DOM tree

Sometimes the DOM tree is full of nodes nested in nodes that are nested in other nodes, and so on. That makes it pretty tough to find the exact one you’re looking for, but you can quickly search the DOM tree using `Cmd` + `F` (macOS) or `Ctrl` + `F` (Windows).

Additionally, you can also search using a valid CSS selector, like `.red`, or using an XPath, like `//div/h1`.

![DevTools screenshots of all three browsers.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674209097213_image-1.png?resize=2378%2C1048&ssl=1)

Searching text in Chrome DevTools (left), selectors in Firefox DevTools (center), and XPath in Safari DevTools (right)

In Chromium browsers, the focus automatically jumps to the node that matches the search criteria as you type, which could be annoying if you are working with longer search queries or a large DOM tree. Fortunately, you can disable this behavior by heading to **Settings** (`F1`) → **Preferences** → **Global** → **Search as you type** → **Disable**.

After you have located the node in the DOM tree, you can scroll the page to bring the node within the viewport by right-clicking on the nod, and selecting “Scroll into view”.

![Showing a highlighted node on a webpage with a contextual menu open to scroll into view](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1675742347357_image.png?resize=1786%2C1118&ssl=1)

### [](#aa-access-nodes-from-the-console)Access nodes from the console

DevTools provides many different ways to access a DOM node directly from the console.

For example, you can use `$0` to access the currently selected node in the DOM tree. Chromium browsers take this one step further by allowing you to access nodes selected in the reverse chronological order of historic selection using, `$1`, `$2`, `$3`, etc.

![Currently selected node accessed from the Console in Edge DevTools](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674396487537_image-3.png?resize=1682%2C1028&ssl=1)

Another thing that Chromium browsers allow you to do is copy the node path as a JavaScript expression in the form of `document.querySelector` by right-clicking on the node, and selecting **Copy** → **Copy JS path**, which can then be used to access the node in the console.

Here’s another way to access a DOM node directly from the console: as a temporary variable. This option is available by right-clicking on the node and selecting an option. That option is labeled differently in each browser’s DevTools:

*   **Chromium**: Right click → “Store as global variable”
*   **Firefox**: Right click → “Use in Console”
*   **Safari**: Right click → “Log Element”

![Screenshot of DevTools contextual menus in all three browsers.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674633378298_Myproject-1.png?resize=2560%2C1440&ssl=1)

Access a node as a temporary variable in the console, as shown in Chrome (left), Firefox (center), and Safari (right)

### [](#aa-visualize-elements-with-badges)Visualize elements with badges

DevTools can help visualize elements that match certain properties by displaying a badge next to the node. Badges are clickable, and different browsers offer a variety of different badges.

In **Safari**, there is a badge button in the Elements panel toolbar which can be used to toggle the visibility of specific badges. For example, if a node has a `display: grid` or `display: inline-grid` CSS declaration applied to it, a `grid` badge is displayed next to it. Clicking on the badge will highlight grid areas, track sizes, line numbers, and more, on the page.

![A grid overlay visualized on top of a three-by-three grid.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674708049378_Screenshot2023-01-26at10.05.40.png?resize=1738%2C1082&ssl=1)

Grid overlay with badges in Safari DevTools

The badges that are currently supported in **Firefox**’s DevTools are listed in the Firefox [source docs](https://firefox-source-docs.mozilla.org/devtools-user/page_inspector/how_to/examine_and_edit_html/index.html#html-tree). For example, a `scroll` badge indicates a scrollable element. Clicking on the badge highlights the element causing the overflow with an `overflow` badge next to it.

![Overflow badge in Firefox DevTools located in the HTML panel](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/overflow_badge.png?resize=852%2C379&ssl=1)

In **Chromium** browsers, you can right-click on any node and select **“Badge settings…”** to open a container that lists all of the available badges. For example, elements with `scroll-snap-type` will have a `scroll-snap` badge next to it, which on click, will toggle the `scroll-snap` overlay on that element.

![](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/tbuxzdUk.png?resize=1738%2C1082&ssl=1)

### [](#aa-taking-screenshots)Taking screenshots

We’ve been able to take screenshots from some DevTools for a while now, but it’s now available in all of them and includes new ways to take full-page shots.

The process starts by right-clicking on the DOM node you want to capture. Then select the option to capture the node, which is labeled differently depending on which DevTools you’re using.

![Screenshot of DevTools in all three browsers.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721274966_Myproject-1.png?resize=2560%2C1700&ssl=1)

Chrome (left), Safari (middle), and Firefox (right)

Repeat the same steps on the `html` node to take a full-page screenshot. When you do, though, it’s worth noting that Safari retains the transparency of the element’s background color — Chromium and Firefox will capture it as a white background.

![Two screenshots of the same element, one with a background and one without.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721838803_Screenshot2023-01-26at14.00.01.png?resize=1506%2C1082&ssl=1)

Comparing screenshots in Safari (left) and Chromium (right)

There’s another option! You can take a “responsive” screenshot of the page, which allows you to capture the page at a specific viewport width. As you might expect, each browser has different ways to get there.

*   **Chromium**: `Cmd` + `Shift` + `M` (macOS) or `Ctrl` + `Shift` + `M` (Windows). Or click the “Devices” icon next to the “Inspect” icon.
*   **Firefox**: Tools → Browser Tools → “Responsive Design Mode”
*   **Safari**: Develop → “Enter Responsive Design Mode”

![Enter responsive mode options in DevTools for all three browsers.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674755907874_screenshot.png?resize=2550%2C1700&ssl=1)

Launching responsive design mode in Safari (left), Firefox (right), and Chromium (bottom)

### [](#aa-chrome-tip-inspect-the-top-layer)Chrome tip: Inspect the top layer

Chrome lets you visualize and inspect top-layer elements, like a dialog, alert, or modal. When an element is added to the `#top-layer`, it gets a `top-layer` badge next to it, which on click, jumps you to the top-layer container located just after the `</html>` tag.

The order of the elements in the `top-layer` container follows the stacking order, which means the last one is on the top. Click the `reveal` badge to jump back to the node.

### [](#aa-firefox-tip-jump-to-id)Firefox tip: Jump to ID

Firefox links the element referencing the ID attribute to its target element in the same DOM and highlights it with an underline. Use `CMD` + `Click` (macOS) or `CTRL` + `Click` (Windows) )to jump to the target element with the identifier.

### [](#aa-wrapping-up)Wrapping up

Quite a few things, right? It’s awesome that there are some incredibly useful DevTools features that are supported in Chromium, Firefox, and Safari alike. Are there any other lesser-known features supported by all three that you like?

There are a few resources I keep close by to stay on top of what’s new. I thought I’d share them with here:

*   [DevTools Tips](https://devtoolstips.org/) (Patrick Brosset): A curated collection of helpful cross-browser DevTools tips and tricks.
*   [Dev Tips](https://umaar.com/dev-tips/) (Umar Hansa): DevTools tips sent to your inbox!
*   [Can I DevTools?](https://www.canidev.tools/): The [Can](https://caniuse.com)[iuse](https://caniuse.com) for DevTools."
3,Making Calendars With Accessibility and Internationalization in Mind,https://css-tricks.com/making-calendars-with-accessibility-and-internationalization-in-mind/,https://css-tricks.com/wp-content/uploads/2021/09/calendar-ios.jpg,Mads Stoumann,1678676400000,,"[""custom elements"",""i18n"",""locales""]","Doing a quick search here on CSS-Tricks shows just how many different ways there are to approach calendars. Some show how [CSS Grid can create the layout efficiently](https://css-tricks.com/a-calendar-in-three-lines-of-css/). Some attempt to [bring actual data into the mix](https://css-tricks.com/how-to-make-a-monthly-calendar-with-real-data/). Some [rely on a framework](https://css-tricks.com/lets-make-a-vue-powered-monthly-calendar/) to help with state management.

There are many considerations when building a calendar component — far more than what is covered in the articles I linked up. If you think about it, calendars are fraught with nuance, from handling timezones and date formats to localization and even making sure dates flow from one month to the next… and that’s before we even get into accessibility and additional layout considerations depending on where the calendar is displayed and whatnot.

Many developers fear the [`Date()` object](https://css-tricks.com/everything-you-need-to-know-about-date-in-javascript/) and stick with older libraries like [`moment.js`](https://momentjs.com). But while there are many “gotchas” when it comes to dates and formatting, JavaScript has a lot of cool APIs and stuff to help out!

![January 2023 calendar grid.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672583219797_image.png?resize=464%2C251&ssl=1)

I don’t want to re-create the wheel here, but I will show you how we can get a dang good calendar with vanilla JavaScript. We’ll look into **accessibility**, using semantic markup and screenreader-friendly `<time>` -tags — as well as **internationalization** and **formatting**, using the `Intl.Locale`, `Intl.DateTimeFormat` and `Intl.NumberFormat`\-APIs.

In other words, we’re making a calendar… only without the extra dependencies you might typically see used in a tutorial like this, and with some of the nuances you might not typically see. And, in the process, I hope you’ll gain a new appreciation for newer things that JavaScript can do while getting an idea of the sorts of things that cross my mind when I’m putting something like this together.

### [](#aa-first-off-naming)First off, naming

What should we call our calendar component? In my native language, it would be called “kalender element”, so let’s use that and shorten that to “Kal-El” — also known as [Superman’s name on the planet Krypton](https://the-superman.fandom.com/wiki/Kal-El).

Let’s create a function to get things going:

    function kalEl(settings = {}) { ... }

This method will render **a single month**. Later we’ll call this method from `[...Array(12).keys()]` to render an entire year.

### [](#aa-initial-data-and-internationalization)Initial data and internationalization

One of the common things a typical online calendar does is highlight the current date. So let’s create a reference for that:

    const today = new Date();

Next, we’ll create a “configuration object” that we’ll merge with the optional `settings` object of the primary method:

    const config = Object.assign(
      {
        locale: (document.documentElement.getAttribute('lang') || 'en-US'), 
        today: { 
          day: today.getDate(),
          month: today.getMonth(),
          year: today.getFullYear() 
        } 
      }, settings
    );

We check, if the root element (`<html>`) contains a `lang`\-attribute with **locale** info; otherwise, we’ll fallback to using `en-US`. This is the first step toward [internationalizing the calendar](https://www.w3.org/International/questions/qa-html-language-declarations).

We also need to determine which month to initially display when the calendar is rendered. That’s why we extended the `config` object with the primary `date`. This way, if no date is provided in the `settings` object, we’ll use the `today` reference instead:

    const date = config.date ? new Date(config.date) : today;

We need a little more info to properly format the calendar based on locale. For example, we might not know whether the first day of the week is Sunday or Monday, depending on the locale. If we have the info, great! But if not, we’ll update it using the [`Intl.Locale` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale). The API has a [`weekInfo` object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/weekInfo) that returns a `firstDay` property that gives us exactly what we’re looking for without any hassle. We can also get which days of the week are assigned to the `weekend`:

    if (!config.info) config.info = new Intl.Locale(config.locale).weekInfo || { 
      firstDay: 7,
      weekend: [6, 7] 
    };

Again, we create fallbacks. The “first day” of the week for `en-US` is Sunday, so it defaults to a value of `7`. This is a little confusing, as the [`getDay` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay) in JavaScript returns the days as `[0-6]`, where `0` is Sunday… don’t ask me why. The weekends are Saturday and Sunday, hence `[6, 7]`.

Before we had the `Intl.Locale` API and its `weekInfo` method, it was pretty hard to create an international calendar without many \*\*objects and arrays with information about each locale or region. Nowadays, it’s easy-peasy. If we pass in `en-GB`, the method returns:

    // en-GB
    {
      firstDay: 1,
      weekend: [6, 7],
      minimalDays: 4
    }

In a country like Brunei (`ms-BN`), the weekend is Friday and Sunday:

    // ms-BN
    {
      firstDay: 7,
      weekend: [5, 7],
      minimalDays: 1
    }

You might wonder what that `minimalDays` property is. That’s the [fewest days required in the first week of a month to be counted as a full week](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Patterns_Week_Elements). In some regions, it might be just one day. For others, it might be a full seven days.

Next, we’ll create a `render` method within our `kalEl`\-method:

    const render = (date, locale) => { ... }

We still need some more data to work with before we render anything:

    const month = date.getMonth();
    const year = date.getFullYear();
    const numOfDays = new Date(year, month + 1, 0).getDate();
    const renderToday = (year === config.today.year) && (month === config.today.month);

The last one is a `Boolean` that checks whether `today` exists in the month we’re about to render.

### [](#aa-semantic-markup)Semantic markup

We’re going to get deeper in rendering in just a moment. But first, I want to make sure that the details we set up have semantic HTML tags associated with them. Setting that up right out of the box gives us accessibility benefits from the start.

#### [](#aa-calendar-wrapper)Calendar wrapper

First, we have the non-semantic wrapper: `<kal-el>`. That’s fine because there isn’t a semantic `<calendar>` tag or anything like that. If we weren’t making a custom element, `<article>` might be the most appropriate element since the calendar could stand on its own page.

#### [](#aa-month-names)Month names

The `<time>` element is going to be a big one for us because it helps translate dates into a format that screenreaders and search engines can parse more accurately and consistently. For example, here’s how we can convey “January 2023” in our markup:

    <time datetime=""2023-01"">January <i>2023</i></time>

#### [](#aa-day-names)Day names

The row above the calendar’s dates containing the names of the days of the week can be tricky. It’s ideal if we can write out the full names for each day — e.g. Sunday, Monday, Tuesday, etc. — but that can take up a lot of space. So, let’s abbreviate the names for now inside of an `<ol>` where each day is a `<li>`:

    <ol>
      <li><abbr title=""Sunday"">Sun</abbr></li>
      <li><abbr title=""Monday"">Mon</abbr></li>
      <!-- etc. -->
    </ol>

We could get tricky with CSS to get the best of both worlds. For example, if we modified the markup a bit like this:

    <ol>
      <li>
        <abbr title=""S"">Sunday</abbr>
      </li>
    </ol>

…we get the full names by default. We can then “hide” the full name when space runs out and display the `title` attribute instead:

    @media all and (max-width: 800px) {
      li abbr::after {
        content: attr(title);
      }
    }

But, we’re not going that way because the `Intl.DateTimeFormat` API can help here as well. We’ll get to that in the next section when we cover rendering.

#### [](#aa-day-numbers)Day numbers

Each date in the calendar grid gets a number. Each number is a list item (`<li>`) in an ordered list (`<ol>`), and the inline `<time>` tag wraps the actual number.

    <li>
      <time datetime=""2023-01-01"">1</time>
    </li>

And while I’m not planning to do any styling just yet, I know I will want some way to style the date numbers. That’s possible as-is, but I also want to be able to style weekday numbers differently than weekend numbers if I need to. So, I’m going to include [`data-*` attributes](https://css-tricks.com/a-complete-guide-to-data-attributes/) specifically for that: `data-weekend` and `data-today`.

#### [](#aa-week-numbers)Week numbers

There are 52 weeks in a year, sometimes 53. While it’s not super common, it can be nice to display the number for a given week in the calendar for additional context. I like having it now, even if I don’t wind up not using it. But we’ll totally use it in this tutorial.

We’ll use a `data-weeknumber` attribute as a styling hook and include it in the markup for each date that is the week’s first date.

    <li data-day=""7"" data-weeknumber=""1"" data-weekend="""">
      <time datetime=""2023-01-08"">8</time>
    </li>

### [](#aa-rendering)Rendering

Let’s get the calendar on a page! We already know that `<kal-el>` is the name of our custom element. First thing we need to configure it is to set the `firstDay` property on it, so the calendar knows whether Sunday or some other day is the first day of the week.

    <kal-el data-firstday=""${ config.info.firstDay }"">

We’ll be using [template literals](https://css-tricks.com/template-literals/) to render the markup. To format the dates for an international audience, we’ll use the `Intl.DateTimeFormat` API, again using the `locale` we specified earlier.

#### [](#aa-the-month-and-year)The month and year

When we call the `month`, we can set whether we want to use the `long` name (e.g. February) or the `short` name (e.g. Feb.). Let’s use the `long` name since it’s the title above the calendar:

    <time datetime=""${year}-${(pad(month))}"">
      ${new Intl.DateTimeFormat(
        locale,
        { month:'long'}).format(date)} <i>${year}</i>
    </time>

#### [](#aa-weekday-names)Weekday names

For weekdays displayed above the grid of dates, we need both the `long` (e.g. “Sunday”) and `short` (abbreviated, ie. “Sun”) names. This way, we can use the “short” name when the calendar is short on space:

    Intl.DateTimeFormat([locale], { weekday: 'long' })
    Intl.DateTimeFormat([locale], { weekday: 'short' })

Let’s make a small helper method that makes it a little easier to call each one:

    const weekdays = (firstDay, locale) => {
      const date = new Date(0);
      const arr = [...Array(7).keys()].map(i => {
        date.setDate(5 + i)
        return {
          long: new Intl.DateTimeFormat([locale], { weekday: 'long'}).format(date),
          short: new Intl.DateTimeFormat([locale], { weekday: 'short'}).format(date)
        }
      })
      for (let i = 0; i < 8 - firstDay; i++) arr.splice(0, 0, arr.pop());
      return arr;
    }

Here’s how we invoke that in the template:

    <ol>
      ${weekdays(config.info.firstDay,locale).map(name => `
        <li>
          <abbr title=""${name.long}"">${name.short}</abbr>
        </li>`).join('')
      }
    </ol>

#### [](#aa-day-numbers)Day numbers

And finally, the days, wrapped in an `<ol>` element:

    ${[...Array(numOfDays).keys()].map(i => {
      const cur = new Date(year, month, i + 1);
      let day = cur.getDay(); if (day === 0) day = 7;
      const today = renderToday && (config.today.day === i + 1) ? ' data-today':'';
      return `
        <li data-day=""${day}""${today}${i === 0 || day === config.info.firstDay ? ` data-weeknumber=""${new Intl.NumberFormat(locale).format(getWeek(cur))}""`:''}${config.info.weekend.includes(day) ? ` data-weekend`:''}>
          <time datetime=""${year}-${(pad(month))}-${pad(i)}"" tabindex=""0"">
            ${new Intl.NumberFormat(locale).format(i + 1)}
          </time>
        </li>`
    }).join('')}

Let’s break that down:

1.  We create a “dummy” array, based on the “number of days” variable, which we’ll use to iterate.
2.  We create a `day` variable for the current day in the iteration.
3.  We fix the discrepancy between the `Intl.Locale` API and `getDay()`.
4.  If the `day` is equal to `today`, we add a `data-*` attribute.
5.  Finally, we return the `<li>` element as a string with merged data.
6.  `tabindex=""0""` makes the element focusable, when using keyboard navigation, after any positive tabindex values (Note: you should **never** add **positive** tabindex-values)

To [“pad” the numbers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart) in the `datetime` attribute, we use a little helper method:

    const pad = (val) => (val + 1).toString().padStart(2, '0');

#### [](#aa-week-number)Week number

Again, the “week number” is where a week falls in a 52-week calendar. We use a little helper method for that as well:

    function getWeek(cur) {
      const date = new Date(cur.getTime());
      date.setHours(0, 0, 0, 0);
      date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
      const week = new Date(date.getFullYear(), 0, 4);
      return 1 + Math.round(((date.getTime() - week.getTime()) / 86400000 - 3 + (week.getDay() + 6) % 7) / 7);
    }

I didn’t write this `getWeek`\-method. It’s a cleaned up version of [this script](https://weeknumber.com/how-to/javascript).

And that’s it! Thanks to the [`Intl.Locale`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale), [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) and [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) APIs, we can now simply change the `lang`\-attribute of the `<html>` element to change the context of the calendar based on the current region:

![January 2023 calendar grid.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672589519354_image.png?resize=456%2C284&ssl=1)

`de-DE`

![January 2023 calendar grid.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672589309595_image.png?resize=444%2C253&ssl=1)

`fa-IR`

![January 2023 calendar grid.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672589340340_image.png?resize=451%2C257&ssl=1)

`zh-Hans-CN-u-nu-hanidec`

### [](#aa-styling-the-calendar)Styling the calendar

You might recall how all the days are just one `<ol>` with list items. To style these into a readable calendar, we dive into the wonderful world of CSS Grid. In fact, we can repurpose the same grid from [a starter calendar template right here on CSS-Tricks](https://css-tricks.com/snippets/css/css-grid-starter-layouts/), but updated a smidge with the `:is()` relational pseudo to optimize the code.

Notice that I’m defining configurable CSS variables along the way (and prefixing them with `---kalel-` to avoid conflicts).

    kal-el :is(ol, ul) {
      display: grid;
      font-size: var(--kalel-fz, small);
      grid-row-gap: var(--kalel-row-gap, .33em);
      grid-template-columns: var(--kalel-gtc, repeat(7, 1fr));
      list-style: none;
      margin: unset;
      padding: unset;
      position: relative;
    }

![Seven-column calendar grid with grid lines shown.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672590153826_image.png?resize=397%2C266&ssl=1)

Let’s draw borders around the date numbers to help separate them visually:

    kal-el :is(ol, ul) li {
      border-color: var(--kalel-li-bdc, hsl(0, 0%, 80%));
      border-style: var(--kalel-li-bds, solid);
      border-width: var(--kalel-li-bdw, 0 0 1px 0);
      grid-column: var(--kalel-li-gc, initial);
      text-align: var(--kalel-li-tal, end); 
    }

The seven-column grid works fine when the first day of the month is _also_ the first day of the week for the selected locale). But that’s the exception rather than the rule. Most times, we’ll need to shift the first day of the month to a different weekday.

![Showing the first day of the month falling on a Thursday.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672590297938_image.png?resize=390%2C266&ssl=1)

Remember all the extra `data-*` attributes we defined when writing our markup? We can hook into those to update which grid column (`--kalel-li-gc`) the first date number of the month is placed on:

    [data-firstday=""1""] [data-day=""3""]:first-child {
      --kalel-li-gc: 1 / 4;
    }

In this case, we’re spanning from the first grid column to the fourth grid column — which will automatically “push” the next item (Day 2) to the fifth grid column, and so forth.

Let’s add a little style to the “current” date, so it stands out. These are just my styles. You can totally do what you’d like here.

    [data-today] {
      --kalel-day-bdrs: 50%;
      --kalel-day-bg: hsl(0, 86%, 40%);
      --kalel-day-hover-bgc: hsl(0, 86%, 70%);
      --kalel-day-c: #fff;
    }

I like the idea of styling the date numbers for weekends differently than weekdays. I’m going to use a reddish color to style those. Note that we can reach for the `:not()` pseudo-class to select them while leaving the current date alone:

    [data-weekend]:not([data-today]) { 
      --kalel-day-c: var(--kalel-weekend-c, hsl(0, 86%, 46%));
    }

Oh, and let’s not forget the week numbers that go before the first date number of each week. We used a `data-weeknumber` attribute in the markup for that, but the numbers won’t actually display unless we reveal them with CSS, which we can do on the `::before` pseudo-element:

    [data-weeknumber]::before {
      display: var(--kalel-weeknumber-d, inline-block);
      content: attr(data-weeknumber);
      position: absolute;
      inset-inline-start: 0;
      /* additional styles */
    }

We’re technically done at this point! We can render a calendar grid that shows the dates for the current month, complete with considerations for localizing the data by locale, and ensuring that the calendar uses proper semantics. And all we used was vanilla JavaScript and CSS!

But let’s take this _one more step_…

### [](#aa-rendering-an-entire-year)Rendering an entire year

Maybe you need to display a full year of dates! So, rather than render the current month, you might want to display all of the month grids for the current year.

Well, the nice thing about the approach we’re using is that we can call the `render` method as many times as we want and merely change the integer that identifies the month on each instance. Let’s call it 12 times based on the current year.

as simple as calling the `render`\-method 12 times, and just change the integer for `month` — `i`:

    [...Array(12).keys()].map(i =>
      render(
        new Date(date.getFullYear(),
        i,
        date.getDate()),
        config.locale,
        date.getMonth()
      )
    ).join('')

It’s probably a good idea to create a new parent wrapper for the rendered year. Each calendar grid is a `<kal-el>` element. Let’s call the new parent wrapper `<jor-el>`, where [Jor-El is the name of Kal-El’s father](https://superman.fandom.com/wiki/Jor-El).

    <jor-el id=""app"" data-year=""true"">
      <kal-el data-firstday=""7"">
        <!-- etc. -->
      </kal-el>
    
      <!-- other months -->
    </jor-el>

We can use `<jor-el>` to create a grid for our grids. So meta!

    jor-el {
      background: var(--jorel-bg, none);
      display: var(--jorel-d, grid);
      gap: var(--jorel-gap, 2.5rem);
      grid-template-columns: var(--jorel-gtc, repeat(auto-fill, minmax(320px, 1fr)));
      padding: var(--jorel-p, 0);
    }

### [](#aa-final-demo)Final demo

CodePen Embed Fallback

### [](#aa-bonus-confetti-calendar)Bonus: Confetti Calendar

I read an excellent book called _[Making and Breaking the Grid](https://www.goodreads.com/book/show/35863579-making-and-breaking-the-grid)_ the other day and stumbled on this beautiful “New Year’s poster”:

![](https://i0.wp.com/paper-attachments.dropboxusercontent.com/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1673333960043_IMG_1264.jpeg?ssl=1)

Source: _[Making and Breaking the Grid (2nd Edition)](https://www.goodreads.com/book/show/35863579-making-and-breaking-the-grid)_ by Timothy Samara

I figured we could do something similar without changing anything in the HTML or JavaScript. I’ve taken the liberty to include full names for months, and numbers instead of day names, to make it more readable. Enjoy!

CodePen Embed Fallback"
4,5 Mistakes I Made When Starting My First React Project,https://css-tricks.com/5-mistakes-starting-react/,https://css-tricks.com/wp-content/uploads/2023/02/react-facepalm.png,Richard Oliver Bray,1678417200000,,"[""learning"",""react""]","You know what it’s like to pick up a new language or framework. Sometimes there’s great documentation to help you find your way through it. But even the best documentation doesn’t cover absolutely everything. And when you work with something that’s new, you’re bound to find a problem that doesn’t have a written solution.

That’s how it was for me the first time I created a React project — and React is one of those frameworks with remarkable documentation, especially now with the beta docs. But I still struggled my way through. It’s been quite a while since that project, but the lessons I gained from it are still fresh in my mind. And even though there are a lot of React “how-to” tutorials in out there, I thought I’d share what I wish I knew when I first used it.

So, that’s what this article is — a list of the early mistakes I made. I hope they help make learning React a lot smoother for you.

### [](#aa-using-create-react-app-to-start-a-project)Using create-react-app to start a project

TL;DR Use Vite or Parcel.

[Create React App](https://create-react-app.dev/) (CRA) is a tool that helps you set up a new React project. It creates a development environment with the best configuration options for most React projects. This means you don’t have to spend time configuring anything yourself.

As a beginner, this seemed like a great way to start my work! No configuration! Just start coding!

CRA uses two popular packages to achieve this, webpack and Babel. webpack is a web bundler that optimizes all of the assets in your project, such as JavaScript, CSS, and images. Babel is a tool that allows you to use newer JavaScript features, even if some browsers don’t support them.

Both are good, but there are newer tools that can do the job better, specifically [Vite](https://vitejs.dev) and [Speedy Web Compiler](https://swc.rs) (SWC).

These new and improved alternatives are faster and easier to configure than webpack and Babel. This makes it easier to adjust the configuration which is difficult to do in create-react-app without ejecting.

To use them both when setting up a new React project you have to make sure you have [Node](https://nodejs.org/en/) version 12 or higher installed, then run the following command.

    npm create vite

You’ll be asked to pick a name for your project. Once you do that, select React from the list of frameworks. After that, you can select either `Javascript + SWC` or `Typescript + SWC`

Then you’ll have to change directory `cd` into your project and run the following command;

    npm i && npm run dev

This should run a development server for your site with the URL `localhost:5173`

And it’s as simple as that.

**Article** on Jan 11, 2022

### [](#aa-adding-vite-to-your-existing-web-app)[Adding Vite to Your Existing Web App](https://css-tricks.com/adding-vite-to-your-existing-web-app/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://secure.gravatar.com/avatar/d4b0907c0d98a2394568d9bf9e8814c3?s=80&d=retro&r=pg)](https://css-tricks.com/author/adam-rackis/)[Adam Rackis](https://css-tricks.com/author/adam-rackis/)

**Article** on Jan 18, 2022

### [](#aa-making-a-site-work-offline-using-the-vitepwa-plugin)[Making a Site Work Offline Using the VitePWA Plugin](https://css-tricks.com/vitepwa-plugin-offline-service-worker/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://secure.gravatar.com/avatar/d4b0907c0d98a2394568d9bf9e8814c3?s=80&d=retro&r=pg)](https://css-tricks.com/author/adam-rackis/)[Adam Rackis](https://css-tricks.com/author/adam-rackis/)

**Article** on Jan 12, 2022

### [](#aa-parcel-css-a-new-css-parser-transformer-and-minifier)[Parcel CSS: A New CSS Parser, Transformer, and Minifier](https://css-tricks.com/parcel-css/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&d=retro&r=pg)](https://css-tricks.com/author/chriscoyier/)[Chris Coyier](https://css-tricks.com/author/chriscoyier/)

**Article** on Apr 25, 2019

### [](#aa-using-parcel-as-a-bundler-for-react-applications)[Using Parcel as a Bundler for React Applications](https://css-tricks.com/using-parcel-as-a-bundler-for-react-applications/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&d=retro&r=pg)](https://css-tricks.com/author/kinglseysilas/)[Kingsley Silas](https://css-tricks.com/author/kinglseysilas/)

### [](#aa-using-defaultprops-for-default-values)Using `defaultProps` for default values

TL;DR Use default function parameters instead.

Data can be passed to React components through something called `props`. These are added to a component just like attributes in an HTML element and can be used in a component’s definition by taking the relevant values from the prop object passed in as an argument.

    // App.jsx
    export default function App() {
      return <Card title=""Hello"" description=""world"" />
    }
    
    // Card.jsx
    function Card(props) {
      return (
        <div>
          <h1>{props.title}</h1>
          <p>{props.description}</p>
        </div>
      );
    }
    
    export default Card;

If a default value is ever required for a `prop`, the `defaultProp` property can be used:

    // Card.jsx
    function Card(props) {
      // ...
    }
    
    Card.defaultProps = {
      title: 'Default title',
      description: 'Desc',
    };
    
    export default Card;

With modern JavaScript, it is possible to destructure the `props` object and assign a default value to it all in the function argument.

    // Card.jsx
    function Card({title = ""Default title"", description= ""Desc""}) {
      return (
        <div>
          <h1>{title}</h1>
          <p>{description}</p>
        </div>
      )
    }
    
    export default Card;

This is more favorable as the code that can be read by modern browsers without the need for extra transformation.

Unfortunately, `defaultProps` do require some transformation to be read by the browser since JSX (JavaScript XML) isn’t supported out of the box. This could potentially affect the performance of an application that is using a lot of `defaultProps`.

**Article** on Oct 23, 2019

### [](#aa-demonstrating-reusable-react-components-in-a-form)[Demonstrating Reusable React Components in a Form](https://css-tricks.com/demonstrating-reusable-react-components-in-a-form/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&d=retro&r=pg)](https://css-tricks.com/author/kinglseysilas/)[Kingsley Silas](https://css-tricks.com/author/kinglseysilas/)

**Article** on Jun 7, 2017

### [](#aa-i-learned-how-to-be-productive-in-react-in-a-week-and-you-can-too)[I Learned How to be Productive in React in a Week and You Can, Too](https://css-tricks.com/productive-in-react/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://secure.gravatar.com/avatar/48cfd8342f9b9e5b7970f63afb0a8ee3?s=80&d=retro&r=pg)](https://css-tricks.com/author/sdrasner/)[Sarah Drasner](https://css-tricks.com/author/sdrasner/)

**Article** on Aug 31, 2018

### [](#aa-props-and-proptypes-in-react)[Props and PropTypes in React](https://css-tricks.com/props-and-proptypes-in-react/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&d=retro&r=pg)](https://css-tricks.com/author/kinglseysilas/)[Kingsley Silas](https://css-tricks.com/author/kinglseysilas/)

### [](#aa-dont-use-proptypes)Don’t use `propTypes`

TL;DR Use TypeScript.

In React, the `propTypes` property can be used to check if a component is being passed the correct data type for its props. They allow you to specify the type of data that should be used for each prop such as a string, number, object, etc. They also allow you to specify if a prop is required or not.

This way, if a component is passed the wrong data type or if a required prop is not being provided, then React will throw an error.

    // Card.jsx
    import { PropTypes } from ""prop-types"";
    
    function Card(props) {
      // ...
    }
    
    Card.propTypes = {
      title: PropTypes.string.isRequired,
      description: PropTypes.string,
    };
    
    export default Card;

[TypeScript](https://github.com/microsoft/TypeScript) provides a level of type safety in data that’s being passed to components. So, sure, `propTypes` were a good idea back when I was starting. However, now that TypeScript has become the go-to solution for type safety, I would highly recommend using it over anything else.

    // Card.tsx
    interface CardProps {
      title: string,
      description?: string,
    }
    
    export default function Card(props: CardProps) {
      // ...
    }

TypeScript is a programming language that builds on top of JavaScript by adding static type-checking. TypeScript provides a more powerful type system, that can catch more potential bugs and improves the development experience.

**Article** on Aug 31, 2018

### [](#aa-props-and-proptypes-in-react)[Props and PropTypes in React](https://css-tricks.com/props-and-proptypes-in-react/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&d=retro&r=pg)](https://css-tricks.com/author/kinglseysilas/)[Kingsley Silas](https://css-tricks.com/author/kinglseysilas/)

**Article** on Mar 27, 2018

### [](#aa-putting-things-in-context-with-react)[Putting Things in Context With React](https://css-tricks.com/putting-things-in-context-with-react/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://secure.gravatar.com/avatar/fc8aa639f5c8b5362773475c3734a4db?s=80&d=retro&r=pg)](https://css-tricks.com/author/nealfennimore/)[Neal Fennimore](https://css-tricks.com/author/nealfennimore/)

**Article** on Nov 16, 2018

### [](#aa-an-overview-of-render-props-in-react)[An Overview of Render Props in React](https://css-tricks.com/an-overview-of-render-props-in-react/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&d=retro&r=pg)](https://css-tricks.com/author/kinglseysilas/)[Kingsley Silas](https://css-tricks.com/author/kinglseysilas/)

### [](#aa-using-class-components)Using class components

TL;DR: Write components as functions

Class components in React are created using JavaScript classes. They have a more object-oriented structure and as well as a few additional features, like the ability to use the `this` keyword and lifecycle methods.

    // Card.jsx
    class Card extends React.Component {
      render() {
        return (
          <div>
            <h1>{this.props.title}</h1>
            <p>{this.props.description}</p>
          </div>
        )
      }
    }
    
    export default Card;

I prefer writing components with classes over functions, but JavaScript classes are more difficult for beginners to understand and `this` can get very confusing. Instead, I’d recommend writing components as functions:

    // Card.jsx
    function Card(props) {
      return (
        <div>
          <h1>{props.title}</h1>
          <p>{props.description}</p>
        </div>
      )
    }
    
    export default Card;

Function components are simply JavaScript functions that return JSX. They are much easier to read, and do not have additional features like the `this` keyword and [lifecycle methods](https://css-tricks.com/the-circle-of-a-react-lifecycle/) which make them more performant than class components.

Function components also have the advantage of using hooks. [React Hooks](https://css-tricks.com/intro-to-react-hooks/) allow you to use state and other React features without writing a class component, making your code more readable, maintainable and reusable.

**Article** on Jul 6, 2019

### [](#aa-getting-to-know-the-usereducer-react-hook)[Getting to Know the useReducer React Hook](https://css-tricks.com/getting-to-know-the-usereducer-react-hook/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&d=retro&r=pg)](https://css-tricks.com/author/kinglseysilas/)[Kingsley Silas](https://css-tricks.com/author/kinglseysilas/)

**Article** on May 1, 2020

### [](#aa-intro-to-react-hooks)[Intro to React Hooks](https://css-tricks.com/intro-to-react-hooks/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&d=retro&r=pg)](https://css-tricks.com/author/kinglseysilas/)[Kingsley Silas](https://css-tricks.com/author/kinglseysilas/)

**Article** on Jul 15, 2022

### [](#aa-react-hooks-the-deep-cuts)[React Hooks: The Deep Cuts](https://css-tricks.com/react-hooks-the-deep-cuts/)

[learning](https://css-tricks.com/tag/learning/) [react](https://css-tricks.com/tag/react/)

 [![](https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/blessing.webp?resize=80%2C80&ssl=1)](https://css-tricks.com/author/blessingeneanyebe/)[Blessing Ene Anyebe](https://css-tricks.com/author/blessingeneanyebe/)

### [](#aa-importing-react-unnecessarily)Importing React unnecessarily

TL;DR: There’s no need to do it, unless you need hooks.

Since React 17 was released in 2020, it’s now unnecessary to import React at the top of your file whenever you create a component.

    import React from 'react'; // Not needed!
    export default function Card() {}

But we had to do that before React 17 because the JSX transformer (the thing that converts JSX into regular JavaScript) used a method called [`React.createElement`](https://reactjs.org/docs/react-api.html#createelement) that would only work when importing React. Since then, a new transformer has been release which can transform JSX without the `createElement` method.

You will still need to import React to use hooks, [fragments](https://css-tricks.com/render-children-in-react-using-fragment-or-array-components/), and any other functions or components you might need from the library:

    import { useState } from 'react';
    
    export default function Card() {
      const [count, setCount] = useState(0);
      // ...
    }

### [](#aa-those-were-my-early-mistakes)Those were my early mistakes!

Maybe “mistake” is too harsh a word since some of the better practices came about later. Still, I see plenty of instances where the “old” way of doing something is still being actively used in projects and other tutorials.

To be honest, I probably made way more than five mistakes when getting started. Anytime you reach for a new tool it is going to be more like a learning journey to use it effectively, rather than flipping a switch. But these are the things I still carry with me years later!

If you’ve been using React for a while, what are some of the things you wish you knew before you started? It would be great to get a collection going to help others avoid the same struggles."
5,Creating a Clock with the New CSS sin() and cos() Trigonometry Functions,https://css-tricks.com/creating-a-clock-with-the-new-css-sin-and-cos-trigonometry-functions/,https://css-tricks.com/wp-content/uploads/2023/02/clock-sin-cos-trig.png,Mads Stoumann,1678244400000,,"[""cos()"",""math"",""sin()""]","CSS trigonometry functions are here! Well, they are if you’re using the latest versions of Firefox and Safari, that is. Having this sort of mathematical power in CSS opens up a whole bunch of possibilities. In this tutorial, I thought we’d dip our toes in the water to get a feel for a couple of the newer functions: [`sin()`](https://developer.mozilla.org/en-US/docs/Web/CSS/sin) and [`cos()`](https://developer.mozilla.org/en-US/docs/Web/CSS/cos).

There are other trigonometry functions in the pipeline — including [`tan()`](https://developer.mozilla.org/en-US/docs/Web/CSS/tan) — so why focus just on `sin()` and `cos()`? They happen to be perfect for the idea I have in mind, which is to place text along the edge of a circle. That’s been covered here on CSS-Tricks when [Chris shared an approach that uses a Sass mixin](https://css-tricks.com/set-text-on-a-circle/). That was six years ago, so let’s give it the bleeding edge treatment.

Here’s what I have in mind. Again, it’s only supported in Firefox and Safari at the moment:

CodePen Embed Fallback

So, it’s not exactly like words forming a circular shape, but we are placing text characters along the circle to form a clock face. Here’s some markup we can use to kick things off:

    <div class=""clock"">
      <div class=""clock-face"">
        <time datetime=""12:00"">12</time>
        <time datetime=""1:00"">1</time>
        <time datetime=""2:00"">2</time>
        <time datetime=""3:00"">3</time>
        <time datetime=""4:00"">4</time>
        <time datetime=""5:00"">5</time>
        <time datetime=""6:00"">6</time>
        <time datetime=""7:00"">7</time>
        <time datetime=""8:00"">8</time>
        <time datetime=""9:00"">9</time>
        <time datetime=""10:00"">10</time>
        <time datetime=""11:00"">11</time>
      </div>
    </div>

Next, here are some super basic styles for the `.clock-face` container. I decided to use the `<time>` tag with a `datetime` attribute. 

    .clock {
      --_ow: clamp(5rem, 60vw, 40rem);
      --_w: 88cqi;
      aspect-ratio: 1;
      background-color: tomato;
      border-radius: 50%;
      container-type: inline;
      display: grid;
      height: var(--_ow);
      place-content: center;
      position: relative;
      width var(--_ow);
    }

I decorated things a bit in there, but only to get the basic shape and background color to help us see what we’re doing. Notice how we save the `width` value in a [CSS variable](https://css-tricks.com/a-complete-guide-to-custom-properties/). We’ll use that later. Not much to look at so far:

![Large tomato colored circle with a vertical list of numbers 1-12 on the left.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/1_art_experiment.png?resize=315%2C373&ssl=1)

It looks like some sort of modern art experiment, right? Let’s introduce a new variable, `--_r`, to store the circle’s **radius**, which is equal to half of the circle’s width. This way, if the width (`--_w`) changes, the radius value (`--_r`) will also update — thanks to another CSS math function, `calc()`:

    .clock {
      --_w: 300px;
      --_r: calc(var(--_w) / 2);
      /* rest of styles */
    }

Now, a bit of math. A circle is 360 degrees. We have 12 labels on our clock, so want to place the numbers every 30 degrees (`360 / 12`). In math-land, a circle begins at 3 o’clock, so noon is actually **minus 90 degrees** from that, which is 270 degrees (`360 - 90`).

Let’s add another variable, `--_d`, that we can use to set a **degree** value for each number on the clock face. We’re going to increment the values by 30 degrees to complete our circle:

    .clock time:nth-child(1) { --_d: 270deg; }
    .clock time:nth-child(2) { --_d: 300deg; }
    .clock time:nth-child(3) { --_d: 330deg; }
    .clock time:nth-child(4) { --_d: 0deg; }
    .clock time:nth-child(5) { --_d: 30deg; }
    .clock time:nth-child(6) { --_d: 60deg; }
    .clock time:nth-child(7) { --_d: 90deg; }
    .clock time:nth-child(8) { --_d: 120deg; }
    .clock time:nth-child(9) { --_d: 150deg; }
    .clock time:nth-child(10) { --_d: 180deg; }
    .clock time:nth-child(11) { --_d: 210deg; }
    .clock time:nth-child(12) { --_d: 240deg; }

OK, now’s the time to get our hands dirty with the `sin()` and `cos()` functions! What we want to do is use them to get the X and Y coordinates for each number so we can place them properly around the clock face.

The formula for the X coordinate is `radius + (radius * cos(degree))`. Let’s plug that into our new `--_x` variable:

    --_x: calc(var(--_r) + (var(--_r) * cos(var(--_d))));

The formula for the Y coordinate is `radius + (radius * sin(degree))`. We have what we need to calculate that:

    --_y: calc(var(--_r) + (var(--_r) * sin(var(--_d))));

There are a few housekeeping things we need to do to set up the numbers, so let’s put some basic styling on them to make sure they are absolutely positioned and placed with our coordinates:

    .clock-face time {
      --_x: calc(var(--_r) + (var(--_r) * cos(var(--_d))));
      --_y: calc(var(--_r) + (var(--_r) * sin(var(--_d))));
      --_sz: 12cqi;
      display: grid;
      height: var(--_sz);
      left: var(--_x);
      place-content: center;
      position: absolute;
      top: var(--_y);
      width: var(--_sz);
    }

Notice `--_sz`, which we’ll use for the `width` and `height` of the numbers in a moment. Let’s see what we have so far.

![Large tomato colored circle with off-centered hour number labels along its edge.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/2_off_pos.png?resize=348%2C364&ssl=1)

This definitely looks more like a clock! See how the top-left corner of each number is positioned at the correct place around the circle? We need to “shrink” the radius when calculating the positions for each number. We can _deduct_ the size of a number (`--_sz`) from the size of the circle (`--_w`), before we calculate the radius:

    --_r: calc((var(--_w) - var(--_sz)) / 2);

![Large tomato colored circle with hour number labels along its rounded edge.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/3_correct_pos.png?resize=314%2C314&ssl=1)

Much better! Let’s change the colors, so it looks more elegant:

![A white clock face with numbers against a dark gray background. The clock has no arms.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/nY6Vbx2b.png?resize=717%2C689&ssl=1)

We could stop right here! We accomplished the goal of placing text around a circle, right? But what’s a clock without arms to show hours, minutes, and seconds?

Let’s use a single CSS animation for that. First, let’s add three more elements to our markup,

    <div class=""clock"">
      <!-- after <time>-tags -->
      <span class=""arm seconds""></span>
      <span class=""arm minutes""></span>
      <span class=""arm hours""></span>
      <span class=""arm center""></span>
    </div>

Then some common markup for all three arms. Again, most of this is just make sure the arms are absolutely positioned and placed accordingly:

    .arm {
      background-color: var(--_abg);
      border-radius: calc(var(--_aw) * 2);
      display: block;
      height: var(--_ah);
      left: calc((var(--_w) - var(--_aw)) / 2);
      position: absolute;
      top: calc((var(--_w) / 2) - var(--_ah));
      transform: rotate(0deg);
      transform-origin: bottom;
      width: var(--_aw);
    }

We’ll use the **same animation** for all three arms:

    @keyframes turn {
      to {
        transform: rotate(1turn);
      }
    }

The only difference is the time the individual arms take to make a full turn. For the **hours arm**, it takes **12 hours** to make a full turn. The [`animation-duration`](https://css-tricks.com/almanac/properties/a/animation/) property only accepts values in milliseconds and seconds. Let’s stick with seconds, which is 43,200 seconds (`60 seconds * 60 minutes * 12 hours`).

    animation: turn 43200s infinite;

It takes **1 hour** for the **minutes arm** to make a full turn. But we want this to be a [multi-step animation](https://css-tricks.com/using-multi-step-animations-transitions/) so the movement between the arms is staggered rather than linear. We’ll need 60 steps, one for each minute:

    animation: turn 3600s steps(60, end) infinite;

The **seconds arm** is _almost the same_ as the minutes arm, but the duration is 60 seconds instead of 60 minutes:

    animation: turn 60s steps(60, end) infinite;

Let’s update the properties we created in the common styles:

    .seconds {
      --_abg: hsl(0, 5%, 40%);
      --_ah: 145px;
      --_aw: 2px;
      animation: turn 60s steps(60, end) infinite;
    }
    .minutes {
      --_abg: #333;
      --_ah: 145px;
      --_aw: 6px;
      animation: turn 3600s steps(60, end) infinite;
    }
    .hours {
      --_abg: #333;
      --_ah: 110px;
      --_aw: 6px;
      animation: turn 43200s linear infinite;
    }

What if we want to start at the current time? We need a little bit of JavaScript:

    const time = new Date();
    const hour = -3600 * (time.getHours() % 12);
    const mins = -60 * time.getMinutes();
    app.style.setProperty('--_dm', `${mins}s`);
    app.style.setProperty('--_dh', `${(hour+mins)}s`);

I’ve added `id=""app""` to the clockface and set two new custom properties on it that set a negative `animation-delay`, as Mate Marschalko did [when he shared a CSS-only clock](https://css-tricks.com/of-course-we-can-make-a-css-only-clock-that-tells-the-current-time/). The `getHours()` method of JavaScipt’s `Date` object is using the 24-hour format, so we use the [`remainder` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder) to convert it into 12-hour format.

In the CSS, we need to add the `animation-delay` as well:

    .minutes {
      animation-delay: var(--_dm, 0s);
      /* other styles */
    }
    
    .hours {
      animation-delay: var(--_dh, 0s);
      /* other styles */
    }

**Just one more thing.** Using CSS `@supports` and the properties we’ve already created, we can provide a fallback to browsers that do not supprt `sin()` and `cos()`. (Thank you, Temani Afif!):

    @supports not (left: calc(1px * cos(45deg))) {
      time {
        left: 50% !important;
        top: 50% !important;
        transform: translate(-50%,-50%) rotate(var(--_d)) translate(var(--_r)) rotate(calc(-1*var(--_d)))
      }
    }

And, voilà! Our clock is done! Here’s the final demo one more time. Again, it’s only supported in Firefox and Safari at the moment.

CodePen Embed Fallback

### [](#aa-what-else-can-we-do)What else can we do?

Just messing around here, but we can quickly turn our clock into a circular image gallery by replacing the `<time>` tags with `<img>` then updating the width (`--_w`) and radius (`--_r`) values:

CodePen Embed Fallback

Let’s try one more. I mentioned earlier how the clock looked kind of like a modern art experiment. We can lean into that and re-create a pattern I saw on a poster (that I unfortunately didn’t buy) in an art gallery the other day. As I recall, it was called “Moon” and consisted of a bunch of dots forming a circle.

![A large circle formed out of a bunch of smaller filled circles of various earthtone colors.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_2756772B6AAC4896CD9BFF036E07360F7C8D595A4B775A1B72DBF756AC4018A4_1675325303440_image.png?resize=897%2C874&ssl=1)

We’ll use an unordered list this time since the circles don’t follow a particular order. We’re not even going to put all the list items in the markup. Instead, let’s inject them with JavaScript and add a few controls we can use to manipulate the final result.

The controls are range inputs (`<input type=""range"">)` which we’ll wrap in a `<form>` and listen for the `input` event.

    <form id=""controls"">
      <fieldset>
        <label>Number of rings
          <input type=""range"" min=""2"" max=""12"" value=""10"" id=""rings"" />
        </label>
        <label>Dots per ring
          <input type=""range"" min=""5"" max=""12"" value=""7"" id=""dots"" />
        </label>
        <label>Spread
          <input type=""range"" min=""10"" max=""40"" value=""40"" id=""spread"" />
        </label>
      </fieldset>
    </form>

We’ll run this method on “input”, which will create a bunch of `<li>` elements with the degree (`--_d`) variable we used earlier applied to each one. We can also repurpose our radius variable (`--_r`) .

I also want the dots to be different colors. So, let’s randomize (well, not _completely_ randomized) the HSL color value for each list item and store it as a new CSS variable, `--_bgc`:

    const update = () => {
      let s = """";
      for (let i = 1; i <= rings.valueAsNumber; i++) {
        const r = spread.valueAsNumber * i;
        const theta = coords(dots.valueAsNumber * i);
        for (let j = 0; j < theta.length; j++) {
          s += `<li style=""--_d:${theta[j]};--_r:${r}px;--_bgc:hsl(${random(
            50,
            25
          )},${random(90, 50)}%,${random(90, 60)}%)""></li>`;
        }
      }
      app.innerHTML = s;
    }

The `random()` method picks a value within a defined range of numbers:

    const random = (max, min = 0, f = true) => f ? Math.floor(Math.random() * (max - min) + min) : Math.random() * max;

And that’s it. We use JavaScript to render the markup, but as soon as it’s rendered, we don’t really need it. The `sin()` and `cos()` functions help us position all the dots in the right spots.

CodePen Embed Fallback

### [](#aa-final-thoughts)Final thoughts

Placing things around a circle is a pretty basic example to demonstrate the powers of trigonometry functions like `sin()` and `cos()`. But it’s _really_ cool that we are getting modern CSS features that provide new solutions for old workarounds I’m sure we’ll see way more interesting, complex, and creative use cases, especially as browser support comes to Chrome and Edge."
6,Managing Fonts in WordPress Block Themes,https://css-tricks.com/managing-fonts-in-wordpress-block-themes/,https://css-tricks.com/wp-content/uploads/2023/02/wordpress-fonts.png,Ganesh Dahal,1678071600000,,"[""fonts"",""google fonts"",""WordPress""]","Fonts are a defining characteristic of the design of any site. That includes WordPress themes, where it’s common for theme developers to integrate a service like [Google Fonts](https://fonts.google.com) into the WordPress Customizer settings for a “classic” PHP-based theme. That hasn’t quite been the case for WordPress block themes. While integrating Google Fonts into classic themes is well-documented, there’s nothing currently available for block themes in the [WordPress Theme Handbook](https://developer.wordpress.org/themes/).

That’s what we’re going to look at in this article. Block themes can indeed use Google Fonts, but the process for registering them is way different than what you might have done before in classic themes.

### [](#aa-what-we-already-know)What we already know

As I said, there’s little for us to go on as far as getting started. The Twenty Twenty-Two theme is the first block-based default WordPress theme, and it demonstrates how we can use downloaded font files as assets in the theme. But it’s pretty unwieldy because it involves a couple of steps: (1) [register the files in the `functions.php` file](https://github.com/WordPress/twentytwentytwo/blob/trunk/functions.php#L90-L148) and (2) define the bundled fonts [in the `theme.json` file](https://github.com/WordPress/twentytwentytwo/blob/trunk/theme.json#L172-L183).

Since Twenty Twenty-Two was released, though, the process has gotten simpler. Bundled fonts can now be defined without registering them, as shown in the [Twenty Twenty-Three theme](https://github.com/WordPress/twentytwentythree/blob/trunk/theme.json#L111-L150). However, the process still requires us to manually download font files and bundle them into the themes. That’s a hindrance that sort of defeats the purpose of simple, drop-in, hosted fonts that are served on a speedy CDN.

### [](#aa-whats-new)What’s new

If you didn’t already know, the [Gutenberg project](https://wordpress.org/plugins/gutenberg/) is an experimental plugin where features being developed for the WordPress Block and Site Editor are available for early use and testing. In a recent [Theme Shaper article](https://themeshaper.com/2022/11/28/how-to-add-typographic-fonts-to-wordpress-block-themes/), Gutenberg project lead architect [Matias Ventura](https://matiasventura.com/) discusses how Google Fonts — or any other downloaded fonts, for that matter — can be added to block themes using the [Create Block Theme](https://wordpress.org/plugins/create-block-theme/) plugin.

This short [video at Learn WordPress](https://learn.wordpress.org/tutorial/manage-your-block-theme-fonts-with-create-block-theme/) provides a good overview of the Create Block Theme plugin and how it works. But the bottom line is that it does what it says on the tin: it creates block themes. But it does it by providing controls in the WordPress UI that allow you to create an entire theme, child theme, or a theme style variation without writing any code or ever having to touch template files.

I’ve given it a try! And since Create Block Theme is [authored and maintained by the WordPress.org](https://wordpress.org/plugins/create-block-theme/) team, I’d say it’s the best direction we have for integrating Google Fonts into a theme. That said, it’s definitely worth noting that the plugin is in active development. That means things could change pretty quickly.

Before I get to how it all works, let’s first briefly refresh ourselves with the “traditional” process for adding Google Fonts to classic WordPress themes.

### [](#aa-how-it-used-to-be-done)How it used to be done

[This ThemeShaper article from 2014](https://themeshaper.com/2014/08/13/how-to-add-google-fonts-to-wordpress-themes/) provides an excellent example of how we used to do this in classic PHP themes, as is [this newer Cloudways article by Ibad Ur Rehman](https://www.cloudways.com/blog/google-fonts-wordpress/?utm_medium=content_acq&utm_source=css-tricks&utm_campaign=global_cloudways_post_en&utm_content=awareness_wordpress-fonts).

To refresh our memory, here is an example from the default [Twenty Seventeen theme](https://github.com/WordPress/twentyseventeen/blob/master/functions.php#L127-L174) showing how Google fonts are enqueued in the `functions.php` file.

    function twentyseventeen_fonts_url() {
      $fonts_url = '';
      /**
       * Translators: If there are characters in your language that are not
       * supported by Libre Franklin, translate this to 'off'. Do not translate
       * into your own language.
       */
      $libre_franklin = _x( 'on', 'libre_franklin font: on or off', 'twentyseventeen' );
      if ( 'off' !== $libre_franklin ) {
        $font_families = array();
        $font_families[] = 'Libre Franklin:300,300i,400,400i,600,600i,800,800i';
        $query_args = array(
          'family' => urlencode( implode( '|', $font_families ) ),
          'subset' => urlencode( 'latin,latin-ext' ),
        );
        $fonts_url = add_query_arg( $query_args, 'https://fonts.googleapis.com/css' );
      }
      return esc_url_raw( $fonts_url );
    }

Then Google Fonts is pre-connected to the theme like this:

    function twentyseventeen_resource_hints( $urls, $relation_type ) {
      if ( wp_style_is( 'twentyseventeen-fonts', 'queue' ) && 'preconnect' === $relation_type ) {
        $urls[] = array(
          'href' => 'https://fonts.gstatic.com',
          'crossorigin',
        );
      }
      return $urls;
    }
    add_filter( 'wp_resource_hints', 'twentyseventeen_resource_hints', 10, 2 );

### [](#aa-whats-wrong-with-the-traditional-way)What’s wrong with the traditional way

Great, right? There’s a hitch, however. In January 2022, a [German regional court imposed a fine](https://rewis.io/urteile/urteil/lhm-20-01-2022-3-o-1749320/) on a website owner for violating Europe’s [GDPR requirements](https://www.gdpreu.org). The issue? Enqueuing Google Fonts on the site exposed a visitor’s IP address, jeopardizing user privacy. [CSS-Tricks covered this a while back.](https://css-tricks.com/bunny-fonts/)

The [Create Block Theme](https://wordpress.org/plugins/create-block-theme/) plugin satisfies GDPR privacy requirements, as it leverages the Google Fonts API to serve solely as a proxy for the local vendor. The fonts are served to the user on the same website rather than on Google’s servers, protecting privacy. [WP Tavern](https://wptavern.com/german-court-fines-website-owner-for-violating-the-gdpr-by-using-google-hosted-fonts) discusses the German court ruling and includes links to guides for self-hosting Google Fonts.

### [](#aa-how-to-use-google-fonts-with-block-themes)How to use Google Fonts with block themes

This brings us to today’s “modern” way of using Google Fonts with WordPress block themes. First, let’s set up a local test site. I use Flywheel’s [Local](https://localwp.com/) app for local development. You can use that or whatever you prefer, then use the [Theme Test Data plugin](https://github.com/WPTT/theme-test-data) by the WordPress Themes Team to work with dummy content. And, of course, you’ll want the [Create Block Theme](https://wordpress.org/plugins/create-block-theme/) plugin in there as well.

Have you installed and activated those plugins? If so, navigate to **Appearance** → **Manage theme fonts** from the WordPress admin menu.

![Manage Theme Fonts screen with type samples for Space Mono.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_CCF1BA23A68924924E32749C4E8AADBAA675591E1F3A6BB9A642F97CA9EA7227_1675701055783_screenshot-2.jpg?resize=2560%2C1400&ssl=1)

Source: [WordPress Theme Directory](https://wordpress.org/plugins/create-block-theme/#developers)

The “Manage theme fonts” screen displays a list of any fonts already defined in the theme’s `theme.json` file. There are also two options at the top of the screen:

*   **Add Google fonts.** This option adds Google Fonts directly to the theme from the Google fonts API.
*   **Add local fonts.** This option adds downloaded font files to the theme.

I’m using a completely blank theme by WordPress called [Emptytheme](https://github.com/WordPress/theme-experiments/tree/master/emptytheme). You’re welcome to roll along with your own theme, but I wanted to call out that I’ve renamed Emptytheme to “EMPTY-BLANK” and modified it, so there are no predefined fonts and styles at all.

![Themes screen showing Empty Theme as the active selection with no screenshot preview.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/appearance-fonts.png?resize=947%2C372&ssl=1)

I thought I’d share a screenshot of my theme’s file structure and `theme.json` file to show that there are literally no styles or configurations going on.

![VS Code file explorer on the left and an open theme.json file on the right.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/fonts-4-1.jpg?resize=1117%2C577&ssl=1)

File structure of Emptytheme (left) and `theme.json` file (right)

Let’s click the “Add Google Fonts” button. It takes us to a new page with options to choose any available font from the current [Google](https://developers.google.com/fonts/docs/developer_api) [F](https://developers.google.com/fonts/docs/developer_api)[onts API](https://developers.google.com/fonts/docs/developer_api).

![Add Google Fonts to your theme screen with the select font menu open showing a list of available fonts.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/fonts-2.jpg?resize=1000%2C563&ssl=1)

For this demo, I selected **Inter** from the menu of options and selected the 300, Regular, and 900 weights from the preview screen:

![Add Google Fonts to your theme screen with Inter selected and type samples below it of the various weight variations.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/fonts-6.jpg?resize=1000%2C563&ssl=1)

Once I’ve saved my selections, the Inter font styles I selected are automatically downloaded and stored in the theme’s `assets/fonts` folder:

![VS Code file explorer on the left showing Inter font files; theme.json on the right showing Inter references.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/fonts-5-1.jpg?resize=1206%2C591&ssl=1)

Notice, too, how those selections have been automatically written to the `theme.json` file in that screenshot. The Create Block Theme plugin even adds the path to the font files.

View the entire `theme.json` code

    {
      ""version"": 2,
      ""settings"": {
        ""appearanceTools"": true,
        ""layout"": {
          ""contentSize"": ""840px"",
          ""wideSize"": ""1100px""
        },
        ""typography"": {
          ""fontFamilies"": [
            {
              ""fontFamily"": ""Inter"",
              ""slug"": ""inter"",
              ""fontFace"": [
                {
                  ""fontFamily"": ""Inter"",
                  ""fontStyle"": ""normal"",
                  ""fontWeight"": ""300"",
                  ""src"": [
                    ""file:./assets/fonts/inter_300.ttf""
                  ]
                },
                {
                  ""fontFamily"": ""Inter"",
                  ""fontStyle"": ""normal"",
                  ""fontWeight"": ""900"",
                  ""src"": [
                    ""file:./assets/fonts/inter_900.ttf""
                  ]
                },
                {
                  ""fontFamily"": ""Inter"",
                  ""fontStyle"": ""normal"",
                  ""fontWeight"": ""400"",
                  ""src"": [
                    ""file:./assets/fonts/inter_regular.ttf""
                  ]
                }
              ]
            }
          ]
        }
      }
    }

If we go to the Create Block Theme’s main screen and click the **Manage theme fonts** button again, we will see Inter’s 300, 400 (Regular), and 900 weight variants displayed in the preview panel.

![Manage Theme Fonts screen with a button to Add Google Font highlighted in red.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/fonts-3.png?resize=886%2C588&ssl=1)

A [demo text preview box](https://github.com/WordPress/create-block-theme/pull/202) at the top even allows you to preview the selected fonts within the sentence, header, and paragraph with the font size selection slider. You can check out this new feature in action in [this GitHub video](https://user-images.githubusercontent.com/1310626/216234715-68ce33f0-3e70-4a90-8277-a904b4126aae.mp4).

The selected font(s) are also available in the Site Editor **Global Styles** (**Appearance** → **Editor**), specifically in the Design panel.

![Wordpress Site Editor screen with navigation panel open and highlighting the Edit button.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/design-preview-panel-1.jpg?resize=825%2C321&ssl=1)

From here, navigate to **Templates** → **Index** and click the blue **Edit** button to edit the `index.html` template. We want to open the **Global Styles** settings, which are represented as a contrast icon located at the top-right of the screen. When we click the **Text** settings and open the **Font** menu in the **Typography** section… we see Inter!

![Open template file in the Site Editor with an arrow pointing out the Global Styles settings button.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/Slide4.jpg?resize=1280%2C720&ssl=1)

### [](#aa-same-thing-but-with-local-fonts)Same thing, but with local fonts

We may as well look at adding local fonts to a theme since the Create Block Theme plugin provides that option. The benefit is that you can use any font file you want from whatever font service you prefer.

Without the plugin, we’d have to grab our font files, drop them somewhere in the theme folder, then resort to the traditional PHP route of enqueuing them in the `functions.php` file. But we can let WordPress carry that burden for us by uploading the font file on the **Add local fonts** screen using the Create Block Theme interface. Once a file is selected to upload, font face definitions boxes are filled automatically.

![Add local fonts to your theme screen with options to upload a font file and set its name, style, and weight.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/fonts-1.jpg?resize=1000%2C501&ssl=1)

Even though we can use any `.ttf`, `.woff`, or `.woff2` file, I simply downloaded [Open Sans font files from Google Fonts](https://fonts.google.com/specimen/Open+Sans?query=open+sans) for this exercise. I snatched two weight variations, regular and 800.

The same auto-magical file management and `theme.json` update we saw with the Google Fonts option happens once again when we upload the font files (which are done one at a time). Check out where the fonts landed in my theme folder and how they are added to `theme.json`:

![VS Code showing the font files and the theme.json file references to the font.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/json-add-local-fonts.png?resize=843%2C700&ssl=1)

### [](#aa-removing-fonts)Removing fonts

The plugin also allows us to remove font files from a block theme from the WordPress admin. Let’s delete one of the Open Sans variants we installed in the last section to see how that works.

![The interface for removing a font from the theme.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/remove-ui.jpg?resize=1000%2C563&ssl=1)

Clicking the **Remove** links triggers a warning for you to confirm the deletion. We’ll click **OK** to continue.

![Modal confirming the font deletion.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/remove-conform.png?resize=1000%2C233&ssl=1)

Let’s open our theme folder and check the `theme.json` file. Sure enough, the Open Sans 800 file we deleted on the plugin screen removed the font file from the theme folder, and the reference to it is long gone in `theme.json`.

![Updated theme.json file showing the font references have been removed.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/remove-json.jpg?resize=1280%2C720&ssl=1)

### [](#aa-theres-ongoing-work-happening)There’s ongoing work happening

[There’s talk going on adding this “Font Manager” feature to WordPress Core](https://github.com/WordPress/gutenberg/pull/46332#issue-1479275259) rather than needing a separate plugin.

An initial iteration of the feature [is available in the repo](https://github.com/WordPress/gutenberg/pull/46332#issuecomment-1366864436), and it uses the exact same approach we used in this article. It should be [GDPR-compliant](https://github.com/WordPress/gutenberg/pull/46332#issuecomment-1340970863), too. The feature is [scheduled to land with WordPress 6.3](https://make.wordpress.org/core/2023/02/04/phase-2-finale/) release later this year.

### [](#aa-wrapping-up)Wrapping up

The Create Block Theme plugin significantly enhances the user experience when it comes to handling fonts in WordPress block themes. The plugin allows us to add or delete any fonts while respecting GDPR requirements.

We saw how selecting a Google Font or uploading a local font file automatically places the font in the theme folder and registers it in the `theme.json` file. We also saw how the font is an available option in the Global Styles settings in the Site Editor. And if we need to remove a font? The plugin totally takes care of that as well — without touching theme files or code.

Thanks for reading! If you have any comments or suggestions, share them in the comments. I’d love to know what you think of this possible direction for font management in WordPress.

### [](#aa-additional-resources)Additional resources

I relied on a lot of research to write this article and thought I’d share the articles and resources I used to provide you with additional context.

#### [](#aa-wordpress-font-management)WordPress font management

*   [How to add typographic fonts to WordPress block themes](https://themeshaper.com/2022/11/28/how-to-add-typographic-fonts-to-wordpress-block-themes/) (Theme Shaper)
*   [How to add Google fonts to WordPress themes](https://themeshaper.com/2014/08/13/how-to-add-google-fonts-to-wordpress-themes/) (Theme Shaper)
*   [How to Use Google Fonts With WordPress?](https://www.cloudways.com/blog/google-fonts-wordpress/?utm_medium=content_acq&utm_source=css-tricks&utm_campaign=global_cloudways_post_en&utm_content=awareness_wordpress-fonts) (Cloudways)
*   [Manage your block theme fonts with Create Block Theme](https://learn.wordpress.org/tutorial/manage-your-block-theme-fonts-with-create-block-theme/) (Learn WordPress)
*   [Using Create Block Theme](https://wordpress.tv/2022/08/17/using-create-block-theme/) (WordPress.tv)

#### [](#aa-github-issues)GitHub issues

*   [Global Styles/Typography: Managing font sets](https://github.com/WordPress/gutenberg/issues/45271) (#45271)
*   [Font manager](https://github.com/WordPress/gutenberg/pull/46332) (#46332)

#### [](#aa-european-gdpr-requirements)European GDPR requirements

*   [German Court Fines Website Owner for Violating the GDPR by Using Google-Hosted Fonts](https://wptavern.com/german-court-fines-website-owner-for-violating-the-gdpr-by-using-google-hosted-fonts) (WPTavern)
*   [Complying with GDPR when using Google Fonts](https://make.wordpress.org/themes/2022/06/18/complying-with-gdpr-when-using-google-fonts/) (Make WordPress Themes)
*   [German court awards user €100 in damages against website operator for using Google Fonts](https://blog.eprivacy.eu/?p=1398) (ePrivacy Blog)
*   [Bunny Fonts](https://css-tricks.com/bunny-fonts/) (CSS-Tricks)"
7,Everything You Need to Know About the Gap After the List Marker,https://css-tricks.com/everything-you-need-to-know-about-the-gap-after-the-list-marker/,https://css-tricks.com/wp-content/uploads/2023/01/list-marker-gap.png,Šime Vidas,1677726000000,,"[""list-style"",""lists"",""marker""]","I was reading [“Creative List Styling”](https://web.dev/creative-list-styling/) on Google’s web.dev blog and noticed something odd in one of the code examples in the `::marker` section of the article. The built-in list markers are bullets, ordinal numbers, and letters. The `::marker` pseudo-element allows us to style these markers or replace them with a custom character or image.

    ::marker {
      content: url('/marker.svg') ' ';
    }

The example that caught my attention uses an SVG icon as a custom marker for the list items. But there’s also a single space character (`"" ""`) in the CSS value next to the `url()` function. The purpose of this space seems to be to insert a gap after the custom marker.

![](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/svg-marker-and-space.png?resize=1373%2C843&ssl=1)

When I saw this code, I immediately wondered if there was a better way to create the gap. Appending a space to `content` feels more like a workaround than the optimal solution. CSS provides `margin` and `padding` and other standard ways to space out elements on the page. Could none of these properties be used in this situation?

First, I tried to substitute the space character with a proper margin:

    ::marker {
      content: url('/marker.svg');
      margin-right: 1ch;
    }

This didn’t work. As it turns out, `::marker` only supports a [small set of mostly text-related CSS properties](https://drafts.csswg.org/css-lists-3/#marker-properties). For example, you can change the `font-size` and `color` of the marker, and define a custom marker by setting `content` to a string or URL, as shown above. But the `margin` and `padding` properties are [not supported](https://github.com/w3c/csswg-drafts/issues/4571), so setting them has no effect. **What a disappointment.**

Could it really be that a space character is the only way to insert a gap after a custom marker? I needed to find out. As I researched this topic, I made a few interesting discoveries that I’d like to share in this article.

### [](#aa-adding-padding-and-margins)Adding padding and margins

First, let’s confirm what `margin` and `padding` do on the `<ul>` and `<li>` elements. I’ve created a test page for this purpose. Drag the relevant sliders and observe the effect on the spacing on each side of the list marker. Tip: Use the Reset button liberally to reset all controls to their initial values.

CodePen Embed Fallback

**Note:** Browsers apply a default `padding-inline-left` of `40px` to `<ol>` and `<ul>` elements. The logical `padding-inline-left` property is equivalent to the physical `padding-left` property in writing systems with a left-to-right inline direction. In this article, I’m going to use physical properties for the sake of simplicity.

As you can see, `padding-left` on `<li>` increases the gap after the list marker. The other three properties control the spacing to the left of the marker, in other words, the indentation of the list item.

Notice that even when the list item’s `padding-left` is `0px`, there is still a minimum gap after the marker. This gap cannot be decreased with `margin` or `padding`. The exact length of the minimum gap depends on the browser.

![First three properties: UL margin-left, UL padding-left, LI margin-left. Fourth property: LI padding-left.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/margin-padding-position-outside.png?resize=1417%2C890&ssl=1)

The first three properties push the entire list item (including the marker) to the right. The fourth property pushes only the list item’s content to the right.

To sum up, the list item’s content is positioned at a browser-specific minimum distance from the marker, and this gap can be further increased by adding a `padding-left` to `<li>`.

Next, let’s see what happens when we position the marker _inside_ the list item.

### [](#aa-moving-the-marker-inside-the-list-item)Moving the marker inside the list item

The `list-style-position` property accepts two keywords: `outside`, which is the default, and `inside`, which moves the marker inside the list item. The latter is useful for creating designs with full-width list items.

![A grocery list. Each item has a thin bottom border that extends from the left to the right edge of the list.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/list-marker-position-inside.png?resize=1608%2C918&ssl=1)

The list marker is positioned inside the list item, so that the list item’s bottom border can extend to the left edge of the list box

If the marker is now _inside_ the list item, does this mean that `padding-left` on `<li>` no longer increases the gap after the marker? Let’s find out. On my test page, turn on `list-style-position: inside` via the checkbox. How are the four `padding` and `margin` properties affected by this change?

As you can see, `padding-left` on `<li>` now increases the spacing to the _left_ of the marker. This means that we’ve lost the ability to increase the gap after the marker. In this situation, it would be useful to be able to add `margin-right` to the `::marker` itself, but that doesn’t work, as we’ve established above.

![The four properties: UL margin-left, UL padding-left, LI margin-left, LI padding-left.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/margin-padding-position-inside.png?resize=1417%2C889&ssl=1)

All four properties push the entire list item to the right. The minimum gap cannot be increased by standard means.

Additionally, there’s a [bug in Chromium](https://bugs.chromium.org/p/chromium/issues/detail?id=725972) that causes the gap after the marker to _triple_ after switching to `inside` positioning. By default, the length of the gap is about one-third of the text size. So at a default `font-size` of `16px`, the gap is about `5.5px`. After switching to `inside`, the gap grows to the full `16px` in Chrome. This bug affects the `disc`, `circle`, and `square` markers, but [not ordinal number markers](https://twitter.com/g16n/status/1616807361061978118).

The following image shows the default rendering of outside and inside-positioned list markers across three major browsers on macOS. For your convenience, I’ve horizontally aligned all list items on their markers to make it easier to compare the differences in gap sizes.

![Six list items with varying gaps between the marker and text.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/outside-inside-gap-difference.png?resize=555%2C385&ssl=1)

Only Firefox maintains the same gap size between the two marker positioning modes. This can be considered a browser interoperability ([interop](https://web.dev/interop-2022/#what-is-interop-2022)) issue.

To sum up, switching to `list-style-position: inside` introduces two problems. We can no longer increase the gap via `padding-left` on `<li>`, and the gap size is inconsistent between browsers.

Finally, let’s see what happens when we replace the default list marker with a custom marker.

### [](#aa-switching-to-a-custom-marker)Switching to a custom marker

There are two ways to define a [custom marker](https://css-tricks.com/css-counters-custom-list-number-styling/):

*   `list-style-type` and `list-style-image` properties
*   `content` property on the `::marker` pseudo-element

The `content` property is more powerful. For example, it allows us to use the `counter()` function to access the list item’s ordinal number (the [implicit `list-item` counter](https://drafts.csswg.org/css-lists-3/#list-item-counter)) and decorate it with custom strings.

CodePen Embed Fallback

Unfortunately, Safari doesn’t support the `content` property on `::marker` yet ([WebKit bug](https://bugs.webkit.org/show_bug.cgi?id=204163)). For this reason, I’m going to use the `list-style-type` property to define the custom marker. You can still use the `::marker` selector to style the custom marker declared via `list-style-type`. That aspect of `::marker` is supported in Safari.

CodePen Embed Fallback

Any Unicode character can potentially serve as a custom list marker, but only a small set of characters actually have “Bullet” in their official name, so I thought I’d compile them here for reference.

Character

Name

Code point

CSS keyword

•

Bullet

`U+2022`

`disc`

‣

Triangular Bullet

`U+2023`

⁃

Hyphen Bullet

`U+2043`

⁌

Black Leftwards Bullet

`U+204C`

⁍

Black Rightwards Bullet

`U+204D`

◘

Inverse Bullet

`U+25D8`

◦

White Bullet

`U+25E6`

`circle`

☙

Reversed Rotated Floral Heart Bullet

`U+2619`

❥

Rotated Heavy Black Heart Bullet

`U+2765`

❧

Rotated Floral Heart Bullet

`U+2767`

⦾

Circled White Bullet

`U+29BE`

⦿

Circled Bullet

`U+29BF`

**Note:** The CSS `square` keyword does not have a corresponding “Bullet” character in Unicode. The character that comes closest is the Black Small Square (▪️) emoji (`U+25AA`).

Now let’s see what happens when we replace the default list marker with `list-style-type: ""•""` (`U+2022` Bullet). This is the same character as the default bullet, so there shouldn’t be any major rendering differences. On my test page, turn on the `list-style-type` option and observe any changes to the marker.

As you can see, there are two significant changes:

1.  There is no longer a minimum gap after the marker.
2.  The bullet has become smaller, as if it were rendered at a smaller `font-size`.

According to [CSS Counter Styles Level 3](https://drafts.csswg.org/css-counter-styles-3/#simple-symbolic), the default list marker (`disc`) should be “similar to • `U+2022` BULLET”. It seems that browsers increase the size of the default bullet to make it more legible. Firefox even uses a special font, `-moz-bullet-font`, for the marker.

![:marker selected in the inspector. Fonts used: -moz-bullet-font.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/firefox-moz-bullet-font.png?resize=1024%2C612&ssl=1)

The “Fonts” pane in Firefox’s DOM inspector reveals the special font.

Can the small size problem be fixed with CSS? On my test page, turn on marker styling and observe what happens when you change the `font-size`, `line-height`, and `font-family` of the marker.

As you can see, increasing the `font-size` causes the custom marker to become vertically misaligned, and this cannot be corrected by decreasing the `line-height`. The `vertical-align` property, which could easily fix this problem, is not supported on `::marker`.

But did you notice that changing the `font-family` can cause the marker to become bigger? Try setting it to `Tahoma`. This could potentially be a good-enough workaround for the small-size problem, although I haven’t tested which font works best across the major browsers and operating systems.

You may also have noticed that the Chromium bug doesn’t occur anymore when you position the marker inside the list item. This means that a custom marker can serve as a workaround for this bug. And this leads me to the main problem, and the reason why I started researching this topic. **If you define a custom marker and position it inside the list item, there is no gap after the marker and no way to insert a gap by standard means.**

1.  There is no minimum gap after custom markers.
2.  `::marker` doesn’t support `padding` or `margin`.
3.  `padding-left` on `<li>` doesn’t increase the gap, since the marker is positioned `inside`.

### [](#aa-summary)Summary

Here’s a summary of all the key facts that I’ve mentioned in the article:

1.  Browsers apply a default `padding-inline-start` of `40px` to `<ul>` and `<ol>` elements.
2.  There is a minimum gap after built-in list markers (`disc`, `decimal`, etc.). There is no minimum gap after custom markers (string or URL).
3.  The length of the gap can be increased by adding a `padding-left` to `<ul>`, but only if the marker is positioned outside the list item (the default mode).
4.  Custom string markers have a smaller default size than built-in markers. Changing the `font-family` on `::marker` can increase their size.

### [](#aa-conclusion)Conclusion

Looking back at the code example from the beginning of the article, I think I understand now why there’s a space character in the `content` value. There is just no better way to insert a gap after the SVG marker. It’s a workaround that is needed because no amount of `margin` and `padding` can create a gap after a custom marker that is positioned inside the list item. A `margin-right` on `::marker` could easily do it, but that is not supported.

Until `::marker` adds support for more properties, web developers will often have no choice but to hide the marker and emulate it with a `::before` pseudo-element. I had to do that myself recently because I couldn’t change the marker’s `background-color`. Hopefully, we won’t have to wait too long for a more powerful `::marker` pseudo-element.

CodePen Embed Fallback"
8,How the Style Engine Generates Classes,https://css-tricks.com/how-the-style-engine-generates-classes/,https://css-tricks.com/wp-content/uploads/2023/02/guide-wordpress-block-theme-css.jpg,Ganesh Dahal,1677466800000,1677628800000,"[""WordPress"",""WordPress blocks"",""wordpress themes""]","In the last article in this series, we went through `theme.json` presets and style section configurations. Then we discussed how the [WordPress Style Engine](https://developer.wordpress.org/block-editor/reference-guides/packages/packages-style-engine/) processes the JSON into CSS and consolidates it with consolidated data received from different sources — WordPress Core styles, theme styles, and user styles — to create a global stylesheet. We also learned how to apply the generated CSS to individual elements, like headings, and specific blocks, like the Query Loop.

#### [](#aa-wordpress-block-theme-css-and-style-settings-guide)WordPress Block Theme CSS and Style Settings Guide

*   [Introduction](https://css-tricks.com/wordpress-block-theme-guide/)
*   [Glossary of Terms for `theme.json`](https://css-tricks.com/glossary-of-terms-for-theme-json/)
*   [Defining Global Settings](https://css-tricks.com/defining-global-settings/)
*   [Defining Global Styles](https://css-tricks.com/defining-global-styles-in-wordpress/)
*   [How the Styles Engine Generates Classes](https://css-tricks.com/how-the-style-engine-generates-classes/) _(you are here!)_
*   [Global Styles Reference Tables](https://css-tricks.com/wordpress-global-styles-reference-tables/)

The Style Engine is responsible for structuring and organizing your CSS into a single global stylesheet, and understanding how it parses your `theme.json` file and styles coming from other sources is rather important. Otherwise, you might find yourself in a situation where you’re unsure why one of your styles isn’t working. This way, you’ll have an idea of where to dig in and troubleshoot without being in the dark.

I discuss the WordPress Style Engine [in another article](https://css-tricks.com/managing-css-styles-in-a-wordpress-block-theme/#aa-the-style-engine). That’s a great place to start if you’re looking for a little more context without all the nitty gritty details we’re covering here.

### [](#aa-table-of-contents)Table of contents

*   [Where styles come from](#where-styles-come-from)
*   [Combining sources](#combining-sources)
*   [Processing theme.json](#processing-themejson)
*   [Generated CSS classes](#generated-css-classes)
*   [Additional sources of user styles](#additional-sources-of-user-styles)
*   [Block stylesheets](#block-stylesheets)
*   [All of this is in active development!](#all-of-this-is-in-active-development)
*   [Additional resources](#additional-resources)
*   [Next up…](#next-up)

* * *

### [](#aa-where-styles-come-from)Where styles come from

The Style Engine has to get its information from somewhere, right? The truth is that there are several places where the Style Engine looks for information before it generates CSS.

*   **WordPress Core:** That’s right, WordPress ships with pre-defined styles right out of the box. Think of these as default styles authored at the CMS level, sort of like the default styles in browsers. They are there by default, but we can override them in our `theme.json` file.
*   **The `theme.json` file:** We’ve covered this file thoroughly throughout the series. It’s where we enable certain styling features and define default styles, such as colors, fonts, and spacing. You can think of it like the `style.css` file in a “classic” WordPress theme: the styles we author at the theme level.
*   **User styles:** WordPress has a number of features that allow you to set styles directly in WordPress without touching code. The “big” one of which is the Global Styles panel in the Site Editor. It uses the styles from WordPress Core and `theme.json` as default settings, but changing the style settings overrides the other two sources.

Can you sort of see how this forms a hierarchy? WordPress Core styles can be overridden by `theme.json`, and both `theme.json` and WordPress Core styles can be overridden by user styles. It’s structured a lot like the CSS Cascade, in a way!

### [](#aa-combining-sources)Combining sources

Just so we have a good picture of what we’re working with, here’s a screenshot of the WordPress Site Editor with the Global Styles settings on display.

![WordPress Site Editor screen with the Global Styles settings open and highlighted with a red border.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_DA5DFD9E7B753C4269ECC69DED048EDFAC629A24CD83E262D9243B4F6F08D66A_1675269657775_Screenshot2023-02-01at9.40.46AM.png?resize=2442%2C1800&ssl=1)

This is the interface where **user styles** come from. Notice how there is a tile at the top of the panel that provides a preview of the theme’s current typography and colors. That tile is called a _style variation_, which is basically preset style configurations that are defined in JSON in the theme folder. A theme can have any number of pre-defined style variations, and choosing one instantly swaps the theme’s fonts and colors with the selected tile.

So, already, you can see how the user styles are informed by `theme.json`. But notice the three categories of style settings below the style variations: **Typography**, **Colors**, and **Layout**. Clicking into any of those settings allows you, as the user, to override the configuration of the currently selected style variation.

![WordPress Site Editor screen with the Global Styles settings open to color options.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_DA5DFD9E7B753C4269ECC69DED048EDFAC629A24CD83E262D9243B4F6F08D66A_1675270249702_Screenshot2023-02-01at9.49.39AM.png?resize=2442%2C1800&ssl=1)

Now you see how `theme.json` and WordPress Core styles are overridden by user styles. We can lean on WordPress Core styles for basic layout and styling, customize them and define our own styles in `theme.json`, then let the user take greater control of things with user styles from the Site Editor’s Global Styles settings.

All of this styling data is stored and parsed as JSON. The Style Engine generates that JSON and then [consolidates it into a single global stylesheet](https://developer.wordpress.org/block-editor/explanations/architecture/styles/#consolidate-data) for the theme.

### [](#aa-processing-theme-json)Processing `theme.json`

During the consolidation phase, the Style Engine takes a look at the `theme.json` file located in the theme directory. We talked earlier about the structure of `theme.json` and how it is organized into two “top-level” sections, `settings`, and `styles`.

    {
      ""version"": 2,
      // Top-level settings
      ""settings"": {},
      ""styles"": {
        // Global element styles
        ""elements"": {},
        // Block styles
        ""blocks"": {}
      }
    }

The Style Engine processes those sections like this. First, the top-level `settings` generate [CSS variables](https://css-tricks.com/a-complete-guide-to-custom-properties/) that are applied to the `<body>` element (e.g. `--wp--preset--<category>-<slug>`):

    {
      ""version"": 2,
      ""settings"": {
        // Top-level settings
        ""color"": {
          ""palette"": [
            {
              ""color"": ""#F8A100"",
              ""name"": ""Primary"",
              ""slug"": ""primary""
            }
          ]
        }
      },
      ""styles"": {
        // Global element styles
        ""elements"": {},
        // Block styles
        ""blocks"": {}
      }
    }

In this example, we get a new CSS variable, `--wp-preset--color--primary`. The Style Engine then applies it to new CSS classes with a `.has-` prefix:

    body {
      --wp--preset--color--primary: #F8A100;
    }
    
    .has-primary-color {
      color: var(--wp--preset--color--primary) !important;
    }
    .has-primary-background-color {
      background-color: var(--wp--preset--color--primary) !important;
    }
    .has-primary-border-color {
      border-color: var(--wp--preset--color--primary) !important;
    }

Neat, right? These classes can now be used anywhere in the theme!

Next, the `styles.elements` object generates element selectors matching the HTML element they represent (e.g. `styles.elements.h2` corresponds with the `<h2>` element).

    {
      ""version"": 2,
      ""settings"": {},
      ""styles"": {
        // Global element styles
        ""elements"": {
           ""h2"": {
            ""color"": {
              ""text"": ""#F8A100""
            }
          }
        },
        // Block styles
        ""blocks"": {}
      }
    }

In this example, an `h2` selector is generated with a `#F8A100` color value:

    h2 {
      color: #F8A100;
    }

And, hey, we could have used the CSS variable we defined earlier in `settings` as the color value, knowing the Style Engine is going to generate it:

    {
      ""version"": 2,
      ""settings"": {},
      ""styles"": {
        // Global element styles
        ""elements"": {
           ""h2"": {
            ""color"": {
              ""text"": ""var(--wp--preset--color--primary)""
            }
          }
        },
        // Block styles
        ""blocks"": {}
      }
    }

…which gives us this in CSS:

    h2 {
      color: var(--wp--preset--color--primary);
    }

And, finally, the `settings.blocks` object uses the concatenation of the block and element selector. This way, the specificity for these selectors is higher, giving them greater priority over the other generated styles we’ve seen so far.

For example, let’s change the color of the Site Title block:

    {
      ""version"": 2,
      ""settings"": {},
      ""styles"": {
        // Global element styles
        ""elements"": {},
        // Block styles
        ""blocks"": {
          ""blocks"": {
            ""core/site-title"": {
              ""color"": {
                ""palette"": [
                  {
                    ""color"": ""#F8A100"",
                    ""name"": ""SF Orange"",
                    ""slug"": ""sf-orange""
                  }
                ]
              }
            }
          }
        }
      }
    }

Here’s how that shakes out in CSS. The Style Engine generates a class for the Site Title block (`.wp-block-site-title`) and for the color as a [descendant combinator](https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator) selector:

    .wp-block-site-title .has-sf-orange-color {
      color: var(--wp--preset--color--sf-orange) !important;
    }
    .wp-block-site-title .has-sf-orange-background-color {
      background-color: var(--wp--preset--color--sf-orange) !important;
    }
    .wp-block-site-title .has-sf-orange-border-color {
      border-color: var(--wp--preset--color--sf-orange) !important;
    }

### [](#aa-generated-css-classes)Generated CSS classes

So, now we have a pretty good idea of how the WordPress Style Engine processes data it receives from various sources into a block theme’s CSS.

We also got to see how the settings and styles from `theme.json` produce CSS variables and classes. What you’re probably interested in now is what other CSS classes do we get from Style Engine. Let’s dig into those.

#### [](#aa-block-classes)Block classes

A “block” in WordPress is a standalone component that can be dropped into any page or post. Every block gets a CSS class that is used as the block’s parent container.

And all of the class names have a `wp-block` prefix. For example, the Cover block gets a `.wp-block-cover` class that we can use to select and style the entire block. WordPress calls these **semantic classes** because they identify the block in the name.

Blocks get another class in addition to its semantic class, called its **stateful class**. These classes describe the block’s state, as if it “has” a certain text color, or “is” a certain background color or layout type.

For example, let’s say we add a Post Title block to one of our theme’s templates in the Site Editor. But then we change it, so it has a background color, the “SF Orange” color we defined in an earlier example.

![The WordPress Site Editor open on the Homepage template and displaying a large bright orange box with Hello World in it in black.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_DA5DFD9E7B753C4269ECC69DED048EDFAC629A24CD83E262D9243B4F6F08D66A_1675275411869_Screenshot2023-02-01at11.15.49AM.png?resize=2584%2C1814&ssl=1)

This results in a _stateful_ class on the element. Here’s the HTML:

    <h1 class=""wp-block-post-title has-background has-sf-orange-background-color"">
      <a href=""#"" target=""_self"">Hello world!</a>
    </h1>

See the two stateful CSS classes this made?

*   `.has-background`: This adds padding to the element, so the Post Title does not bump the edges of the container, allowing more background to show.
*   `.has-sf-orange-background-color`: This applies the CSS variable for the color.

Here is a table of selected WordPress blocks and examples of the sorts of classes that are generated and applied to them.

Block

Semantic Class

Stateful Class

Buttons

`.wp-block-buttons`

`.has-custom-width`

Cover

`.wp-block-cover`

`.is-light.has-parallax`  
`.has-position-vertical`

Columns

`.wp-block-columns`

`.has-2-columns`  
`.has-background`

Heading

`.wp-block-heading`

`.has-text-color`

Gallery

`.wp-block-gallery`

`.has-nested-images`

Image

`.wp-block-image`

`.alignleft`  
`.aligncenter`  
`.alignright`  
`.has-custom-border`

Spacer

`.wp-block-spacer`

`.is-style-dots`  
`.has-text-color`

Quote

`.wp-block-quote`

`.is-layout-constrained`

Again, this is not an exhaustive table of blocks. You can find a complete list, however, over at the [WordPress Block Editor Handbook](https://developer.wordpress.org/block-editor/reference-guides/core-blocks/). If there is a complete list of stateful classes living somewhere, I could not find it. So, while the stateful class examples in the table are accurate based on my testing, it should also not be considered a complete list of classes.

#### [](#aa-layout-classes)Layout classes

WordPress provides different **layout** types that can be applied to container-based blocks. By that, we’re talking about the following blocks:

*   Columns
*   Group
*   Post Content
*   Query Loop

Each of these blocks can be assigned a layout type, and there are three options:

*   **Flow layout:** Adds vertical spacing between nested blocks in the `margin-block` direction. Those nested blocks can also be aligned to the left, right, or center.
*   **Constrained layout:** Same exact deal as a Flow layout, but with width constraints on nested blocks that are based on the `contentWidth` and `wideWidth` settings (either in `theme.json` or Global Styles).
*   **Flex layout:** This was unchanged in WordPress 6.1. It uses [CSS Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) to create a layout that flows horizontally (in a row) by default but can flow vertically as well, so blocks stack one on top of another. Spacing is applied using the CSS [`gap` property](https://css-tricks.com/almanac/properties/g/gap/).

![The block editor with a two-column layout and the Layout settings open.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_DA5DFD9E7B753C4269ECC69DED048EDFAC629A24CD83E262D9243B4F6F08D66A_1675276700038_Screenshot2023-02-01at11.38.05AM.png?resize=2468%2C1636&ssl=1)

Depending on the settings selections, this corresponds to the following CSS classes:

*   `.is-layout-flow`
*   `.is-layout-constrained`
*   `.is-layout-flex`

See how the stateful naming convention is carried over to these? These aren’t the only layout-related classes, though. Here are all of the available classes, as documented in the [WordPress Block Editor Handbook](https://developer.wordpress.org/block-editor/explanations/architecture/styles/):

Justin Tadlock [has an excellent article](https://gutenbergtimes.com/a-walk-through-of-layout-classes-in-wordpress-6-1/) that explains these layout types and semantic classes with use cases and examples. You can also refer to my article, [“Using The New Constrained Layout In WordPress Block Themes”](https://css-tricks.com/using-the-new-constrained-layout-in-wordpress-block-themes/), for even more information on using different layouts.

### [](#aa-additional-sources-of-user-styles)Additional sources of user styles

We already know we can use the Global Styles settings in the Site Editor to override the CSS styles that come from WordPress Core and `theme.json`. We called those **user styles**.

But that’s not the only place where user styles can come from. For example, let’s say you’re writing a new post and want to style a specific paragraph a certain way. And let’s say you have a CSS class that you either defined `theme.json` or perhaps even your own stylesheet! As long as the CSS for those classes is loaded on the page, you can add them to any block in the block’s Advanced settings.

![](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/additional-class-box.png?resize=302%2C367&ssl=1)

This [Add Additional CSS Classes to Blocks](https://wordpress.com/support/wordpress-editor/adding-additional-css-classes-to-blocks/) guide walks you through using custom CSS classes on your site.

There’s another place where user styles can go. As of [Gutenberg 14.8](https://wptavern.com/gutenberg-14-8-overhauls-site-editor-interface-adds-style-book), a new custom [“Additional CSS” box](https://github.com/WordPress/gutenberg/pull/46141#issuecomment-1349893391) has been added to the Global Styles settings.

Source: [Make WordPress Core](https://make.wordpress.org/core/2022/12/22/whats-new-in-gutenberg-14-8-21-december/)

**And, hey, a big heads-up:** The CSS from these user-style sources can override or even remove the CSS settings in `theme.json`. Another big thing to know is that whatever styles you define here could get lost when changing themes. It’s probably better to actually create these styles in `theme.json` or by enqueuing your own stylesheet.

### [](#aa-block-stylesheets)Block stylesheets

There’s one more place where the WordPress Style Engine might get some styling data, and that’s from your own stylesheets! That’s right: you can add your own stylesheets to a theme.

Sure, you could also use the required `style.css` file as your stylesheet. Most block themes won’t be using it anyway. But there’s an even more efficient way to go about it: to **enqueue stylesheets for specific blocks**.

First off, you may already be familiar with the concept of _enqueuing_ files from working with classic WordPress themes and the [`wp_enqueue_style()` function](https://developer.wordpress.org/reference/functions/wp_enqueue_style/). That loads a CSS file by providing a path where WordPress can find it.

We can do the same thing but on a block-by-block basis. Each WordPress block has its own associated stylesheet, and we can enqueue our own stylesheets for them. For example, here I am adding a stylesheet of custom styles for the [Quote block](https://wordpress.org/documentation/article/quote-block/) in my theme’s `functions.php` file:

    add_action( 'init', 'emptytheme_enqueue_block_styles' );
    
    function emptytheme_enqueue_block_styles() {
      wp_enqueue_block_style( 'core/quote', array(
        'handle' => 'emptytheme-block-quote',
        'src'    => get_theme_file_uri( ""assets/blocks/quote.css"" ),
        'path'   => get_theme_file_path( ""assets/blocks/quote.css"" )
      ) );
    }

Check that out — it’s practically the same way we’d load custom stylesheets in a classic WordPress theme, PHP and all.

If you want to add styles to multiple blocks, you need to enqueue CSS files using an array and then loop through them. The WordPress Developer Blog has a nice [example](https://developer.wordpress.org/news/2022/12/leveraging-theme-json-and-per-block-styles-for-more-performant-themes/) written by Justin Tadlock:

    add_action( 'init', 'themeslug_enqueue_block_styles' );
    
    function themeslug_enqueue_block_styles() {
      // Add the block name (with namespace) for each style.
      $blocks = array(
        'core/button'
        'core/heading',
        'core/paragraph'
      );
    
      // Loop through each block and enqueue its styles.
      foreach ( $blocks as $block ) {
    
        // Replace slash with hyphen for filename.
        $slug = str_replace( '/', '-', $block );
    
        wp_enqueue_block_style( $block, array(
          'handle' => ""themeslug-block-{$slug}"",
          'src'    => get_theme_file_uri( ""assets/blocks/{$slug}.css"" ),
          'path'   => get_theme_file_path( ""assets/blocks/{$slug}.css"" )
        ) );
      }
    }

### [](#aa-all-of-this-is-in-active-development)All of this is in active development!

Please note that the WordPress Style Engine is still pretty new, and the work for it is ongoing. The [Style Engine document](https://developer.wordpress.org/block-editor/reference-guides/packages/packages-style-engine/#please-note) lists some of the planned upcoming work:

*   Consolidate global and block style rendering and enqueuing (ongoing)
*   Explore pre-render CSS rule processing with the intention of reduplicating other common and/or repetitive block styles. (ongoing)
*   Extend the scope of semantic class names and/or design token expressions, and encapsulate rules into stable utility classes.
*   Propose a way to control hierarchy and specificity, and make the style hierarchy cascade accessible and predictable. This might include preparing for CSS cascade layers until they become more widely supported, and allowing for opt-in support in Gutenberg via `theme.json`.
*   Refactor all blocks to consistently use the “style” attribute for all customizations, that is, deprecate preset-specific attributes such as `attributes.fontSize`.

You can track the development status [on the GitHub project board](https://github.com/orgs/WordPress/projects/19).

Even with these limitations, [this tweet from Rich Tabor](https://twitter.com/richard_tabor/status/1600096551073972226) and the following video demonstrates the unlimited opportunities we have for customizing the appearance of a block theme — without even touching code!

⚠️ Contains auto-playing media

![Cycling through various theme styles.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/this-is-wordpress-gif.gif?resize=1280%2C1280&ssl=1)

All made possible, thanks to the WordPress Style Engine and its JSON parsing superpowers.

### [](#aa-additional-resources)Additional resources

We covered a lot of ground in this article! I thought I would share some of the resources I relied on for the information.

#### [](#aa-documentation)Documentation

*   [Block styles generation (Style Engine)](https://make.wordpress.org/core/2022/10/10/block-styles-generation-style-engine/) (WordPress 6.1 Field Guide)
*   [Core Styles and Theme Customization: the next steps](https://make.wordpress.org/core/2022/04/13/core-styles-and-theme-customization-the-next-steps/) (Make WordPress Core)

#### [](#aa-tutorials)Tutorials

*   [Standardized Design Tokens and CSS for a consistent, customizable, and interoperable WordPress future](https://mrwweb.com/standardized-design-tokens-css-wordpress-future/) (MR Web Design)
*   [An Overview of Layout-Related Classes](https://gutenbergtimes.com/a-walk-through-of-layout-classes-in-wordpress-6-1/) (Gutenberg Times)

#### [](#aa-github-issues)GitHub issues

A lot of the context for this article comes from proposals and issues reported to the WordPress GitHub repo.

*   [The Block – Theme contract](https://github.com/WordPress/gutenberg/discussions/35470) (#35470)
*   [General CSS Concepts: Declaring style vs. describing state](https://github.com/WordPress/gutenberg/issues/38694) (#38694)
*   [Explore options to add back semantic classnames to block wrappers](https://github.com/WordPress/gutenberg/issues/38719) (#38719)
*   [Proposal: Standardized block markup, theme.json design tokens, and CSS classes to improve interoperability](https://github.com/WordPress/gutenberg/issues/38998) (#38998)
*   [Layout: Use semantic classnames, centralize layout definitions, reduce duplication, and fix blockGap in theme.json](https://github.com/WordPress/gutenberg/pull/40875) (#40875)
*   [Global Styles Ongoing Roadmap](https://github.com/WordPress/gutenberg/issues/41232) (#41232)
*   [Heading block- Add a wp-block-heading CSS class](https://github.com/WordPress/gutenberg/pull/42122) (#42122)

### [](#aa-next-up)Next up…

We’re actually all done! But I’ve created a page that pulls all of what we learned about CSS in WordPress Block Themes and provides you with a one-stop place you can reference anytime you need it.

#### [](#aa-wordpress-block-theme-css-and-style-settings-guide)WordPress Block Theme CSS and Style Settings Guide

*   [Introduction](https://css-tricks.com/wordpress-block-theme-guide/)
*   [Glossary of Terms for `theme.json`](https://css-tricks.com/glossary-of-terms-for-theme-json/)
*   [Defining Global Settings](https://css-tricks.com/defining-global-settings/)
*   [Defining Global Styles](https://css-tricks.com/defining-global-styles-in-wordpress/)
*   [How the Styles Engine Generates Classes](https://css-tricks.com/how-the-style-engine-generates-classes/) _(you are here!)_
*   [Global Styles Reference Tables](https://css-tricks.com/wordpress-global-styles-reference-tables/)"
9,An Approach to Lazy Loading Custom Elements,https://css-tricks.com/an-approach-to-lazy-loading-custom-elements/,https://css-tricks.com/wp-content/uploads/2023/02/wev-components-lazy.png,Frederik Dohr,1676257200000,,"[""custom elements"",""lazy loading"",""web components""]","We’re fans of [Custom Elements](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) around here. Their design makes them [particularly amenable to lazy loading](https://web.dev/custom-elements-v1/#progressively-enhanced-html), which can be a boon for performance.

Inspired by [a colleague’s](https://www.innoq.com/en/staff/steffen-henschel/) experiments, I recently set about writing a simple auto-loader: Whenever a custom element appears in the DOM, we wanna load the corresponding implementation if it’s not available yet. The browser then takes care of upgrading such elements from there on out.

Chances are you won’t actually need all this; there’s usually a simpler approach. Used deliberately, the techniques shown here might still be a useful addition to your toolset.

For consistency, we want our auto-loader to be a custom element as well — which also means we can easily configure it via HTML. But first, let’s identify those unresolved custom elements, step by step:

    class AutoLoader extends HTMLElement {
      connectedCallback() {
        let scope = this.parentNode;
        this.discover(scope);
      }
    }
    customElements.define(""ce-autoloader"", AutoLoader);

Assuming we’ve loaded this module up-front (using [`async`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async) is ideal), we can drop a `<ce-autoloader>` element into the `<body>` of our document. That will immediately start the discovery process for all child elements of `<body>`, which now constitutes our root element. We could limit discovery to a subtree of our document by adding `<ce-autoloader>` to the respective container element instead — indeed, we might even have multiple instances for different subtrees.

Of course, we still have to implement that `discover` method (as part of the `AutoLoader` class above):

    discover(scope) {
      let candidates = [scope, ...scope.querySelectorAll(""*"")];
      for(let el of candidates) {
        let tag = el.localName;
        if(tag.includes(""-"") && !customElements.get(tag)) {
          this.load(tag);
        }
      }
    }

Here we check our root element along with every single descendant (`*`). If it’s a custom element — as indicated by hyphenated tags — but not yet upgraded, we’ll attempt to load the corresponding definition. Querying the DOM that way might be expensive, so we should be a little careful. We can alleviate load on the main thread by deferring this work:

    connectedCallback() {
      let scope = this.parentNode;
      requestIdleCallback(() => {
        this.discover(scope);
      });
    }

[`requestIdleCallback`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestIdleCallback) is not universally supported yet, but we can use [`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) as a fallback:

    let defer = window.requestIdleCallback || requestAnimationFrame;
    
    class AutoLoader extends HTMLElement {
      connectedCallback() {
        let scope = this.parentNode;
        defer(() => {
          this.discover(scope);
        });
      }
      // ...
    }

Now we can move on to implementing the missing `load` method to dynamically inject a `<script>` element:

    load(tag) {
      let el = document.createElement(""script"");
      let res = new Promise((resolve, reject) => {
        el.addEventListener(""load"", ev => {
          resolve(null);
        });
        el.addEventListener(""error"", ev => {
          reject(new Error(""failed to locate custom-element definition""));
        });
      });
      el.src = this.elementURL(tag);
      document.head.appendChild(el);
      return res;
    }
    
    elementURL(tag) {
      return `${this.rootDir}/${tag}.js`;
    }

Note the hard-coded convention in `elementURL`. The `src` attribute’s URL assumes there’s a directory where all custom element definitions reside (e.g. `<my-widget>` → `/components/my-widget.js`). We could come up with more elaborate strategies, but this is good enough for our purposes. Relegating this URL to a separate method allows for project-specific subclassing when needed:

    class FancyLoader extends AutoLoader {
      elementURL(tag) {
        // fancy logic
      }
    }

Either way, note that we’re relying on `this.rootDir`. This is where the aforementioned configurability comes in. Let’s add a corresponding getter:

    get rootDir() {
      let uri = this.getAttribute(""root-dir"");
      if(!uri) {
        throw new Error(""cannot auto-load custom elements: missing `root-dir`"");
      }
      if(uri.endsWith(""/"")) { // remove trailing slash
        return uri.substring(0, uri.length - 1);
      }
      return uri;
    }

You might be thinking of `observedAttributes` now, but that doesn’t really make things easier. Plus updating `root-dir` at runtime seems like something we’re never going to need.

Now we can — and must — configure our elements directory: `<ce-autoloader root-dir=""/components"">`.

With this, our auto-loader can do its job. Except it only works once, for elements that already exist when the auto-loader is initialized. We’ll probably want to account for dynamically added elements as well. That’s where [`MutationObserver`](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) comes into play:

    connectedCallback() {
      let scope = this.parentNode;
      defer(() => {
        this.discover(scope);
      });
      let observer = this._observer = new MutationObserver(mutations => {
        for(let { addedNodes } of mutations) {
          for(let node of addedNodes) {
            defer(() => {
              this.discover(node);
            });
          }
        }
      });
      observer.observe(scope, { subtree: true, childList: true });
    }
    
    disconnectedCallback() {
      this._observer.disconnect();
    }

This way, the browser notifies us whenever a new element appears in the DOM — or rather, our respective subtree — which we then use to restart the discovery process. (You might argue we’re re-inventing custom elements here, and you’d be kind of correct.)

Our auto-loader is now fully functional. Future enhancements might look into potential race conditions and investigate optimizations. But chances are this is good enough for most scenarios. Let me know in the comments if you have a different approach and we can compare notes!"
10,Different Ways to Get CSS Gradient Shadows,https://css-tricks.com/different-ways-to-get-css-gradient-shadows/,https://css-tricks.com/wp-content/uploads/2023/02/gradient-shadows.png,Temani Afif,1675998000000,,"[""box-shadow"",""gradients"",""shadow""]","It’s a question I hear asked quite often: _Is it possible to create shadows from gradients instead of solid colors?_ There is no specific CSS property that does this (believe me, I’ve looked) and any blog post you find about it is basically a lot of CSS tricks to approximate a gradient. We’ll actually cover some of those as we go.

But first… _another_ article about gradient shadows? Really?

Yes, this is yet another post on the topic, but it is different. Together, we’re going to push the limits to get a solution that covers something I haven’t seen anywhere else: **transparency**. Most of the tricks work if the element has a non-transparent background but what if we have a transparent background? We will explore this case here!

Before we start, let me introduce [](https://css-generators.com/gradient-shadows)[my gradient shadows generator](https://css-generators.com/gradient-shadows/). All you have to do is to adjust the configuration, and get the code. But follow along because I’m going to help you understand all the logic behind the generated code.

[](#aa-table-of-contents)Table of Contents
------------------------------------------

*   [Non-transparent solution](#nontransparent-solution)
*   [Transparent solution](#transparent-solution)
*   [Adding a border radius](#adding-a-border-radius)
*   [Wrapping up](#wrapping-up)

### [](#aa-non-transparent-solution)Non-transparent solution

Let’s start with the solution that’ll work for 80% of most cases. The most typical case: you are using an element with a background, and you need to add a gradient shadow to it. No transparency issues to consider there.

The solution is to rely on a pseudo-element where the gradient is defined. You place it behind the actual element and [apply a blur filter to it](https://css-tricks.com/almanac/properties/f/filter/).

    .box {
      position: relative;
    }
    .box::before {
      content: """";
      position: absolute;
      inset: -5px; /* control the spread */
      transform: translate(10px, 8px); /* control the offsets */
      z-index: -1; /* place the element behind */
      background: /* your gradient here */;
      filter: blur(10px); /* control the blur */
    }

It looks like a lot of code, and that’s because it is. Here’s how we could have done it with a [`box-shadow`](https://css-tricks.com/almanac/properties/b/box-shadow/) instead if we were using a solid color instead of a gradient.

    box-shadow: 10px 8px 10px 5px orange;

That should give you a good idea of what the values in the first snippet are doing. We have X and Y offsets, the blur radius, and the spread distance. Note that we need a negative value for the spread distance that comes from the [`inset`](https://css-tricks.com/almanac/properties/i/inset/) property.

Here’s a demo showing the gradient shadow next to a classic `box-shadow`:

CodePen Embed Fallback

If you look closely you will notice that both shadows are a little different, especially the blur part. It’s not a surprise because I am pretty sure the `filter` property’s algorithm works differently than the one for `box-shadow`. That’s not a big deal since the result is, in the end, quite similar.

This solution is good, but still has a few drawbacks related to the `z-index: -1` declaration. Yes, there is [“stacking context”](https://css-tricks.com/its-always-the-stacking-context/) happening there!

CodePen Embed Fallback

I applied a [`transform`](https://css-tricks.com/almanac/properties/t/transform/) to the main element, and boom! The shadow is no longer below the element. This is not a bug but the logical result of a stacking context. Don’t worry, I will not start a boring explanation about stacking context ([I already did that in a Stack Overflow thread](https://stackoverflow.com/a/54903621/8620333)), but I’ll still show you how to work around it.

The first solution that I recommend is to use a 3D `transform`:

    .box {
      position: relative;
      transform-style: preserve-3d;
    }
    .box::before {
      content: """";
      position: absolute;
      inset: -5px;
      transform: translate3d(10px, 8px, -1px); /* (X, Y, Z) */
      background: /* .. */;
      filter: blur(10px);
    }

Instead of using `z-index: -1`, we will use a negative translation along the Z-axis. We will put everything inside `translate3d()`. Don’t forget to use `transform-style: preserve-3d` on the main element; otherwise, the 3D `transform` won’t take effect.

CodePen Embed Fallback

As far as I know, there is no side effect to this solution… but maybe you see one. If that’s the case, share it in the comment section, and let’s try to find a fix for it!

If for some reason you are unable to use a 3D `transform`, the other solution is to rely on two pseudo-elements — `::before` and `::after`. One creates the gradient shadow, and the other reproduces the main background (and other styles you might need). That way, we can easily control the stacking order of both pseudo-elements.

    .box {
      position: relative;
      z-index: 0; /* We force a stacking context */
    }
    /* Creates the shadow */
    .box::before {
      content: """";
      position: absolute;
      z-index: -2;
      inset: -5px;
      transform: translate(10px, 8px);
      background: /* .. */;
      filter: blur(10px);
    }
    /* Reproduces the main element styles */
    .box::after {
      content: """""";
      position: absolute;
      z-index: -1;
      inset: 0;
      /* Inherit all the decorations defined on the main element */
      background: inherit;
      border: inherit;
      box-shadow: inherit;
    }

CodePen Embed Fallback

It’s important to note that we are _forcing_ the main element to create a stacking context by declaring `z-index: 0`, or [any other property that do the same](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context#description), on it. Also, don’t forget that pseudo-elements consider the padding box of the main element as a reference. So, if the main element has a border, you need to take that into account when defining the pseudo-element styles. You will notice that I am using `inset: -2px` on `::after` to account for the border defined on the main element.

As I said, this solution is probably good enough in a majority of cases where you want a gradient shadow, as long as you don’t need to support transparency. But we are here for the challenge and to push the limits, so even if you don’t need what is coming next, stay with me. You will probably learn new CSS tricks that you can use elsewhere.

### [](#aa-transparent-solution)Transparent solution

Let’s pick up where we left off on the 3D `transform` and remove the background from the main element. I will start with a shadow that has both offsets and spread distance equal to `0`.

CodePen Embed Fallback

The idea is to find a way to cut or hide everything inside the area of the element (inside the green border) while keeping what is outside. We are going to use [`clip-path`](https://css-tricks.com/almanac/properties/c/clip-path/) for that. But you might wonder how `clip-path` can make a cut _inside_ an element.

Indeed, there’s no way to do that, but we can simulate it using a particular polygon pattern:

    clip-path: polygon(-100vmax -100vmax,100vmax -100vmax,100vmax 100vmax,-100vmax 100vmax,-100vmax -100vmax,0 0,0 100%,100% 100%,100% 0,0 0)

CodePen Embed Fallback

Tada! We have a gradient shadow that supports transparency. All we did is add a `clip-path` to the previous code. Here is a figure to illustrate the polygon part.

![Showing the clip-path coordinates for the element.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_48C6EEC0315F934C02900CCBCCCDFBD0A1B256CE69F7A4B8A991D9F184217B87_1674637694432_image.png?resize=763%2C502&ssl=1)

The blue area is the visible part after applying the `clip-path`. I am only using the blue color to illustrate the concept, but in reality, we will only see the shadow inside that area. As you can see, we have four points defined with a big value (`B`). My big value is `100vmax`, but it can be any big value you want. The idea is to ensure we have enough space for the shadow. We also have four points that are the corners of the pseudo-element.

The arrows illustrate the path that defines the polygon. We start from `(-B, -B)` until we reach `(0,0)`. In total, we need 10 points. Not eight points because two points are repeated twice in the path (`(-B,-B)` and `(0,0)`).

There’s still _one more thing_ left for us to do, and it’s to account for the spread distance and the offsets. The only reason the demo above works is because it is a particular case where the offsets and spread distance are equal to `0`.

Let’s define the spread and see what happens. Remember that we use `inset` with a negative value to do this:

CodePen Embed Fallback

The pseudo-element is now bigger than the main element, so the `clip-path` cuts more than we need it to. Remember, we always need to cut the part _inside_ the main element (the area inside the green border of the example). We need to adjust the position of the four points inside of `clip-path`.

    .box {
      --s: 10px; /* the spread  */
      position: relative;
    }
    .box::before {
      inset: calc(-1 * var(--s));
      clip-path: polygon(
        -100vmax -100vmax,
         100vmax -100vmax,
         100vmax 100vmax,
        -100vmax 100vmax,
        -100vmax -100vmax,
        calc(0px  + var(--s)) calc(0px  + var(--s)),
        calc(0px  + var(--s)) calc(100% - var(--s)),
        calc(100% - var(--s)) calc(100% - var(--s)),
        calc(100% - var(--s)) calc(0px  + var(--s)),
        calc(0px  + var(--s)) calc(0px  + var(--s))
      );
    }

We’ve defined a CSS variable, `--s`, for the spread distance and updated the polygon points. I didn’t touch the points where I am using the big value. I only update the points that define the corners of the pseudo-element. I increase all the zero values by `--s` and decrease the `100%` values by `--s`.

CodePen Embed Fallback

It’s the same logic with the offsets. When we translate the pseudo-element, the shadow is out of alignment, and we need to rectify the polygon again and move the points in the opposite direction.

    .box {
      --s: 10px; /* the spread */
      --x: 10px; /* X offset */
      --y: 8px;  /* Y offset */
      position: relative;
    }
    .box::before {
      inset: calc(-1 * var(--s));
      transform: translate3d(var(--x), var(--y), -1px);
      clip-path: polygon(
        -100vmax -100vmax,
         100vmax -100vmax,
         100vmax 100vmax,
        -100vmax 100vmax,
        -100vmax -100vmax,
        calc(0px  + var(--s) - var(--x)) calc(0px  + var(--s) - var(--y)),
        calc(0px  + var(--s) - var(--x)) calc(100% - var(--s) - var(--y)),
        calc(100% - var(--s) - var(--x)) calc(100% - var(--s) - var(--y)),
        calc(100% - var(--s) - var(--x)) calc(0px  + var(--s) - var(--y)),
        calc(0px  + var(--s) - var(--x)) calc(0px  + var(--s) - var(--y))
      );
    }

There are two more variables for the offsets: `--x` and `--y`. We use them inside of `transform` and we also update the `clip-path` values. We still don’t touch the polygon points with big values, but we offset all the others — we reduce `--x` from the X coordinates, and `--y` from the Y coordinates.

Now all we have to do is to update a few variables to control the gradient shadow. And while we are at it, let’s also make the blur radius a variable as well:

CodePen Embed Fallback

> Do we still need the 3D `transform` trick?

It all depends on the border. Don’t forget that the reference for a pseudo-element is the padding box, so if you apply a border to your main element, you will have an overlap. You either keep the 3D `transform` trick or update the `inset` value to account for the border.

Here is the previous demo with an updated `inset` value in place of the 3D `transform`:

CodePen Embed Fallback

I‘d say this is a more suitable way to go because the spread distance will be more accurate, as it starts from the border-box instead of the padding-box. But you will need to adjust the `inset` value according to the main element’s border. Sometimes, the border of the element is unknown and you have to use the previous solution.

With the earlier non-transparent solution, it’s possible you will face a stacking context issue. And with the transparent solution, it’s possible you face a border issue instead. Now you have options and ways to work around those issues. The 3D transform trick is my favorite solution because it fixes all the issues ([The online generator](https://css-generators.com/gradient-shadows/) will consider it as well)

### [](#aa-adding-a-border-radius)Adding a border radius

If you try adding `border-radius` to the element when using the non-transparent solution we started with, it is a fairly trivial task. All you need to do is to inherit the same value from the main element, and you are done.

CodePen Embed Fallback

Even if you don’t have a border radius, it’s a good idea to define `border-radius: inherit`. That accounts for any potential `border-radius` you might want to add later or a border radius that comes from somewhere else.

It’s a different story when dealing with the transparent solution. Unfortunately, it means finding another solution because `clip-path` cannot deal with curvatures. That means we won’t be able to cut the area inside the main element.

We will introduce the [`mask`](https://css-tricks.com/almanac/properties/m/mask/) property to the mix.

This part was very tedious, and I struggled to find a general solution that doesn’t rely on [magic numbers](https://css-tricks.com/magic-numbers-in-css/). I ended up with a very complex solution that uses only one pseudo-element, but the code was a lump of spaghetti that covers only a few particular cases. I don’t think it is worth exploring that route.

I decided to insert an extra element for the sake of simpler code. Here’s the markup:

    <div class=""box"">
      <sh></sh>
    </div>

I am using a custom element, `<sh>`, to avoid any potential conflict with external CSS. I could have used a `<div>`, but since it’s a common element, it can easily be targeted by another CSS rule coming from somewhere else that can break our code.

The first step is to position the `<sh>` element and purposely create an overflow:

    .box {
      --r: 50px;
      position: relative;
      border-radius: var(--r);
    }
    .box sh {
      position: absolute;
      inset: -150px;
      border: 150px solid #0000;
      border-radius: calc(150px + var(--r));
    }

The code may look a bit strange, but we’ll get to the logic behind it as we go. Next, we create the gradient shadow using a pseudo-element of `<sh>`.

    .box {
      --r: 50px;
      position: relative;
      border-radius: var(--r);
      transform-style: preserve-3d;
    }
    .box sh {
      position: absolute;
      inset: -150px;
      border: 150px solid #0000;
      border-radius: calc(150px + var(--r));
      transform: translateZ(-1px)
    }
    .box sh::before {
      content: """";
      position: absolute;
      inset: -5px;
      border-radius: var(--r);
      background: /* Your gradient */;
      filter: blur(10px);
      transform: translate(10px,8px);
    }

As you can see, the pseudo-element uses the same code as all the previous examples. The only difference is the 3D `transform` defined on the `<sh>` element instead of the pseudo-element. For the moment, we have a gradient shadow without the transparency feature:

CodePen Embed Fallback

Note that the area of the `<sh>` element is defined with the black outline. Why I am doing this? Because that way, I am able to apply a `mask` on it to hide the part inside the green area and keep the overflowing part where we need to see the shadow.

I know it’s a bit tricky, but unlike `clip-path`, the `mask` property doesn’t account for the area _outside_ an element to show and hide things. That’s why I was obligated to introduce the extra element — to simulate the “outside” area.

Also, note that I am using a combination of `border` and `inset` to define that area. This allows me to keep the padding-box of that extra element the same as the main element so that the pseudo-element won’t need additional calculations.

Another useful thing we get from using an extra element is that the element is fixed, and only the pseudo-element is moving (using `[translate](https://css-tricks.com/almanac/properties/t/transform/#aa-translate)`). This will allow me to easily define the mask, which is the _last_ step of this trick.

    mask:
      linear-gradient(#000 0 0) content-box,
      linear-gradient(#000 0 0);
    mask-composite: exclude;

CodePen Embed Fallback

It’s done! We have our gradient shadow, and it supports `border-radius`! You probably expected a complex `mask` value with oodles of gradients, but no! We only need two simple gradients and a `[mask-composite](https://css-tricks.com/almanac/properties/m/mask-composite/)` to complete the magic.

Let’s isolate the `<sh>` element to understand what is happening there:

    .box sh {
      position: absolute;
      inset: -150px;
      border: 150px solid red;
      background: lightblue;
      border-radius: calc(150px + var(--r));
    }

Here’s what we get:

CodePen Embed Fallback

Note how the inner radius matches the main element’s `border-radius`. I have defined a big border (`150px`) and a `border-radius` equal to the big border _plus_ the main element’s radius. On the outside, I have a radius equal to `150px + R`. On the inside, I have `150px + R - 150px = R`.

We must hide the inner (blue) part and make sure the border (red) part is still visible. To do that, I’ve defined two mask layers —One that covers only the content-box area and another that covers the border-box area (the default value). Then I excluded one from another to reveal the border.

    mask:
      linear-gradient(#000 0 0) content-box,
      linear-gradient(#000 0 0);
    mask-composite: exclude;

CodePen Embed Fallback

I used the same technique to [create a border that supports gradients and `border-radius`](https://dev.to/afif/border-with-gradient-and-radius-387f). Ana Tudor has also a good article [about masking composite](https://css-tricks.com/mask-compositing-the-crash-course/) that I invite you to read.

> Are there any drawbacks to this method?

Yes, this definitely not perfect. The first issue you may face is related to using a border on the main element. This may create a small misalignment in the radii if you don’t account for it. We have this issue in our example, but perhaps you can hardly notice it.

The fix is relatively easy: Add the border’s width for the `<sh>` element’s `inset`.

    .box {
      --r: 50px;
      border-radius: var(--r);
      border: 2px solid;
    }
    .box sh {
      position: absolute;
      inset: -152px; /* 150px + 2px */
      border: 150px solid #0000;
      border-radius: calc(150px + var(--r));
    }

Another drawback is the big value we’re using for the border (`150px` in the example). This value should be big enough to contain the shadow but not too big to avoid overflow and scrollbar issues. Luckily, [the online generator](https://css-generators.com/gradient-shadows/) will calculate the optimal value considering all the parameters.

The last drawback I am aware of is when you’re working with a complex `border-radius`. For example, if you want a different radius applied to each corner, you must define a variable for each side. It’s not really a drawback, I suppose, but it can make your code a bit tougher to maintain.

    .box {
      --r-top: 10px;
      --r-right: 40px;
      --r-bottom: 30px;
      --r-left: 20px;
      border-radius: var(--r-top) var(--r-right) var(--r-bottom) var(--r-left);
    }
    .box sh {
      border-radius: calc(150px + var(--r-top)) calc(150px + var(--r-right)) calc(150px + var(--r-bottom)) calc(150px + var(--r-left));
    }
    .box sh:before {
      border-radius: var(--r-top) var(--r-right) var(--r-bottom) var(--r-left);
    }

CodePen Embed Fallback

[The online generator](https://css-generators.com/gradient-shadows/) only considers a uniform radius for the sake of simplicity, but you now know how to modify the code if you want to consider a complex radius configuration.

### [](#aa-wrapping-up)Wrapping up

We’ve reached the end! The magic behind gradient shadows is no longer a mystery. I tried to cover all the possibilities and any possible issues you might face. If I missed something or you discover any issue, please feel free to report it in the comment section, and I’ll check it out.

Again, a lot of this is likely overkill considering that the de facto solution will cover most of your use cases. Nevertheless, it’s good to know the “why” and “how” behind the trick, and how to overcome its limitations. Plus, we got good exercise playing with CSS clipping and masking.

And, of course, you have [the online generator](https://css-generators.com/gradient-shadows/) you can reach for anytime you want to avoid the hassle."
11,"Healthcare, Selling Lemons, and the Price of Developer Experience",https://css-tricks.com/healthcare-selling-lemons-and-the-price-of-developer-experience/,https://css-tricks.com/wp-content/uploads/2023/02/react-lemons.jpg,Geoff Graham,1675911600000,,"[""dx"",""javascript framework"",""third-party"",""user testing"",""ux""]","Every now and then, a one blog post is published and it spurs a reaction or response in others that are, in turn, published as blogs posts, and a theme starts to emerge. That’s what happened this past week and the theme developed around the cost of JavaScript frameworks — a cost that, in this case, reveals just how darn important it is to [use JavaScript responsibly](https://css-tricks.com/responsible-javascript/).

### [](#aa-eric-bailey-modern-health-frameworks-performance-and-harm)Eric Bailey: [Modern Health, frameworks, performance, and harm](https://ericwbailey.website/published/modern-health-frameworks-performance-and-harm/)

This is where the story begins. Eric goes to a health service provider website to book an appointment and gets… a blank screen.

> In addition to [a terrifying amount of telemetry](https://builtwith.com/advanced?back=joinmodernhealth.com), Modern Health’s customer-facing experience is delivered using React and Webpack.
> 
> If you are familiar with how the web is built, what happened is pretty obvious: A website that over-relies on JavaScript to power its experience had its logic collide with one or more other errant pieces of logic that it summons. This created a deadlock.
> 
> If you do not make digital experiences for a living, what happened is not obvious at all. All you see is a tiny fake loading spinner that never stops.

_D’oh._ This might be mere nuisance — or even laughable — in some situations, but not when someone’s health is on the line:

> A person seeking help in a time of crisis does not care about TypeScript, tree shaking, hot module replacement, A/B tests, burndown charts, NPS, OKRs, KPIs, or other startup jargon. [Developer experience does not count for shit](https://andy-bell.co.uk/speed-for-who/) if the person using the thing they built can’t actually get what they need.

This is the big smack of reality. What happens when our tooling and reporting — the very things that are supposed to make our work more effective — get in the way of the user experience? These are tools that provide insights that can help us [anticipate a user’s needs, especially in a time of need](https://css-tricks.com/preventing-suicide-with-ux-a-case-study-on-google-search/).

I realize that pointing the finger at JavaScript frameworks is already divisive. But this goes beyond whether you use React or _framework d’jour_. It’s about business priorities and developer experience conflicting with user experiences.

### [](#aa-alex-russell-the-market-for-lemons)Alex Russell: [The Market for Lemons](https://infrequently.org/2023/02/the-market-for-lemons/)

> Partisans for slow, complex frameworks have successfully marketed lemons as the hot new thing, despite the pervasive failures in their wake, crowding out higher-quality options in the process.
> 
> These technologies were initially pitched on the back of _“better user experiences”_, but have [utterly failed](https://dev.to/tigt/making-the-worlds-fastest-website-and-other-mistakes-56na) to deliver on that promise outside of the [high-management-maturity organisations](https://infrequently.org/2022/05/performance-management-maturity/) in which they were born. Transplanted into the wider web, these new stacks have proven to be [expensive duds](https://infrequently.org/2022/12/performance-baseline-2023/).

There’s the rub. Alex ain’t mincing words, but notice that the onus is on the way frameworks haved been marketed to developers than developers themselves. The sales pitch?

> Once the lemon sellers embed the data-light idea that improved “Developer Experience” (“DX”) leads to better user outcomes, improving “DX” became and end unto itself, and many who knew better felt forced to play along. The long lead times in falsifying trickle-down UX was a feature, not a bug; they don’t need you to succeed, only to keep buying.
> 
> As marketing goes, the “DX” [bait-and-switch](https://infrequently.org/2018/09/the-developer-experience-bait-and-switch/) is brilliant, but the tech isn’t delivering for anyone _but_ developers.

Tough to stomach, right? No one wants to be duped, and it’s tough to admit a sunken cost when there is one. It gets downright personal if you’ve invested time in a specific piece of tech and effort integrating it into your stack. Development workflows are hard and settling into one is sorta like settling into a house you plan on living in a little while. But you’d want to know if your house was built on what Alex calls a [“sandy foundation”](https://infrequently.org/2023/02/the-market-for-lemons/#sandy-foundations).

I’d just like to pause here a moment to say I have no skin in this debate. As a web generalist, I tend to adopt new tools early for familiarity then drop them fast, relegating them to my toolshed until I find a good use for them. In other words, my knowledge is _wide_ but not very _deep_ in one area or thing. [HTML, CSS, and JavaScript is my go-to cocktail](https://css-tricks.com/the-best-cocktail-in-town/), but I do care a great deal about user experience and know when to reach for a tool to solve a particular thing.

And let’s acknowledge that not everyone has a say in the matter. Many of us work on managed teams that are prescribed the tools we use. Alex says as much, which I think is important to call out because it’s clear this isn’t meant to be personal. It’s a statement on our priorities and making sure they along to user expectations.

Let’s alow Chris to steer us back to the story…

### [](#aa-chris-coyier-end-to-end-tests-with-content-blockers)Chris Coyier: [End-To-End Tests with Content Blockers?](https://chriscoyier.net/2023/02/03/end-to-end-tests-with-content-blockers/)

So, maybe your app is built on React and it doesn’t matter why it’s that way. There’s still work to do to [ensure the app is reliable and accessible](https://bradfrost.com/blog/post/enforcing-accessibility-best-practices-with-automatically-generated-ids/).

> Just blocking a file shouldn’t totally wreck a website, but it often does! In JavaScript, that may be because the developers have written first-party JavaScript (which I’ll generally allow) that depends on third-party JavaScript (which I’ll generally block).
> 
> \[…\]
> 
> If I block resources from `tracking-website.com`, now my first-party JavaScript is going to throw an error. JavaScript isn’t chill. If an error is thrown, it doesn’t execute more JavaScript further down in the file. If further down in that file is `transitionToOnboarding();`— that ain’t gonna work.

Maybe it’s worth revisiting your workflow and tweaking it to account to identify more points of failure.

> So here’s an idea: Run your end-to-end tests in browsers that have popular content blockers with default configs installed. 
> 
> Doing so may uncover problems like this that stop your customers, and indeed people in need, from being stopped in their tracks.

Good idea! Hey, anything that helps paint a more realistic picture of how the app is used. That sort of clarity could happen a lot earlier in the process, perhaps before settling on development decisions. Know your users. Why are they using the app? How do they browse the web? Where are they phsically located? What problems could get in their way? [Chris has a great talk on that, too.](https://css-tricks.com/what-we-dont-know/)"
12,Moving Backgrounds,https://css-tricks.com/moving-backgrounds/,https://css-tricks.com/wp-content/uploads/2023/01/movable-background.png,Saleh Mubashar,1675911600000,,"[""animation"",""background-image"",""background-position""]","We often think of background images as texture or something that provides contrast for legible content — in other words, not really content. If it was content, you’d probably reach for an `<img>` anyway, accessibility and whatnot.

But there are times when the _position_ or _scale_ of a background image might sit somewhere between the poles of content and decoration. Context is king, right? If we change the background image’s position, it may convey a bit more context or experience.

How so? Let’s look at a few examples I’ve seen floating around.

As we get started, I’ll caution that there’s a fine line in these demos between images used for decoration and images used as content. The difference has accessibility implications where backgrounds are not announced to screen readers. [If your image is really an image](https://www.smashingmagazine.com/2021/06/img-alt-attribute-alternate-description-decorative/), then maybe consider an `<img>` tag with proper `alt` text. And while we’re talking accessibility, it’s a good idea to [consider a user’s motion preference’s](https://css-tricks.com/nuking-motion-with-prefers-reduced-motion/) as well.

### [](#aa-show-me-more)Show me more!

Chris Coyier has this neat little demo from several years back.

CodePen Embed Fallback

The demo is super practical in lots of ways because it’s a neat approach for displaying ads in content. You have the sales pitch and an enticing image to supplement it.

The big limitation for most ads, I’d wager, is the limited real estate. I don’t know if you’ve ever had to drop an ad onto a page, but I have and typically ask the advertiser for an image that meets exact pixel dimensions, so the asset fits the space.

But Chris’s demo alleviates the space issue. Hover the image and watch it both move and scale. The user actually gets _more_ context for the product than they would have when the image was in its original position. That’s a win-win, right? The advertiser gets to create an eye-catching image without compromising context. Meanwhile, the user gets a little extra value from the newly revealed portions of the image.

If you peek at the demo’s markup, you’ll notice it’s pretty much what you’d expect. Here’s an abridged version:

    <div class=""ad-container"">
      <a href=""#"" target=""_blank"" rel=""noopener"">
        <!-- Background image container  -->
        <div class=""ad-image""></div>
      </a> 
      <div class=""ad-content"">
        <!-- Content -->
      </div>
    </div>

We could probably quibble over the semantics a bit, but that’s not the point. We have a container with a linked-up `<div>` for the background image and another `<div>` to hold the content.

As far as styling goes, the important pieces are here:

    .container {
      background-image: url(""/path/to/some/image.png"");
      background-repeat: no-repeat;
      background-position: 0 0;
      height: 400px;
      width: 350px;
    }

Not bad, right? We give the container some dimensions and set a background image on it that doesn’t repeat and is positioned by its bottom-left edge.

The real trick is with JavaScript. We will use that to get the mouse position and the container’s offset, then convert that value to an appropriate scale to set the `background-position`. First, let’s listen for mouse movements on the `.container` element:

    let container = document.querySelector("".container"");
    container.addEventListener(""mousemove"", function(e) {
        // Our function
      }
    );

From here, we can use the container’s `offsetX` and `offsetY` properties. But we won’t use these values directly, as the value for the X coordinate is smaller than what we need, and the Y coordinate is larger. We will have to play around a bit to find a constant that we can use as a multiplier.

It’s a bit touch-and-feel, but I’ve found that `1.32` and `0.455` work perfectly for the X and Y coordinates, respectively. We multiply the offsets by those values, append a `px` unit on the result, then apply it to the `background-position` values.

    let container = document.querySelector("".container"");
    container.addEventListener(""mousemove"", function(e) {
        container.style.backgroundPositionX = -e.offsetX * 1.32 + ""px"";
        container.style.backgroundPositionY = -e.offsetY * 0.455 + ""px"";
      }
    );

Lastly, we can also reset the background positions back to the original if the user leaves the image container.

    container.addEventListener(""mouseleave"", function() {
        container.style.backgroundPosition = ""0px 0px"";
      }
    );

CodePen Embed Fallback

Since we’re on CSS-Tricks, I’ll offer that we could have done a much cheaper version of this with a little hover transition in vanilla CSS:

CodePen Embed Fallback

### [](#aa-paint-a-bigger-picture)Paint a bigger picture

No doubt you’ve been to some online clothing store or whatever and encountered the ol’ zoom-on-hover feature.

This pattern has been around for what feels like forever (Dylan Winn-Brown shared his approach [back in 2016](https://css-tricks.com/zooming-background-images/)), but that’s just a testament (I hope) to its usefulness. The user gets more context as they zoom in and get a better idea of a sweater’s stitching or what have you.

There’s two pieces to this: the **container** and the **magnifier**. The container is the only thing we need in the markup, as we’ll inject the magnifier element during the user’s interaction. So, behold our HTML!

    <div class=""container""></div>

​​In the CSS, we will create `width` and `height` variables to store the dimensions of the of the magnifier glass itself.  Then we’ll give that `.container`​ some shape and a `background-image`​:

    ​​:root {
    ​​  --magnifer-width: 85;
    ​​  --magnifer-height: 85;
    ​​}
    
    .container {
      width: 500px;
      height: 400px;
      background-size: cover;
      background-image: url(""/path/to/image.png"");
      background-repeat: no-repeat;
      position: relative;
    }

There are some things we already know about the magnifier before we even see it, and we can define those styles up-front, specifically the previously defined variables for the `.maginifier`‘s `width` and `height`:

    .magnifier {
      position: absolute;
      width: calc(var(--magnifer-width) * 1px);
    ​​  height: calc(var(--magnifer-height) * 1px);
    ​​  border: 3px solid #000;
    ​​  cursor: none;
    ​​  background-image: url(""/path/to/image.png"");
    ​​  background-repeat: no-repeat;
    }

It’s an absolutely-positioned little square that uses the _same_ background image file as the `.container`. Do note that the calc function is solely used here to convert the unit-less value in the variable to pixels. Feel free to arrange that however you see fit as far as eliminating repetition in your code.

Now, let’s turn to the JavaScript that pulls this all together. First we need to access the CSS variable defined earlier. We will use this in multiple places later on. Then we need get the mouse position within the container because that’s the value we’ll use for the the magnifier’s background position.

    ​​// Get the css variables
    ​​let root = window.getComputedStyle(document.documentElement);
    ​​let magnifier_width = root.getPropertyValue(""--magnifer-width"");
    ​​let magnifier_height = root.getPropertyValue(""--magnifer-height"");
    
    let container = document.querySelector("".container"");
    let rect = container.getBoundingClientRect();
    let x = (e.pageX - rect.left);
    let y = (e.pageY - rect.top);
    
    // Take page scrolling into account
    x = x - window.pageXOffset;
    y = y - window.pageYOffset;

What we need is basically a `mousemove` event listener on the `.container`. Then, we will use the `event.pageX` or `event.pageY` property to get the X or Y coordinate of the mouse. But to get the _exact_ relative position of the mouse on an element, we need to subtract the position of the parent element from the mouse position we get from the JavaScript above. A “simple” way to do this is to use `getBoundingClientRect()`, which returns the size of an element and its position relative to the viewport.

Notice how I’m taking scrolling into account. If there is overflow, subtracting the window `pageX` and `pageY` offsets will ensure the effect runs as expected.

We will first create the magnifier div. Next, we will create a `mousemove` function and add it to the image container. In this function, we will give the magnifier a class attribute. We will also calculate the mouse position and give the magnifier the left and top values we calculated earlier.

Let’s go ahead and build the `magnifier` when we hear a `mousemove` event on the `.container`:

    // create the magnifier
    let magnifier = document.createElement(""div"");
    container.append(magnifier);

Now we need to make sure it has a class name we can scope to the CSS:

    // run the function on `mousemove`
    container.addEventListener(""mousemove"", (e) => {
      magnifier.setAttribute(""class"", ""magnifier"");
    }

The example video I showed earlier positions the magnifier outside of the container. We’re gonna keep this simple and overlay it on top of the container instead as the mouse moves. We will use `if` statements to set the magnifier’s position only if the X and Y values are _greater_ or _equal_ to zero, and _less_ than the container’s width or height. That should keep it in bounds. Just be sure to subtract the width and height of the magnifier from the X and Y values.

    // Run the function on mouse move.
    container.addEventListener(""mousemove"", (e) => {
      magnifier.setAttribute(""class"", ""magnifier"");
    
      // Get mouse position
      let rect = container.getBoundingClientRect();
      let x = (e.pageX - rect.left);
      let y = (e.pageY - rect.top);
      
      // Take page scrolling into account
      x = x - window.pageXOffset;
      y = y - window.pageYOffset;
    
      // Prevent magnifier from exiting the container
      // Then set top and left values of magnifier
      if (x >= 0 && x <= container.clientWidth - magnifier_width) {
        magnifier.style.left = x + ""px"";
      }
      if (y >= 0 && y <= container.clientHeight - magnifier_height) {
        magnifier.style.top = y + ""px"";
      }
    });

Last, but certainly not least… we need to play with the magnifier’s background image a bit. The whole point is that the user gets a BIGGER view of the background image based on where the hover is taking place. So, let’s define a magnifier we can use to scale things up. Then we’ll define variables for the background image’s width and height so we have something to base that scale on, and set all of those values on the `.magnifier` styles:

    // Magnifier image configurations
    let magnify = 2;
    let imgWidth = 500;
    let imgHeight = 400;
    
    magnifier.style.backgroundSize = imgWidth * magnify + ""px "" + imgHeight * magnify + ""px"";

​​Let’s take the X and Y coordinates of the magnifier’s image and apply them to the `.magnifier`​ element’s `background-position`​. As before with the magnifier position, we need to subtract the width and height of the magnifier from the X and Y values using the CSS variables.

    // the x and y positions of the magnifier image
    let magnify_x = x * magnify + 15;
    let magnify_y = y * magnify + 15;
    
    // set backgroundPosition for magnifier if it is within image
    if (
      x <= container.clientWidth - magnifier_width &&
      y <= container.clientHeight - magnifier_height
    ) {
      magnifier.style.backgroundPosition = -magnify_x + ""px "" + -magnify_y + ""px"";
    }

Tada!

CodePen Embed Fallback

### [](#aa-make-it-cinematic)Make it cinematic

Have you seen the [Ken Burns effect](https://en.wikipedia.org/wiki/Ken_Burns_effect)? It’s classic and timeless thing where an image is bigger than the container it’s in, then sorta slides and scales slow as a slug. Just about every documentary film in the world seems to use it for image stills. If you have an Apple TV, then you’ve certainly seen it on the screen saver.

There are _plenty_ of [examples over at CodePen](https://codepen.io/search/pens?q=ken+burns+effect) if you wanna get a better idea.

You’ll see that there are a number of ways to approach this. Some use JavaScript. Others are 100% CSS. I’m sure the JavaScript approaches are good for some uses cases, but if the goal is simply to subtly scale the image, CSS is perfectly suitable.

CodePen Embed Fallback

We could spice things up a bit using multiple backgrounds rather than one. Or, better yet, if we expand the rules to use elements instead of background images, we can apply the same animation to all of the backgrounds and use a dash of `animation-delay` to stagger the effect.

CodePen Embed Fallback

Lots of ways to do this, of course! It can certainly be optimized with Sass and/or CSS variables. Heck, maybe you can pull it off with a single `<div>` If so, share it in the comments!

### [](#aa-bonus-make-it-immersive)Bonus: Make it immersive

I don’t know if anything is cooler than Sarah Drasner’s [“Happy Halloween” pen](https://codepen.io/sdras/pen/rMEdjB)… and that’s from 2016! It is a great example that layers backgrounds and moves them at varying speeds to create an almost cinematic experience. Good gosh is that cool!

GSAP is the main driver there, but I imagine we could make a boiled-down version that simply translates each background layer from left to right at different speeds. Not as cool, of course, but certainly the baseline experience. Gotta make sure the start and end of each background image is consistent so it repeats seamlessly when the animation repeats.

* * *

That’s it for now! Pretty neat that we can use backgrounds for much more than texture and contrast. I’m absolutely positive there are tons of other clever interactions we can apply to backgrounds. Temani Afif did exactly that with [a bunch of neat hover effects for links](https://css-tricks.com/cool-hover-effects-using-background-properties/). What do you have in mind? Share it with me in the comments!"
13,The truth about CSS selector performance,https://css-tricks.com/the-truth-about-css-selector-performance/,https://css-tricks.com/wp-content/uploads/2023/01/edge-devtools-selector-stats.png,Geoff Graham,1675738800000,,"[""DevTools"",""edge"",""performance""]","Geez, leave it to [Patrick Brosset to talk CSS performance](https://blogs.windows.com/msedgedev/2023/01/17/the-truth-about-css-selector-performance/) in the most approachable and practical way possible. Not that CSS is always [what’s gunking up the speed](https://csswizardry.com/2022/09/critical-css-not-so-fast/), or even the lowest hanging fruit when it comes to improving performance.

But _if_ you’re looking for gains on the CSS side of things, Patrick has a nice way of sniffing out your most expensive selectors using Edge DevTools:

*   Crack open DevTools.
*   Head to the Performance Tab.
*   Make sure you have the “Enable advanced rendering instrumentation” option enabled. This tripped me up in the process.
*   Record a page load.
*   Open up the “Bottom-Up” tab in the report.
*   Check out your the size of your recalculated styles.

![DevTools with Performance tab open and a summary of events.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/Screenshot-2023-01-24-at-9.32.16-AM.png?resize=2334%2C1600&ssl=1)

From here, click on one of the Recalculated Style events in the Main waterfall view and you’ll get a new “Selector Stats” tab. Look at all that gooey goodness!

![](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/Screenshot-2023-01-24-at-9.37.15-AM.png?resize=2334%2C1728&ssl=1)

Now you see all of the selectors that were processed and they can be sorted by how long they took, how many times they matched, the number of matching attempts, and something called “fast reject count” which [I learned](https://microsoftedge.github.io/DevTools/explainers/StyleTracing/explainer.html) is the number of elements that were easy and quick to eliminate from matching.

A lot of insights here if CSS is really the bottleneck that needs investigating. But read Patrick’s full post over on the Microsoft Edge Blog because he goes much deeper into the why’s and how’s, and walks through an entire case study.

[Direct Link →](https://blogs.windows.com/msedgedev/2023/01/17/the-truth-about-css-selector-performance/)"
14,The Double Emphasis Thing,https://css-tricks.com/the-double-emphasis-thing/,https://css-tricks.com/wp-content/uploads/2023/01/double-emphasis.jpg,Geoff Graham,1675652400000,,"[""emphasis"",""italic"",""semantics""]","I used to have this boss who _loved_, **loved**, **_loved_**, **_loved_** to emphasize words. This was way back before we used a WYSIWYG editors and I’d have to handcode that crap.

    <p>
      I used to have this boss who <em>loved</em>, <strong>loved</strong>, 
      <strong><em>loved</em></strong>, <strong><em><u>loved</u></em></strong> 
      to emphasize words.
    </p>

(Let’s not go into the colors he used for even **MOAR** emphasis.)

Writing all that markup never felt great. The effort it took, sure, whatever. But is it even a good idea to add overload content with double — or more! — emphases?

### [](#aa-different-tags-convey-different-emphasis)Different tags convey different emphasis

For starters, the `<strong>` and `<em>` tags are designed for different uses. We got them back in HTML5, where:

*   **`<strong>`:** Is used to convey [“strong importance, seriousness, or urgency for its contents”](https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-strong-element).
*   **`<em>`:** Represents [“stress emphasis”](https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-em-element).

So, `<strong>` gives the content more weight in the sense it suggests that the content in it is important or urgent. Think of a warning:

> **Warning:** The following content has been flagged for being awesome.

It might be tempting to reach for `<em>` to do the same thing. Italicized text can be attention-grabbing after all. But it’s really meant as a hint to use more emphasis when readingt the content in it. For example, here are two versions of the same sentence with the emphasis in different locations:

    <p>I ate the <em>entire</em> plate of burritos.</p>
    <p>I ate the entire <em>plate</em> of burritos.</p>

Both examples stress emphasis, but on different words. And they would sound different if you were to read them out loud. That makes `<em>` a great way to express tone in your writing. It changes the meaning of the sentence in a way that `<strong>` does not.

### [](#aa-visual-emphasis-vs-semantic-emphasis)Visual emphasis vs. semantic emphasis

Those are two things you gotta weigh when emphasizing content. Like, there are plenty of instances where you may need to italicize content without affecting the meaning of the sentence. But those can be handled with other tags that render italics:

*   **`<i>`:** This is the classic one! Before HTML5, this was used to stress emphasis with italics all over the place. Now, it’s purely used to italicize content visually without changing the semantic meaning.
*   **`<cite>`:** Indicating the source of a fact or figure. (“Source: CSS-Tricks“)
*   `**<address>**`: Used to mark up contact information, not only physical addresses, but things like email addresses and phone numbers too. (
    
    [\[email protected\]](/cdn-cgi/l/email-protection)
    
    )

It’s going to he the same thing with `<strong>`. Rather than using it for styling text you want to look heavier, it’s a better idea to use the classic `<b>` tag for boldfacing to avoid giving extra signficance to content that doesn’t need it. And remember, some elements like headings are already rendered in bold, thanks to the browser’s default styles. There’s no need to add even more strong emphasis.

### [](#aa-using-italics-in-emphasized-content-and-vice-versa)Using italics in emphasized content (and vice versa)

There are legitimate cases where you may need to italicize part of a line that’s already emphasized. Or maybe add emphasis to a bit of text that’s already italicized.

A blockquote might be a good example. I’ve seen plenty of times where they are italicized for style, even though default browser styles don’t do it:

    blockquote {
      font-style: italic;
    }

What if we need to mention a movie title in that blockquote? That should be italicized. There’s no stress emphasis needed, so an `<i>` tag will do. But it’s still weird to italicize something when it’s already rendered that way:

    <blockquote>
      This movie’s opening weekend performance offers some insight in
      to its box office momentum as it fights to justify its enormous 
      budget. In its first weekend, <i>Avatar: The Way of Water</i> made 
      $134 million in North America alone and $435 million globally.
    </blockquote>

In a situation where we’re italicizing something within italicized content like this, we’re supposed to _remove the italics_ from the nested element… `<i>` in this case.

    blockquote i {
      font-style: normal;
    }

[Container style queries](https://css-tricks.com/early-days-of-container-style-queries/) will be super useful to nab all these instances if we get them:

    blockquote {
      container-name: quote;
      font-style: italic;
    }
    
    @container quote (font-style: italic) {
      em, i, cite, address {
        font-style: normal;
      }
    }

This little snippet evaluates the blockquote to see if it’s `font-style` is set to `italic`. If it is, then it’ll make sure the `<em>`, `<i>`, `<cite>`, and `<address>` elements are rendered as normal text, while retaining the semantic meaning if there is one.

### [](#aa-but-back-to-emphasis-within-emphasis)But back to emphasis within emphasis

I wouldn’t nest `<strong>` inside `<em>` like this:

    <p>I ate the <em><strong>entire</strong></em> plate of burritos.</p>

…or nest `<em>` inside `<strong>` instead:

    <p>I ate the <em><strong>entire</strong></em> plate of burritos.</p>

The rendering is fine! And it doesn’t matter what order they’re in… at least in modern browsers. Jennifer Kyrnin mentions that [some browsers only render the tag nearest to the text](https://www.thoughtco.com/emphasis-tag-3468276), but I didn’t bump into that anywhere in my limited tests. But something to watch for!

The reason I wouldn’t nest one form of emphasis in another is because it simply isn’t needed. There is no grammar rule that calls for it. Like exclamation points, one form of emphasis is enough, and you ought to use the one that matches what you’re after whether it’s visual, weight, or announced emphasis.

And even though some screen readers are capable of announcing emphasized content, they won’t read the markup with any additional importance or emphasis. So, no additional accessibility perks either, as far as I can tell.

### [](#aa-but-i-really-want-all-the-emphasis)But I really want all the emphasis!

If you’re in the position where your boss is like mine and wants **ALL _the_ emphasis**, I’d reach for the right HTML tag for the type of emphasis, then apply the rest of the styles with a mix of tags that don’t affect semantics with CSS to help account for anything browser styles won’t handle.

    <style>
      /* If `em` contains `b` or `u` tags */
      em:has(b, u) {
        color: #f8a100;
      }
    </style>
    
    <p>
      I used to have this boss who <em>loved</em>, <strong>loved</strong>, 
      <strong><em>loved</em></strong>, <strong><em><u>loved</u></em></strong> 
      to emphasize words.
    </p>

I might even do it with the `<strong>` tag too as a defensive measure:

    /* If `em` contains `b` or `u` tags */
    em:has(b, u),
    /* If `strong` contains `em` or `u` tags */
    strong:has(i, u) {
      color: #f8a100;
    }

As long as we’re playing defense, we can identify errors where emphases are nested within emphases by highlighting them in red or something:

    /* Highlight semantic emphases within semantic emphases */
    em:has(strong),
    strong:has(em) {
      background: hsl(0deg 50% 50% / .25);
      border: 1px dashed hsl(0deg 50% 50% / .25);
    }

Then I’d probably use that snippet from the last section that removes the default italic styling from an element when it is nested in another italiczed element.

### [](#aa-anything-else)Anything else?

Mayyyyybe:

*   Make sure your webfont includes bold and italic variations — otherwise, you’ll be relying on [the browser to try to bold or italicize text for you](https://css-tricks.com/watch-your-font-weight/). But limit your font files to just the weights and styles you need for better performance.
*   Consider re-writing the content if the formatting seems off. [There are natural ways to phrase content so that certain bits gain emphasis.](https://www.grammarly.com/blog/sentence-emphasis/)
*   Check your analytics for the browsers your visitors use and test accordingly. Even though I didn’t run into a browser that balked at `<strong>` in `<em>` or the other way around, there may be a browser or several that will."
15,A Fancy Hover Effect For Your Avatar,https://css-tricks.com/a-fancy-hover-effect-for-your-avatar/,https://css-tricks.com/wp-content/uploads/2023/02/featured-image-avatar.png,Temani Afif,1675393200000,,"[""gradients"",""hover"",""mask"",""scale""]","Do you know that kind of effect where someone’s head is poking through a circle or hole? The famous Porky Pig animation where he waves goodbye while popping out of a series of red rings is the perfect example, and [Kilian Valkhof actually re-created that here on CSS-Tricks a while back](https://css-tricks.com/re-creating-the-porky-pig-animation-from-looney-tunes-in-css/).

I have a similar idea but tackled a different way and with a sprinkle of animation. I think it’s pretty practical and makes for a neat hover effect you can use on something like your own avatar.

CodePen Embed Fallback

See that? We’re going to make a scaling animation where the avatar seems to pop right out of the circle it’s in. Cool, right? Don’t look at the code and let’s build this animation together step-by-step.

### [](#aa-the-html-just-one-element)The HTML: Just one element

If you haven’t checked the code of the demo and you are wondering how many `div`s this’ll take, then stop right there, because our markup is nothing but a single image element:

    <img src="""" alt="""">

Yes, a single element! The challenging part of this exercise is using the smallest amount of code possible. If you have been [following me](https://css-tricks.com/author/afiftemani/) for a while, you should be used to this. I try hard to find CSS solutions that can be achieved with the smallest, most maintainable code possible.

I wrote [a series of articles](https://css-tricks.com/fancy-image-decorations-single-element-magic/) here on CSS-Tricks where I explore different hover effects using the same HTML markup containing a single element. I go into detail on gradients, masking, clipping, outlines, and even layout techniques. I highly recommend checking those out because I will re-use many of the tricks in this post.

An image file that’s square with a transparent background will work best for what we’re doing. Here’s the one I’m using if you want start with that.

![](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_4BDCAE75E12C1EF4B0F3D6ACE87A49C2ED374481A0BCA5961B57D20797041FE3_1673429708961_av1.png?resize=200%2C200&ssl=1)

Designed by [Cang](https://pngtree.com/freepng/3d-render-male-avatar-with-blue-sweater-good-for-profile-picture_7497855.html)

I’m hoping to see lots of examples of this as possible using real images — so please share your final result in the comments when you’re done so we can build a collection!

Before jumping into CSS, let’s first dissect the effect. The image gets bigger on hover, so we’ll for sure use `transform: scale()` in there. There’s a circle behind the avatar, and a radial gradient should do the trick. Finally, we need a way to create a border at the bottom of the circle that creates the appearance of the avatar behind the circle.

Let’s get to work!

### [](#aa-the-scale-effect)The scale effect

Let’s start by adding the transform:

    img {
      width: 280px;
      aspect-ratio: 1;
      cursor: pointer;
      transition: .5s;
    }
    img:hover {
      transform: scale(1.35);
    }

CodePen Embed Fallback

Nothing complicated yet, right? Let’s move on.

### [](#aa-the-circle)The circle

We said that the background would be a radial gradient. That’s perfect because we can create hard stops between the colors of a radial gradient, which make it look like we’re drawing a circle with solid lines.

    img {
      --b: 5px; /* border width */
    
      width: 280px;
      aspect-ratio: 1;
      background:
        radial-gradient(
          circle closest-side,
          #ECD078 calc(99% - var(--b)),
          #C02942 calc(100% - var(--b)) 99%,
          #0000
        );
      cursor: pointer;
      transition: .5s;
    }
    img:hover {
      transform: scale(1.35);
    }

Note the CSS variable, `--b`, I’m using there. It represents the thickness of the “border” which is really just being used to define the hard color stops for the red part of the radial gradient.

CodePen Embed Fallback

The next step is to play with the gradient size on hover. The circle needs to keep its size as the image grows. Since we are applying a `scale()` transformation, we actually need to _decrease_ the size of the circle because it otherwise scales up with the avatar. So, while the image scales up, we need the gradient to scale down.

Let’s start by defining a CSS variable, `--f`, that defines the “scale factor”, and use it to set the size of the circle. I’m using `1` as the default value, as in that’s the initial scale for the image and the circle that we transform from.

Here is a demo to illustrate the trick. Hover to see what is happening behind the scenes:

CodePen Embed Fallback

I added a third color to the `radial-gradient` to better identify the area of the gradient on hover:

    radial-gradient(
      circle closest-side,
      #ECD078 calc(99% - var(--b)),
      #C02942 calc(100% - var(--b)) 99%,
      lightblue
    );

Now we have to position our background at the center of the circle and make sure it takes up the full height. I like to declare everything directly on the `background` shorthand property, so we can add our background positioning and make sure it doesn’t repeat by tacking on those values right after the `radial-gradient()`:

    background: radial-gradient() 50% / calc(100% / var(--f)) 100% no-repeat;

The background is placed at the center (`50%`), has a width equal to `calc(100%/var(--f))`, and has a height equal to `100%`.

Nothing scales when `--f` is equal to `1` — again, our initial scale. Meanwhile, the gradient takes up the full width of the container. When we increase `--f`, the element’s size grows — thanks to the `scale()` transform — and the gradient’s size decreases.

Here’s what we get when we apply all of this to our demo:

CodePen Embed Fallback

We’re getting closer! We have the overflow effect at the top, but we still need to hide the bottom part of the image, so it looks like it is popping out of the circle rather than sitting in front of it. That’s the tricky part of this whole thing and is what we’re going to do next.

### [](#aa-the-bottom-border)The bottom border

I first tried tackling this with the `border-bottom` property, but I was unable to find a way to match the size of the border to the size to the circle. Here’s the best I could get and you can immediately see it’s wrong:

CodePen Embed Fallback

The actual solution is to use the `outline` property. Yes, `outline`, not `border`. In [a previous article](https://css-tricks.com/fancy-image-decorations-outlines-and-complex-animations/), I show how `outline` is powerful and allows us to create cool hover effects. Combined with `outline-offset`, we have exactly what we need for our effect.

The idea is to set an `outline` on the image and adjust its offset to create the bottom border. The offset will depend on the scaling factor the same way the gradient size did.

CodePen Embed Fallback

Now we have our bottom “border” (actually an `outline`) combined with the “border” created by the gradient to create a full circle. We still need to hide portions of the `outline` (from the top and the sides), which we’ll get to in a moment.

Here’s our code so far, including a couple more CSS variables you can use to configure the image size (`--s`) and the “border” color (`--c`):

    img {
      --s: 280px; /* image size */
      --b: 5px; /* border thickness */
      --c: #C02942; /* border color */
      --f: 1; /* initial scale */
    
      width: var(--s);
      aspect-ratio: 1;
      cursor: pointer;
      border-radius: 0 0 999px 999px;
      outline: var(--b) solid var(--c);
      outline-offset: calc((1 / var(--f) - 1) * var(--s) / 2 - var(--b));
      background: 
        radial-gradient(
          circle closest-side,
          #ECD078 calc(99% - var(--b)),
          var(--c) calc(100% - var(--b)) 99%,
          #0000
        ) 50% / calc(100% / var(--f)) 100% no-repeat;
      transform: scale(var(--f));
      transition: .5s;
    }
    img:hover {
      --f: 1.35; /* hover scale */
    }

Since we need a circular bottom border, we added a `border-radius` on the bottom side, allowing the `outline` to match the curvature of the gradient.

The calculation used on `outline-offset` is a lot more straightforward than it looks. By default, `outline` is drawn _outside_ of the element’s box. And in our case, we need it to _overlap_ the element. More precisely, we need it to follow the circle created by the gradient.

![Diagram of the background transition.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_4BDCAE75E12C1EF4B0F3D6ACE87A49C2ED374481A0BCA5961B57D20797041FE3_1673437632687_image.png?resize=727%2C569&ssl=1)

When we scale the element, we see the space between the circle and the edge. Let’s not forget that the idea is to keep the circle at the same size after the scale transformation runs, which leaves us with the space we will use to define the outline’s offset as illustrated in the above figure.

Let’s not forget that the second element is scaled, so our result is also scaled… which means we need to divide the result by `f` to get the real offset value:

    Offset = ((f - 1) * S/2) / f = (1 - 1/f) * S/2

We add a negative sign since we need the outline to go from the outside to the inside:

    Offset = (1/f - 1) * S/2

Here’s a quick demo that shows how the outline follows the gradient:

CodePen Embed Fallback

You may already see it, but we still need the bottom outline to overlap the circle rather than letting it bleed through it. We can do that by removing the border’s size from the offset:

    outline-offset: calc((1 / var(--f) - 1) * var(--s) / 2) - var(--b));

CodePen Embed Fallback

Now we need to find how to remove the top part from the outline. In other words, we only want the bottom part of the image’s `outline`.

First, let’s add space at the top with padding to help avoid the overlap at the top:

    img {
      --s: 280px; /* image size */
      --b: 5px;   /* border thickness */
      --c: #C02942; /* border color */
      --f: 1; /* initial scale */
    
      width: var(--s);
      aspect-ratio: 1;
      padding-block-start: calc(var(--s)/5);
      /* etc. */
    }
    img:hover {
      --f: 1.35; /* hover scale */
    }

CodePen Embed Fallback

There is no particular logic to that top padding. The idea is to ensure the outline doesn’t touch the avatar’s head. I used the element’s size to define that space to always have the same proportion.

Note that I have added the `content-box` value to the `background`:

    background:
      radial-gradient(
        circle closest-side,
        #ECD078 calc(99% - var(--b)),
        var(--c) calc(100% - var(--b)) 99%,
        #0000
      ) 50%/calc(100%/var(--f)) 100% no-repeat content-box;

We need this because we added padding and we only want the background set to the content box, so we must explicitly tell the background to stop there.

### [](#aa-adding-css-mask-to-the-mix)Adding CSS mask to the mix

We reached the last part! All we need to do is to hide some pieces, and we are done. For this, we will rely on the `mask` property and, of course, gradients.

Here is a figure to illustrate what we need to hide or what we need to show to be more accurate

![Showing how the mask applies to the bottom portion of the circle.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_4BDCAE75E12C1EF4B0F3D6ACE87A49C2ED374481A0BCA5961B57D20797041FE3_1673443822002_image.png?resize=932%2C526&ssl=1)

The left image is what we currently have, and the right is what we want. The green part illustrates the mask we must apply to the original image to get the final result.

We can identify two parts of our mask:

*   A circular part at the bottom that has the same dimension and curvature as the radial gradient we used to create the circle behind the avatar
*   A rectangle at the top that covers the area inside the outline. Notice how the outline is outside the green area at the top — that’s the most important part, as it allows the outline to be cut so that only the bottom part is visible.

Here’s our final CSS:

    img {
      --s: 280px; /* image size */
      --b: 5px; /* border thickness */
      --c: #C02942; /* border color */
      --f: 1; /* initial scale */
    
      --_g: 50% / calc(100% / var(--f)) 100% no-repeat content-box;
      --_o: calc((1 / var(--f) - 1) * var(--s) / 2 - var(--b));
    
      width: var(--s);
      aspect-ratio: 1;
      padding-top: calc(var(--s)/5);
      cursor: pointer;
      border-radius: 0 0 999px 999px;
      outline: var(--b) solid var(--c);
      outline-offset: var(--_o);
      background: 
        radial-gradient(
          circle closest-side,
          #ECD078 calc(99% - var(--b)),
          var(--c) calc(100% - var(--b)) 99%,
          #0000) var(--_g);
      mask:
        linear-gradient(#000 0 0) no-repeat
        50% calc(-1 * var(--_o)) / calc(100% / var(--f) - 2 * var(--b)) 50%,
        radial-gradient(
          circle closest-side,
          #000 99%,
          #0000) var(--_g);
      transform: scale(var(--f));
      transition: .5s;
    }
    img:hover {
      --f: 1.35; /* hover scale */
    }

Let’s break down that `mask` property. For starters, notice that a similar `radial-gradient()` from the `background` property is in there. I created a new variable, `--_g`, for the common parts to make things less cluttered.

    --_g: 50% / calc(100% / var(--f)) 100% no-repeat content-box;
    
    mask:
      radial-gradient(
        circle closest-side,
        #000 99%,
        #0000) var(--_g);

Next, there’s a `linear-gradient()` in there as well:

    --_g: 50% / calc(100% / var(--f)) 100% no-repeat content-box;
    
    mask:
      linear-gradient(#000 0 0) no-repeat
        50% calc(-1 * var(--_o)) / calc(100% / var(--f) - 2 * var(--b)) 50%,
      radial-gradient(
        circle closest-side,
        #000 99%,
        #0000) var(--_g);

This creates the rectangle part of the mask. Its width is equal to the radial gradient’s width minus twice the border thickness:

    calc(100% / var(--f) - 2 * var(--b))

The rectangle’s height is equal to half, `50%`, of the element’s size.

We also need the linear gradient placed at the horizontal center (`50%`) and offset from the top by the same value as the outline’s offset. I created another CSS variable, `--_o`, for the offset we previously defined:

    --_o: calc((1 / var(--f) - 1) * var(--s) / 2 - var(--b));

One of the confusing things here is that we need a _negative_ offset for the outline (to move it from outside to inside) but a _positive_ offset for the gradient (to move from top to bottom). So, if you’re wondering why we multiply the offset, `--_o`, by `-1`, well, now you know!

Here is a demo to illustrate the mask’s gradient configuration:

CodePen Embed Fallback

Hover the above and see how everything move together. The middle box illustrates the mask layer composed of two gradients. Imagine it as the visible part of the left image, and you get the final result on the right!

### [](#aa-wrapping-up)Wrapping up

Oof, we’re done! And not only did we wind up with a slick hover animation, but we did it all with a single HTML `<img>` element. Just that and less than 20 lines of CSS trickery!

Sure, we relied on some little tricks and math formulas to reach such a complex effect. But we knew exactly what to do since we identified the pieces we needed up-front.

Could we have simplified the CSS if we allowed ourselves more HTML? Absolutely. But we’re here to learn new CSS tricks! This was a good exercise to explore CSS gradients, masking, the `outline` property’s behavior, transformations, and a whole bunch more. If you felt lost at any point, then definitely check out [my series](https://css-tricks.com/fancy-image-decorations-single-element-magic/) that uses the same general concepts. It sometimes helps to see more examples and use cases to drive a point home.

I will leave you with one last demo that uses photos of popular CSS developers. Don’t forget to show me a demo with your own image so I can add it to the collection!

CodePen Embed Fallback"
16,Caching Data in SvelteKit,https://css-tricks.com/caching-data-in-sveltekit/,https://css-tricks.com/wp-content/uploads/2023/01/svelte-cache.png,Adam Rackis,1675220400000,,"[""cache"",""svelte"",""sveltekit""]","My [previous post](https://css-tricks.com/getting-started-with-sveltekit) was a broad overview of SvelteKit where we saw what a great tool it is for web development. This post will fork off what we did there and dive into every developer’s favorite topic: **caching**. So, be sure to give my last post a read if you haven’t already. The code for this post [is available on GitHub](https://github.com/arackaf/sveltekit-blog-2-caching), as well as [a live demo](https://sveltekit-blog-2-caching.vercel.app/).

This post is all about data handling. We’ll add some rudimentary search functionality that will modify the page’s query string (using built-in SvelteKit features), and re-trigger the page’s loader. But, rather than just re-query our (imaginary) database, we’ll add some caching so re-searching prior searches (or using the back button) will show previously retrieved data, quickly, from cache. We’ll look at how to control the length of time the cached data stays valid and, more importantly, how to manually invalidate all cached values. As icing on the cake, we’ll look at how we can manually update the data on the current screen, client-side, after a mutation, while still purging the cache.

This will be a longer, more difficult post than most of what I usually write since we’re covering harder topics. This post will essentially show you how to implement common features of popular data utilities like [react-query](https://www.npmjs.com/package/react-query); but instead of pulling in an external library, we’ll only be using the web platform and SvelteKit features.

Unfortunately, the web platform’s features are a bit lower level, so we’ll be doing a bit more work than you might be used to. The upside is we won’t need any external libraries, which will help keep bundle sizes nice and small. **Please don’t use the approaches I’m going to show you unless you have a good reason to.** Caching is easy to get wrong, and as you’ll see, there’s a bit of complexity that’ll result in your application code. Hopefully your data store is fast, and your UI is fine allowing SvelteKit to just always request the data it needs for any given page. If it is, leave it alone. Enjoy the simplicity. But this post will show you some tricks for when that stops being the case.

Speaking of react-query, it [was just released](https://tanstack.com/query/v4/docs/svelte/overview) for Svelte! So if you find yourself leaning on manual caching techniques _a lot_, be sure to check that project out, and see if it might help.

### [](#aa-setting-up)Setting up

Before we start, let’s make a few small changes to [the code we had before](http://todo). This will give us an excuse to see some other SvelteKit features and, more importantly, set us up for success.

First, let’s move our data loading from our loader in `+page.server.js` to an [API route](https://kit.svelte.dev/docs/routing#server). We’ll create a `+server.js` file in `routes/api/todos`, and then add a `GET` function. This means we’ll now be able to fetch (using the default GET verb) to the `/api/todos` path. We’ll add the same data loading code as before.

    import { json } from ""@sveltejs/kit"";
    import { getTodos } from ""$lib/data/todoData"";
    
    export async function GET({ url, setHeaders, request }) {
      const search = url.searchParams.get(""search"") || """";
    
      const todos = await getTodos(search);
    
      return json(todos);
    }

Next, let’s take the page loader we had, and simply rename the file from `+page.server.js` to `+page.js` (or `.ts` if you’ve scaffolded your project to use TypeScript). This changes our loader to be a “universal” loader rather than a server loader. The SvelteKit docs [explain the difference](https://kit.svelte.dev/docs/load#universal-vs-server), but a universal loader runs on both the server and also the client. One advantage for us is that the `fetch` call into our new endpoint will run right from our browser (after the initial load), using the browser’s native `fetch` function. We’ll add standard HTTP caching in a bit, but for now, all we’ll do is call the endpoint.

    export async function load({ fetch, url, setHeaders }) {
      const search = url.searchParams.get(""search"") || """";
    
      const resp = await fetch(`/api/todos?search=${encodeURIComponent(search)}`);
    
      const todos = await resp.json();
    
      return {
        todos,
      };
    }

Now let’s add a simple form to our `/list` page:

    <div class=""search-form"">
      <form action=""/list"">
        <label>Search</label>
        <input autofocus name=""search"" />
      </form>
    </div>

Yep, forms can target directly to our normal page loaders. Now we can add a search term in the search box, hit Enter, and a “search” term will be appended to the URL’s query string, which will re-run our loader and search our to-do items.

![Search form](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/img1-search-form.jpg?resize=890%2C230&ssl=1)

Let’s also increase the delay in our `todoData.js` file in `/lib/data`. This will make it easy to see when data are and are not cached as we work through this post.

    export const wait = async amount => new Promise(res => setTimeout(res, amount ?? 500));

Remember, the full code for this post is [all on GitHub](https://github.com/arackaf/sveltekit-blog-2-caching), if you need to reference it.

### [](#aa-basic-caching)Basic caching

Let’s get started by adding some caching to our `/api/todos` endpoint. We’ll go back to our `+server.js` file and add our first cache-control header.

    setHeaders({
      ""cache-control"": ""max-age=60"",
    });

…which will leave the whole function looking like this:

    export async function GET({ url, setHeaders, request }) {
      const search = url.searchParams.get(""search"") || """";
    
      setHeaders({
        ""cache-control"": ""max-age=60"",
      });
    
      const todos = await getTodos(search);
    
      return json(todos);
    }

We’ll look at manual invalidation shortly, but all this function says is to cache these API calls for 60 seconds. [Set this to whatever you want](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control), and depending on your use case, [`stale-while-revalidate`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control/#stale-while-revalidate) might also be worth looking into.

And just like that, our queries are caching.

![Cache in DevTools.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/img2-caching.jpg?resize=1254%2C434&ssl=1)

**Note** make sure you **un-check** the checkbox that disables caching in dev tools.

Remember, if your initial navigation on the app is the list page, those search results will be cached internally to SvelteKit, so don’t expect to see anything in DevTools when returning to that search.

#### [](#aa-what-is-cached-and-where)What is cached, and where

Our very first, server-rendered load of our app (assuming we start at the `/list` page) will be fetched on the server. SvelteKit will serialize and send this data down to our client. What’s more, it will observe the [`Cache-Control` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) on the response, and will know to use this cached data for that endpoint call within the cache window (which we set to 60 seconds in put example).

After that initial load, when you start searching on the page, you should see network requests from your browser to the `/api/todos` list. As you search for things you’ve already searched for (within the last 60 seconds), the responses should load immediately since they’re cached.

What’s especially cool with this approach is that, since this is caching via the browser’s native caching, these calls could (depending on how you manage the cache busting we’ll be looking at) continue to cache even if you reload the page (unlike the initial server-side load, which always calls the endpoint fresh, even if it did it within the last 60 seconds).

Obviously data can change anytime, so we need a way to purge this cache manually, which we’ll look at next.

### [](#aa-cache-invalidation)Cache invalidation

Right now, data will be cached for 60 seconds. No matter what, after a minute, fresh data will be pulled from our datastore. You might want a shorter or longer time period, but what happens if you mutate some data and want to clear your cache immediately so your next query will be up to date? We’ll solve this by adding a query-busting value to the URL we send to our new `/todos` endpoint.

Let’s store this cache busting value in a cookie. That value can be set on the server but still read on the client. Let’s look at some sample code.

We can create a `+layout.server.js` file at the very root of our `routes` folder. This will run on application startup, and is a perfect place to set an initial cookie value.

    export function load({ cookies, isDataRequest }) {
      const initialRequest = !isDataRequest;
    
      const cacheValue = initialRequest ? +new Date() : cookies.get(""todos-cache"");
    
      if (initialRequest) {
        cookies.set(""todos-cache"", cacheValue, { path: ""/"", httpOnly: false });
      }
    
      return {
        todosCacheBust: cacheValue,
      };
    }

You may have noticed the `isDataRequest` value. Remember, layouts will re-run anytime client code calls `invalidate()`, or anytime we run a server action (assuming we don’t turn off default behavior). `isDataRequest` indicates those re-runs, and so we only set the cookie if that’s `false`; otherwise, we send along what’s already there.

The `httpOnly: false` flag is also significant. This allows our client code to read these cookie values in `document.cookie`. This would normally be a security concern, but in our case these are meaningless numbers that allow us to cache or cache bust.

#### [](#aa-reading-cache-values)Reading cache values

Our universal loader is what calls our `/todos` endpoint. This runs on the server or the client, and we need to read that cache value we just set up no matter where we are. It’s relatively easy if we’re on the server: we can call `await parent()` to get the data from parent layouts. But on the client, we’ll need to use some gross code to parse `document.cookie`:

    export function getCookieLookup() {
      if (typeof document !== ""object"") {
        return {};
      }
    
      return document.cookie.split(""; "").reduce((lookup, v) => {
        const parts = v.split(""="");
        lookup[parts[0]] = parts[1];
    
        return lookup;
      }, {});
    }
    
    const getCurrentCookieValue = name => {
      const cookies = getCookieLookup();
      return cookies[name] ?? """";
    };

Fortunately, we only need it once.

#### [](#aa-sending-out-the-cache-value)Sending out the cache value

But now we need to _send_ this value to our `/todos` endpoint.

    import { getCurrentCookieValue } from ""$lib/util/cookieUtils"";
    
    export async function load({ fetch, parent, url, setHeaders }) {
      const parentData = await parent();
    
      const cacheBust = getCurrentCookieValue(""todos-cache"") || parentData.todosCacheBust;
      const search = url.searchParams.get(""search"") || """";
    
      const resp = await fetch(`/api/todos?search=${encodeURIComponent(search)}&cache=${cacheBust}`);
      const todos = await resp.json();
    
      return {
        todos,
      };
    }

`getCurrentCookieValue('todos-cache')` has a check in it to see if we’re on the client (by checking the type of document), and returns nothing if we are, at which point we know we’re on the server. Then it uses the value from our layout.

#### [](#aa-busting-the-cache)Busting the cache

But _how_ do we actually update that cache busting value when we need to? Since it’s stored in a cookie, we can call it like this from any server action:

    cookies.set(""todos-cache"", cacheValue, { path: ""/"", httpOnly: false });

### [](#aa-the-implementation)The implementation

It’s all downhill from here; we’ve done the hard work. We’ve covered the various web platform primitives we need, as well as where they go. Now let’s have some fun and write application code to tie it all together.

For reasons that’ll become clear in a bit, let’s start by adding an editing functionality to our `/list` page. We’ll add this second table row for each todo:

    import { enhance } from ""$app/forms"";

    <tr>
      <td colspan=""4"">
        <form use:enhance method=""post"" action=""?/editTodo"">
          <input name=""id"" value=""{t.id}"" type=""hidden"" />
          <input name=""title"" value=""{t.title}"" />
          <button>Save</button>
        </form>
      </td>
    </tr>

And, of course, we’ll need to add a form action for our `/list` page. Actions can only go in `.server` pages, so we’ll add a `+page.server.js` in our `/list` folder. (Yes, a `+page.server.js` file can co-exist next to a `+page.js` file.)

    import { getTodo, updateTodo, wait } from ""$lib/data/todoData"";
    
    export const actions = {
      async editTodo({ request, cookies }) {
        const formData = await request.formData();
    
        const id = formData.get(""id"");
        const newTitle = formData.get(""title"");
    
        await wait(250);
        updateTodo(id, newTitle);
    
        cookies.set(""todos-cache"", +new Date(), { path: ""/"", httpOnly: false });
      },
    };

We’re grabbing the form data, forcing a delay, updating our todo, and then, most importantly, clearing our cache bust cookie.

Let’s give this a shot. Reload your page, then edit one of the to-do items. You should see the table value update after a moment. If you look in the Network tab in DevToold, you’ll see a fetch to the `/todos` endpoint, which returns your new data. Simple, and works by default.

![Saving data](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/img3-saved.jpg?resize=1540%2C762&ssl=1)

### [](#aa-immediate-updates)Immediate updates

What if we want to avoid that fetch that happens after we update our to-do item, and instead, update the modified item right on the screen?

This isn’t just a matter of performance. If you search for “post” and then remove the word “post” from any of the to-do items in the list, they’ll vanish from the list after the edit since they’re no longer in that page’s search results. You could make the UX better with some tasteful animation for the exiting to-do, but let’s say we wanted to _not_ re-run that page’s load function but still clear the cache and update the modified to-do so the user can see the edit. SvelteKit makes that possible — let’s see how!

First, let’s make one little change to our loader. Instead of returning our to-do items, let’s return a [writeable store](https://svelte.dev/docs#run-time-svelte-store-writable) containing our to-dos.

    return {
      todos: writable(todos),
    };

Before, we were accessing our to-dos on the `data` prop, which we do not own and cannot update. But Svelte lets us return our data in their own store (assuming we’re using a universal loader, which we are). We just need to make one more tweak to our `/list` page.

Instead of this:

    {#each todos as t}

…we need to do this since `todos` is itself now a store.:

    {#each $todos as t}

Now our data loads as before. But since `todos` is a writeable store, we can update it.

First, let’s provide a function to our `use:enhance` attribute:

    <form
      use:enhance={executeSave}
      on:submit={runInvalidate}
      method=""post""
      action=""?/editTodo""
    >

This will run before a submit. Let’s write that next:

    function executeSave({ data }) {
      const id = data.get(""id"");
      const title = data.get(""title"");
    
      return async () => {
        todos.update(list =>
          list.map(todo => {
            if (todo.id == id) {
              return Object.assign({}, todo, { title });
            } else {
              return todo;
            }
          })
        );
      };
    }

This function provides a `data` object with our form data. We _return_ an async function that will run _after_ our edit is done. [The docs](https://kit.svelte.dev/docs/form-actions#progressive-enhancement-use-enhance) explain all of this, but by doing this, we shut off SvelteKit’s default form handling that would have re-run our loader. This is exactly what we want! (We could easily get that default behavior back, as the docs explain.)

We now call `update` on our `todos` array since it’s a store. And that’s that. After editing a to-do item, our changes show up immediately and our cache is cleared (as before, since we set a new cookie value in our `editTodo` form action). So, if we search and then navigate back to this page, we’ll get fresh data from our loader, which will correctly exclude any updated to-do items that were updated.

The code for the immediate updates [is available at GitHub](https://github.com/arackaf/sveltekit-blog-2-caching/tree/feature/immediate-updates).

#### [](#aa-digging-deeper)Digging deeper

We can set cookies in any server load function (or server action), not just the root layout. So, if some data are only used underneath a single layout, or even a single page, you could set that cookie value there. Moreoever, if you’re _not_ doing the trick I just showed manually updating on-screen data, and instead want your loader to re-run after a mutation, then you could always set a new cookie value right in that load function without any check against `isDataRequest`. It’ll set initially, and then anytime you run a server action that page layout will automatically invalidate and re-call your loader, re-setting the cache bust string before your universal loader is called.

### [](#aa-writing-a-reload-function)Writing a reload function

Let’s wrap-up by building one last feature: a reload button. Let’s give users a button that will clear cache and then reload the current query.

We’ll add a dirt simple form action:

    async reloadTodos({ cookies }) {
      cookies.set('todos-cache', +new Date(), { path: '/', httpOnly: false });
    },

In a real project you probably wouldn’t copy/paste the same code to set the same cookie in the same way in multiple places, but for this post we’ll optimize for simplicity and readability.

Now let’s create a form to post to it:

    <form method=""POST"" action=""?/reloadTodos"" use:enhance>
      <button>Reload todos</button>
    </form>

That works!

![UI after reload.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/img6-reload.jpg?resize=1468%2C244&ssl=1)

We could call this done and move on, but let’s improve this solution a bit. Specifically, let’s provide feedback on the page to tell the user the reload is happening. Also, by default, SvelteKit actions invalidate _everything_. Every layout, page, etc. in the current page’s hierarchy would reload. There might be some data that’s loaded once in the root layout that we don’t need to invalidate or re-load.

So, let’s focus things a bit, and only reload our to-dos when we call this function.

First, let’s pass a function to enhance:

    <form method=""POST"" action=""?/reloadTodos"" use:enhance={reloadTodos}>

    import { enhance } from ""$app/forms"";
    import { invalidate } from ""$app/navigation"";
    
    let reloading = false;
    const reloadTodos = () => {
      reloading = true;
    
      return async () => {
        invalidate(""reload:todos"").then(() => {
          reloading = false;
        });
      };
    };

We’re setting a new `reloading` variable to `true` at the _start_ of this action. And then, in order to override the default behavior of invalidating everything, we return an `async` function. This function will run when our server action is finished (which just sets a new cookie).

Without this `async` function returned, SvelteKit would invalidate everything. Since we’re providing this function, it will invalidate nothing, so it’s up to us to tell it what to reload. We do this with the `invalidate` function. We call it with a value of `reload:todos`. This function returns a promise, which resolves when the invalidation is complete, at which point we set `reloading` back to `false`.

Lastly, we need to sync our loader up with this new `reload:todos` invalidation value. We do that in our loader with the `depends` function:

    export async function load({ fetch, url, setHeaders, depends }) {
        depends('reload:todos');
    
      // rest is the same

And that’s that. `depends` and `invalidate` are incredibly useful functions. What’s cool is that `invalidate` doesn’t just take arbitrary values we provide like we did. We can also provide a URL, which SvelteKit will track, and invalidate any loaders that depend on that URL. To that end, if you’re wondering whether we could skip the call to `depends` and invalidate our `/api/todos` endpoint altogether, you can, but you have to provide the _exact_ URL, including the `search` term (and our cache value). So, you could either put together the URL for the current search, or match on the path name, like this:

    invalidate(url => url.pathname == ""/api/todos"");

Personally, I find the solution that uses `depends` more explicit and simple. But see [the docs](https://kit.svelte.dev/docs/load#invalidation) for more info, of course, and decide for yourself.

If you’d like to see the reload button in action, the code for it is in [this branch of the repo](https://github.com/arackaf/sveltekit-blog-2-caching/tree/feature/reload-button).

### [](#aa-parting-thoughts)Parting thoughts

This was a long post, but hopefully not overwhelming. We dove into various ways we can cache data when using SvelteKit. Much of this was just a matter of using web platform primitives to add the correct cache, and cookie values, knowledge of which will serve you in web development in general, beyond just SvelteKit.

Moreover, this is something you absolutely _do not need all the time_. Arguably, you should only reach for these sort of advanced features when you **actually need them**. If your datastore is serving up data quickly and efficiently, and you’re not dealing with any kind of scaling problems, there’s no sense in bloating your application code with needless complexity doing the things we talked about here.

As always, write clear, clean, simple code, and optimize when necessary. The purpose of this post was to provide you those optimization tools for when you truly need them. I hope you enjoyed it!"
17,WordPress Global Styles Reference Tables,https://css-tricks.com/wordpress-global-styles-reference-tables/,https://css-tricks.com/wp-content/uploads/2023/02/guide-wordpress-block-theme-css.jpg,Ganesh Dahal,1675134000000,1677628800000,"[""json"",""WordPress"",""WordPress blocks"",""wordpress themes""]","The following information is based on the WordPress documentation for ease of reference only. At the time of writing, Global Styles (theme.json) and user interface customizations are being actively developed. And, of course, all of this is still very much in active development. If you notice something has changed or is incorrect, please let me know in the comments!

#### [](#aa-wordpress-block-theme-css-and-style-settings-guide)WordPress Block Theme CSS and Style Settings Guide

*   [Introduction](https://css-tricks.com/wordpress-block-theme-guide/)
*   [Glossary of Terms for `theme.json`](https://css-tricks.com/glossary-of-terms-for-theme-json/)
*   [Defining Global Settings](https://css-tricks.com/defining-global-settings/)
*   [Defining Global Styles](https://css-tricks.com/defining-global-styles-in-wordpress/)
*   [How the Styles Engine Generates Classes](https://css-tricks.com/how-the-style-engine-generates-classes/)
*   [Global Styles Reference Tables](https://css-tricks.com/wordpress-global-styles-reference-tables/) _(you are here_!)

### [](#aa-table-of-contents)Table of contents

*   [Settings](#settings)
    *   [Border](#border)
    *   [Color](#color)
    *   [Typography](#typography)
    *   [Spacing](#spacing)
    *   [Layout](#layout)
    *   [Appearance tools](#appearance-tools)
    *   [Root padding-aware alignments](#root-paddingaware-alignments)
*   [Styles](#styles)
    *   [Top-level styles](#toplevel-styles)
    *   [Global styles](#global-styles)
    *   [Global-level styles: interactive elements](#globallevel-styles-interactive-elements)
    *   [Custom](#custom)
    *   [Block-level styles](#blocklevel-styles)
*   [Wrapping up](#wrapping-up)

* * *

### [](#aa-settings)Settings

    {
      ""version"": 2,
      ""settings"": {
        ""border"": {},
        ""color"": {},
        ""typography"": {},
        ""layout"": {},
        ""spacing"": {},
        ""outline"": {},
        ""appearanceTools"": true | false,
        ""useRootPaddingAwareAlignments"": true | false
    }

We’ll start with the settings configurations, where we have broken this out into multiple tables for Typography, Colors, Custom, and Spacing.

Remember, these “top-level” styles are applied on the `<body>` element. And it might be helpful to recall the syntax we’re dealing with:

*   **CSS Custom properties:** `--wp--preset--{preset-category}--{preset-slug}`
*   **CSS classes:** `.has-{preset-slug}-{preset-category}`

#### [](#aa-border)Border

The `border` section enables border controls in the editor UI.

    {
      ""version"": 2,
      ""settings"": {
        ""border"": {
          ""color"": true,
          ""radius"": true,
          ""style"": true,
          ""width"": true
      }
    }

JSON Property

What it Does

CSS Equivalent

`settings.border.color`

Enables the border color control.

`border-color`

`settings.border.radius`

Enables the border radius control.

`border-radius`

`settings.border.style`

Enables the border style control.

`border-style`

`settings.border.width`

Enables the border width control.

`border-width`

#### [](#aa-color)Color

The `color` section sets the theme’s color palettes, gradients, and duotone effects.

    {
      ""version"": 2,
      ""settings"": {
          ""color"": {
            ""palette"": {
              ""slug"": """",
              ""color"": """",
              ""name"": """",
            },
            ""gradients"": [
              {
                ""slug"": """",
                ""gradient"": """",
                ""name"": """"
              }
            ],
            ""duotone"": {
              ""slug"": """",
              ""color"": """",
              ""name"": """",
            }
            ""link"": true | false
          }
        }
      }
    }

JSON Property

What it Does

CSS Custom Properties

`settings.color.pallete.color`

Defines color values for use throughout the theme.

`--wp–preset--color--{slug}`

`settings.color.gradients.color`

Defines gradient patterns for use throughout the theme.

`--wp–preset--gradient--{slug}`

`settings.color.duotone`

Defines duotone effects for use throughout the site.

`–-wp–preset--duotone--{slug}`

`settings.color.link`

Enables the setting to change the theme’s default link color in the Site Editor.

`–-wp–preset-–color-–link`

#### [](#aa-typography)Typography

    {
      ""version"": 2,
      ""settings"": {
        ""styles"": {
          ""typography"": {
            ""dropCap"": true | false,
            ""customFontSize"": true | false,
            ""fluid"": ""<undefined>"" | false,
            ""fontSizes"": [
              {
                ""fluid"": {
                  ""min"": """",
                  ""max"": """"
                },
               ""slug"": """",
               ""size"": """",
               ""name"": """"
             },
           ],
          ""fontFamilies"": [
            {
              ""fontFamily"": """",
              ""name"": """",
              ""slug"": """",
              ""fontFace"": """"
            },
          ],
          ""lineHeight"": true | false,
          ""fontStyle"": true | false,
          ""letterSpacing"": true | false,
          ""textDecoration"": true | false,
          ""textTransform"": true | false,
        }
      }
    }

JSON Properties

What it Does

**CSS Custom Property**

`settings.typography.fontSizes`

Defines font size throughout the site.

`--wp--preset--font-size--{slug}`

`settings.typography.fontFamilies`

Defines typographic font use throughout the site.

`--wp--preset--font-family--{slug}`

`settings.typography.lineHeight`

Defines line height to use throughout the site.

`--wp--preset--line-height--{slug}`

`settings.typography.fontStyle`

Defines font style to use throughout the site.

`--wp--preset--line-height--{slug}`

`settings.typography.fontWeight`

Defines font weight for use throughout the site.

`--wp--preset--font-weight--{slug}`

`settings.typography.letterSpacing`

Defines letter spacing for use throughout the site.

`--wp--preset--letter-spacing--{slug}`

`settings.typography.textDecoration`

Defines text decoration for use throughout the site.

–wp-preset–text-decoration–{slug}

`settings.typography.textDecoration.line`

Defines link text decoration line for use throughout the site.

`--wp-preset--text-decoration--line`

`settings.typography.textDecoration.style`

Defines link text decoration line style for use throughout the site.

`--wp-preset--text-decoration--style--{slug}`

`settings.typography.textDecoration.color`

Defines link text decoration color for use throughout the site.

`--wp–preset--text-decoration--color--{slug}`

`settings.typography.textDecoration.thickness`

Defines link text decoration line thickness for use throughout the site.

`--wp–preset--text-decoration--thickness--{slug}`

`settings.typography.textTransform`

Defines text transformation type (uppercase, lowercase) for use throughout the site.

`--wp--preset--text-transform--{slug}`

#### [](#aa-spacing)Spacing

These settings enable/disable spacing controls for margin and padding in the Site Editor and allow you to set which CSS units to support.

    ""styles"": {
      ""spacing"":{
        ""padding"": true,
        ""margin"": true,
        ""units"": [ ""px"", ""em"", ""rem"", ""vh"", ""vw"", ""%"" ]
      }
    }

The Site and Block Editors include slider form inputs that allow you to set spacing on a scale of predefined values. We can customize that scale with the `spacingScale` property:

    {
      ""version"": 2,
      ""settings"": {
        ""spacing"": {
          ""spacingScale"": {
            ""operator"": ""+"",
            ""increment"": <number>,
            ""steps"": <number>,
            ""mediumStep"": <number>,
            ""unit"": """"
          }
        }
      }
    }

JSON Property

What it Does

Example

`settings.spacing.operator`

Determines whether the control scales up or down.

`+`

`settings.spacing.increment`

Determines much the spacing changes per step.

`0.25`

`settings.spacing.steps`

Determines the number of available steps on the scale.

`6`

`settings.spacing.mediumStep`

Sets the midpoint of the range scale.

`1.5`

`settings.spacing.unit`

Sets the CSS length unit of the numeric value.

`rem`

One more thing we can do with spacing is create CSS custom properties that can be used throughout the theme:

    {
      ""version"": 2,
      ""settings"": {
        ""spacing"": {
          ""spacingSizes"": [
            {
              ""size"": """",
              ""slug"": """",
              ""name"": """"
            }
          ]
        }
      }
    }

JSON Property

What it Does

Example

`settings.spacing.spacingSizes.size`

Sets the custom size value, including unit.

`3.5rem`

`settings.spacing.spacingSizes.slug`

The slug used in the CSS custom property name.

`medium`

`settings.spacing.spacingSizes.name`

Provides the label for the size in the Site and Block Editor UI.

`Medium`

The resulting CSS custom property syntax is: `--wp-preset--spacing--<slug>`

#### [](#aa-layout)Layout

    {
      ""version"": 2,
      ""settings"": {
        ""layout"": {
          ""contentSize"": """",
          ""wideSize"": """",
          ""type"": """",
        }
      }
    }

JSON Property

What it Does

Generated CSS Property

`settings.layout.contentSize`

Sets the maximum width of the default content container for pages and posts.

`--wp--style--global--content-size`

`settings.layout.contentWide`

Sets the maximum width of the“wide” content container for pages and posts.

`--wp--style--global--wide-size`

`settings.layout.type`

Determines is the container is `defaul`t or [`constrained`](https://css-tricks.com/using-the-new-constrained-layout-in-wordpress-block-themes/).

#### [](#aa-appearance-tools)Appearance tools

    {
      ""version"": 2,
      ""settings"": {
        ""appearanceTools"": true | false,
    }

Setting this to `true` is a shorthand for enabling the following settings:

    {
      ""version"": 2,
      ""settings"": {
        ""border"": {
          ""color"": true,
          ""radius"": true,
          ""style"": true,
          ""width"": true
        },
        ""color"": {
          ""link"": true
        }
        ""spacing"": {
          ""margin"": true,
          ""padding"": true,
          ""blockGap"": true,
        },
        ""typography"": {
          ""lineHeight"": true
        }
      }
    }

#### [](#aa-root-padding-aware-alignments)Root padding-aware alignments

    {
      ""version"": 2,
      ""settings"": {
        ""useRootPaddingAwareAlignments"": true | false
    }

Setting this to `true` is a shorthand for enabling the following settings:

    {
      ""version"": 2,
      ""settings"": {
        ""spacing"": {
          ""margin"": true,
          ""padding"": true
        },
      }
    }

### [](#aa-styles)Styles

The idea here is that styles are organized by **top-level styles** (those that set styles on the `<body>`), **global styles** (those that set styles on global elements, like headings), and **block styles** (those that set styles on specific blocks).

    {
      ""version"": 2,
      ""styles"": {
        // Top-level styles
        // etc.
    
        // Global-level styles
        ""elements"": { },
    
        // Block-level styles
        ""blocks"": {  }
      }
    }

#### [](#aa-top-level-styles)Top-level styles

    {
      ""version"": 2,
      ""styles"": {
        // Top-level styles
        ""border"": [],
        ""color"": [],
        ""spacing"": [],
        ""typography"": [],
        ""filter"": """",
        ""shadow"": """",
        ""outline"": []
      }
    }

Property

Style

CSS equivalent

Additional props

`border`

`color`

[`border-color`](https://css-tricks.com/almanac/properties/b/border/)

`radius`

[`border-radius`](https://css-tricks.com/almanac/properties/b/border-radius/)

`style`

[`border-style`](https://css-tricks.com/almanac/properties/b/border/)

`width`

[`border-width`](https://css-tricks.com/almanac/properties/b/border/)

`top`

[`border-top`](https://css-tricks.com/almanac/properties/b/border/)

`color`, `style`, `width`

`right`

[`border-right`](https://css-tricks.com/almanac/properties/b/border/)

`color`, `style`, `width`

`bottom`

[`border-bottom`](https://css-tricks.com/almanac/properties/b/border/)

`color`, `style`, `width`

`left`

[`bottom-left`](https://css-tricks.com/almanac/properties/b/border/)

`color`, `style`, `width`

`color`

`background`

[`background-color`](https://css-tricks.com/almanac/properties/b/background-color/)

`gradient`

[`background-image`](https://css-tricks.com/almanac/properties/b/background-image/)

`text`

[`color`](https://css-tricks.com/almanac/properties/c/color/)

`spacing`

`blockGap`

[`gap`](https://css-tricks.com/almanac/properties/g/gap/) (in Flexbox and Grid containers)

`margin`

[`margin`](https://css-tricks.com/almanac/properties/m/margin/)

`bottom`, `left`, `right`, `top`

`padding`

[`padding`](https://css-tricks.com/almanac/properties/p/padding/)

`bottom`, `left`, `right`, `top`

`typography`

`fontFamily`

[`font-family`](https://css-tricks.com/almanac/properties/f/font-family/)

`fontSize`

[`font-size`](https://css-tricks.com/almanac/properties/f/font-size/)

`fontStyle`

[`font-style`](https://css-tricks.com/almanac/properties/f/font-style/)

`fontWeight`

[`font-weight`](https://css-tricks.com/almanac/properties/f/font-weight/)

`letterSpacing`

[`letter-spacing`](https://css-tricks.com/almanac/properties/l/letter-spacing/)

`lineHeight`

[`line-height`](https://css-tricks.com/almanac/properties/l/line-height/)

`textDecoration`

[`text-decoration`](https://css-tricks.com/almanac/properties/t/text-decoration/)

`textTransform`

[`text-transform`](https://css-tricks.com/almanac/properties/t/text-transform/)

`filter`

`duotone`

[`filter`](https://css-tricks.com/almanac/properties/f/filter/)

`shadow`

[`box-shadow`](https://css-tricks.com/almanac/properties/b/box-shadow/)

`outline`

`color`

[`outline-color`](https://css-tricks.com/almanac/properties/o/outline-color/)

`offset`

[`outline-offset`](https://css-tricks.com/almanac/properties/o/outline-offset/)

`style`

[`outline-style`](https://css-tricks.com/almanac/properties/o/outline-style/)

`width`

[`outline-width`](https://css-tricks.com/almanac/properties/o/outline-width/)

#### [](#aa-global-styles)Global styles

    {
      ""version"": 2,
      ""styles"": {
        ""elements"": {
          ""buttons"": {
            ""border"": {
              ""radius"": """"
              },
              ""color"": {
                ""background"": """",
                ""text"": """"
              }, 
              ""heading"": {},  
              ""h1"": { },
              ""h2"": { },
              ""h3"": { },
              ""h4"": { },
              ""h5"": { },
              ""h6"": { },              
              ""link"": {
                ""border"": { },
                ""color"": { },
                ""spacing"": { },
                ""typography"": { }
                }
              }
            }
        }
      }
    }

JSON Property

What It Does

Where It Is Used

`styles.elements.buttons`

Defines button element properties (e.g., `border`, `color`, etc.) for use throughout the site.

Buttons

`styles.elements.heading`

Defines styles of all the headings, the (`<h1>` to `<h6>`) elements for use throughout the site.

`<h1>` to `<h6>` (all)

`styles.elements.h1` to `styles.elements.h6`

Individually defines styles for `<h1>` to `<h6>` elements of the heading block for use throughout the site.

`<h1>` to `<h6>` (individually)

`styles.elements.link`

Defines link `<a>` element style for use throughout the site.

`<a>`

`styles.elements.cite`

Defines styles for the `blockquote.cite`, `quote.cite` classes for use throughout the site.

Quote, Pullquote

`styles.elements.caption`

Defines styles for `<figcaption>` and `<caption>` elements for Image and Table blocks, respectively, for use throughout the site.

Figure, Table

`styles.elements.spacing.padding`

Sets the padding of headings, row, blocks and paragraph blocks for use throughout the site.

Headings, row, blocks, paragraph

`styles.elements.typography`

Sets the default typography style for headings and paragraph blocks for use throughout the site.

headings, paragraph

#### [](#aa-global-level-styles-interactive-elements)Global-level styles: interactive elements

    {
      ""version"": 2,
        ""styles"": {
          ""elements"": {
            ""button"": {
              ""color"": {
                ""background"": "" "",
                ""text"": "" ""
              }
              "":hover"": {
                ""color"": {
                  ""background"": "" "",
                  ""text"": "" ""
                }
              },
              "":focus"": {
                ""color"": {
                  ""background"": "" "",
                  ""text"": "" ""
                }
              },
              "":active"": {
                ""color"": {
                  ""background"": "" "",
                  ""text"": "" ""
              }
            },
            "":visited"": {
              ""color"": {
                ""background"": "" "",
                ""text"": "" ""
              }
            }
          }
        }
      }
    }

**Note:** We can use any already predefined JSON properties in settings presets like typography, outline, shadow, etc., to add styling to any global JSON elements.

JSON Property

Style

What It Does

CSS Equivalent

`styles.elements.color`

Background

Defines link background color for use entire site.

`[a:link](https://css-tricks.com/almanac/selectors/l/link/) { background-color }`

Text

Defines link text color for use entire site.

`[a:link](https://css-tricks.com/almanac/selectors/l/link/) { color }`

`styles.elements.:hover`

Background

Defines hover state link background color for use entire site.

`[a:hover](https://css-tricks.com/almanac/selectors/h/hover/) { background-color }`

Text

Defines hover state link text color for use entire site.

`[a:hover](https://css-tricks.com/almanac/selectors/h/hover/) { color }`

`styles.elements.:focus`

Background

Defines focus state link background color for use entire site.

`[a:focus](https://css-tricks.com/almanac/selectors/f/focus/) { background-color }`

Text

Defines focus state link text color for use entire site.

`[a:focus](https://css-tricks.com/almanac/selectors/f/focus/) { color }`

`styles.elements.:active`

Background

Defines active state link background color for use entire site.

`[a:active](https://css-tricks.com/almanac/selectors/a/active/) { background-color }`

Text

Defines active state link text color for use entire site.

`[a:active](https://css-tricks.com/almanac/selectors/a/active/) { color }`

`styles.elements.:visited`

Background

Defines visited state link background color for use entire site.

`[a:visited](https://css-tricks.com/almanac/selectors/v/visited/) { background-color }`

Text

Defines visited state link text color for use entire site.

`[a:visited](https://css-tricks.com/almanac/selectors/v/visited/) { color }`

#### [](#aa-custom)Custom

This table shows examples of custom properties you could make using the Custom section of the `theme.json` file. The CSS custom properties generated by the Custom section use the following syntax: `--wp--custom--<variable-name>`

JSON Property

Syntax

Generated Custom Property

`settings.custom.spacing.padding`

`--wp--custom--{padding}`

`--wp--custom--padding`

`settings.custom.typography`

`--wp--custom--{typography}`

`--wp--custom--typography`

`settings.custom.fontWeight`

`--wp--custom--{font-weight}`

`--wp--custom--front-weight`

`settings.custom.lineHeight`

`--wp--custom--{line-height}`

`--wp--custom--line-height`

`settings.custom.someColor`

`--wp--custom--{some-color}`

`--wp--custom--some-color`

`settings.custom.someParagraph`

`--wp--custom--{some-paragraph}`

`--wp--custom--some-paragraph`

#### [](#aa-block-level-styles)Block-level styles

All the global-level `styles` including the `elements` may be used to customize the CSS for individual blocks to overwrite the global customization. Block-level styles have [precedence](https://css-tricks.com/managing-css-styles-in-a-wordpress-block-theme/#aa-json-and-css-specificity) over top-level styles (global).

    {
      ""version"": 2,
      ""styles"": {
        // Top-level styles
        // etc.
    
        // Global-level styles
        ""elements"": { },
    
        // Block-level styles
        ""blocks"": {
          ""core/<BLOCKNAME>"": {
            // Define or overwrite any global styles
            ""typography"": {
              ""fontSize"": "" "",
              ""fontWeight"": """",
              ""lineHeight"": """",
              ""letterSpacing"": """",
              ""textDecoration"": """",
              ""textTransform"": """" 
            },
            // Define or overwrite any global elements styles
            ""elements"": {
              ""link"": {
                ""typography"": {
                  ""textDecoration"": """"
                },
                ""color"": {
                  ""text"": "" "",
                  ""background-color"": """"
                },
                "":hover"": {
                  ""typography"": {
                    ""textDecoration"": """"
                  },
                  ""color"": {
                    ""text"": """",
                    ""background-color"": """"
                  },
                },
                "":focus"": {
                  ""typography"": {
                    ""textDecoration"": """"
                  },
                  ""color"": {
                    ""text"": "" "",
                    ""background-color"": """"
                  },
                },
                "":active"": {
                  ""typography"": {
                    ""textDecoration"": """"
                  },
                  ""color"": {
                    ""text"": "" "",
                    ""background-color"": """"
                  },
                },
                "":visited"": {
                  ""typography"": {
                    ""textDecoration"": """"
                  },
                  ""color"": {
                    ""text"": """",
                      ""background-color"": """"
                  },
                },
              },
            },     
          },
          // Additional blocks
          ""core/<BLOCKNAME>"": {
            ""typography"": { },
            // etc.
          }
        }
      }
    }

JSON Property

Style

What It Does

`.styles.core.<BLOCKNAME>.typography`

`font-size`

Defines or overwrites the global font size of this block only.

`font-weight`

Defines or overwrites the global font weight of this block only.

`line-height`

Defines or overwrites he global font height of this block only.

`letter-spacing`

Defines or overwrites he global letter spacing of this block only.

`text-decoration`

Defines or overwrites he global text decoration of this block only.

`text-transform`

Defines or overwrites the global text transformation of this block only.

`.styles.core.<BLOCKNAME>.elements.link.typography`

`text-decoration`

Defines or overwrites the global link typography of this block only.

`.styles.core.<BLOCKNAME>.elements.link.color`\`

`background-color`

Defines or overwrites the global link background color of this block only.

`color`

Defines or overwrites the global link text color of this block only.

`.styles.core.<BLOCKNAME>.elements.link.:hover.typography`

`text-decoration`

Defines or overwrites the global text decoration of hover link state of this block only.

`.styles.core.<BLOCKNAME>.elements.link.:hover.color`

`background-color`

Defines or overwrites the global background color of hover link state of this block only.

`color`

Defines or overwrites the global background color of hover link state of this block only.

`.styles.core.<BLOCKNAME>.elements.link.:active.typography`

`text-decoration`

Defines or overwrites the global text decoration of active link state of this block only.

`.styles.core.<BLOCKNAME>.elements.link.:active.color`

`background-color`

Defines or overwrites the global background color of active link state of this block only.

`color`

Defines or overwrites the global background color of active link state of this block only.

`.styles.core.<BLOCKNAME>.elements.link.:focus.typography`

`text-decoration`

Defines or overwrites the global text decoration of focus link state of this block only.

`.styles.core.<BLOCKNAME>.elements.link.:focus.color`

`background-color`

Defines or overwrites the global background color of focus link state of this block only.

`color`

Defines or overwrites the global background color of focus link state of this block only.

`.styles.core.<BLOCKNAME>.elements.link.:visited.typography`

`text-decoration`

Defines or overwrites the global text decoration of visited link state of this block only.

`.styles.core.<BLOCKNAME>.elements.link.:visited.color`

`background-color`

Defines or overwrites the global background color of visited link state of this block only.

`color`

Defines or overwrites the global background color of visited link state of this block only.

For use case examples of block-level CSS customization, you may refer to the latest [Twenty Twenty-Three theme](https://themes.trac.wordpress.org/browser/twentytwentythree/1.0/theme.json) and other recent block themes in the [theme directory](https://wordpress.org/themes/tags/full-site-editing/).

### [](#aa-wrapping-up)Wrapping up

You made it through this compelete guide to WordPress block theme CSS and settings! We started with a brief introduction that compares WordPress block themes to the “classic” PHP templating system. From there, we talked a bit about JSON because, funny enough, that’s how we “write” CSS in WordPress block themes.

Then there’s `theme.json` the actual file where all of those styles are defined, much like `style.css` was for classic PHP themes. The file is tightly structured into sections for toggling WordPress settings and defining CSS globally throughout a block theme.

And once we’re done defining a block theme’s settings and styles, the WordPress Style Engine takes over, processing our JSON into a nicely organized set of CSS styles used in the theme.

#### [](#aa-wordpress-block-theme-css-and-style-settings-guide)WordPress Block Theme CSS and Style Settings Guide

*   [Introduction](https://css-tricks.com/wordpress-block-theme-guide/)
*   [Glossary of Terms for `theme.json`](https://css-tricks.com/glossary-of-terms-for-theme-json/)
*   [Defining Global Settings](https://css-tricks.com/defining-global-settings/)
*   [Defining Global Styles](https://css-tricks.com/defining-global-styles-in-wordpress/)
*   [How the Styles Engine Generates Classes](https://css-tricks.com/how-the-style-engine-generates-classes/)
*   [Global Styles Reference Tables](https://css-tricks.com/wordpress-global-styles-reference-tables/) _(you are here_!)

It’s crazy just how different block themes are when it comes to defining and managing styles in WordPress! All of this is still in active development, and we are likely to see new features and options added to `theme.json`.

See something that’s new or has changed? Please let me know in the comments!"
18,Defining Global Styles,https://css-tricks.com/defining-global-styles-in-wordpress/,https://css-tricks.com/wp-content/uploads/2023/02/guide-wordpress-block-theme-css.jpg,Ganesh Dahal,1675134000000,1677628800000,"[""WordPress"",""WordPress blocks"",""wordpress themes""]","In Part 2 of this series, we covered the process of enabling certain features in a WordPress block theme in the `theme.json` file. We spent time in the `settings` section of the file, outlining the various available features and how they allow us to customize the Global Styles UI in the WordPress Site Editor with preset values that map to CSS custom property values that are scoped to the `<body>` element.

#### [](#aa-wordpress-block-theme-css-and-style-settings-guide)WordPress Block Theme CSS and Style Settings Guide

*   [Introduction](https://css-tricks.com/wordpress-block-theme-guide/)
*   [Glossary of Terms for `theme.json`](https://css-tricks.com/glossary-of-terms-for-theme-json/)
*   [Defining Global Settings](https://css-tricks.com/defining-global-settings/)
*   [Defining Global Styles](https://css-tricks.com/defining-global-styles-in-wordpress/) _(you are here!)_
*   [How the Styles Engine Generates Classes](https://css-tricks.com/how-the-style-engine-generates-classes/)
*   [Global Styles Reference Tables](https://css-tricks.com/wordpress-global-styles-reference-tables/)

### [](#aa-table-of-contents)Table of contents

*   [The styles section (styles)](#the-styles-section-styles)
*   [Supported properties](#supported-properties)
*   [Top-level styles](#toplevel-styles)
*   [Element-level styles](#elementlevel-styles)
*   [Block-level styles](#blocklevel-styles)
*   [Interactive styles](#interactive-styles)
*   [Referencing styles](#referencing-styles)
*   [Global style variations](#global-style-variations)
*   [Additional resources](#additional-resources)
*   [Wrapping up](#wrapping-up)

* * *

### [](#aa-the-styles-section-styles)The styles section (`styles`)

The `styles` section sits alongside the `settings` section we covered in the last article as a top-level section.

    {
      ""version"": 2,
      ""settings"": {},
      ""styles"": {
        // etc.
      }
    }

We learned in Part 2 that the `settings` section defines default styles at the top level — the CSS generally applied to the `<body>` element. The `styles` section is where we can override those presets with more granular styles applied to specific global elements (e.g. `<h1>`) and specific blocks (e.g. [`theme.json` file](https://github.com/WordPress/twentytwentythree/blob/trunk/theme.json#L291-L591) from Twenty Twenty-Three, and other latest block themes from [theme directory](https://wordpress.org/themes/tags/full-site-editing/)).

In other words, the `settings` are “top-level” styles that cascade down to all elements. We can override those presets in the `styles` section where we apply styles to specific `elements` and `blocks`. In fact, `elements` and `blocks` are subsections of `styles`:

    {
      ""version"": 2,
      ""settings"": {},
      ""styles"": {
        // Global element styles
        ""elements"": {},
        // Block styles
        ""blocks"": {}
      }
    }

What makes this great is that `theme.json` is outlined in a way that organizes styles to cascade very much the same way CSS stylesheet does. If `settings` is for configuring global style features, then `styles` is where we override those presets when working with specific global `elements` and individual `blocks`.

### [](#aa-supported-properties)Supported properties

When we looked at the `settings` section in Part 2, we saw that it contains “features” that can be enabled and configured in a block theme. Regarding the `styles` sections, we’re defining CSS properties instead.

In fact, the objects contained in the `styles` section are mapped to actual CSS properties. For example, `styles.border-color` corresponds to the [`border-color`](https://css-tricks.com/almanac/properties/b/border/) property in CSS.

So, before we jump into the `styles` section and how to customize the appearance of a block theme, we ought to know exactly what CSS we’re working with. The following table outlines all of the CSS properties that are currently supported in the `styles` section as of WordPress 6.1:

Full table of properties

Property

Style

CSS equivalent

Additional props

`border`

`color`

[`border-color`](https://css-tricks.com/almanac/properties/b/border/)

`radius`

[`border-radius`](https://css-tricks.com/almanac/properties/b/border-radius/)

`style`

[`border-style`](https://css-tricks.com/almanac/properties/b/border/)

`width`

[`border-width`](https://css-tricks.com/almanac/properties/b/border/)

`top`

[`border-top`](https://css-tricks.com/almanac/properties/b/border/)

`color`, `style`, `width`

`right`

[`border-right`](https://css-tricks.com/almanac/properties/b/border/)

`color`, `style`, `width`

`bottom`

[`border-bottom`](https://css-tricks.com/almanac/properties/b/border/)

`color`, `style`, `width`

`left`

[`bottom-left`](https://css-tricks.com/almanac/properties/b/border/)

`color`, `style`, `width`

`color`

`background`

[`background-color`](https://css-tricks.com/almanac/properties/b/background-color/)

`gradient`

[`background-image`](https://css-tricks.com/almanac/properties/b/background-image/)

`text`

[`color`](https://css-tricks.com/almanac/properties/c/color/)

`spacing`

`blockGap`

`[gap](https://css-tricks.com/almanac/properties/g/gap/)` (in Flexbox and Grid containers)

`margin`

[`margin`](https://css-tricks.com/almanac/properties/m/margin/)

`bottom, left`, `right`, `top`

`padding`

[`padding`](https://css-tricks.com/almanac/properties/p/padding/)

`bottom`, `left`, `right`, `top`

`typography`

`fontFamily`

[`font-family`](https://css-tricks.com/almanac/properties/f/font-family/)

`fontSize`

[`font-size`](https://css-tricks.com/almanac/properties/f/font-size/)

`fontStyle`

[`font-style`](https://css-tricks.com/almanac/properties/f/font-style/)

`fontWeight`

[`font-weight`](https://css-tricks.com/almanac/properties/f/font-weight/)

`letterSpacing`

[`letter-spacing`](https://css-tricks.com/almanac/properties/l/letter-spacing/)

`lineHeight`

[`line-height`](https://css-tricks.com/almanac/properties/l/line-height/)

`textDecoration`

[`text-decoration`](https://css-tricks.com/almanac/properties/t/text-decoration/)

`textTransform`

[`text-transform`](https://css-tricks.com/almanac/properties/t/text-transform/)

`filter`

`duotone`

[`filter`](https://css-tricks.com/almanac/properties/f/filter/)

`shadow`

[`box-shadow`](https://css-tricks.com/almanac/properties/b/box-shadow/)

`outline`

`color`

[`outline-color`](https://css-tricks.com/almanac/properties/o/outline-color/)

`offset`

[`outline-offset`](https://css-tricks.com/almanac/properties/o/outline-offset/)

`style`

[`outline-style`](https://css-tricks.com/almanac/properties/o/outline-style/)

`width`

[`outline-width`](https://css-tricks.com/almanac/properties/o/outline-width/)

There are a couple of things worth noting when it comes to setting these properties:

*   There are no [logical property](https://css-tricks.com/css-logical-properties-and-values/) equivalents. For example, `margin-left` is supported, but `margin-inline-start` is not as of this writing.
*   Multiple color formats are supported, such as `rgba` and `hsla`, but [the new syntaxes](https://css-tricks.com/new-css-color-features-preview/) are not, e.g., `rgb(255, 255, 255 / .5)`.

### [](#aa-top-level-styles)Top-level styles

We already covered top-level styles in Part 2. By “top-level” we mean styles that are applied globally on the root element (`<html>`) as well as the `<body>`. These styles are “top-level” in the sense they are inherited by everything in the theme by default.

The classic example in CSS is setting a default font size on the `<body>` element:

    body {
      font-size: 1.125rem;
    }

Every element now has a `font-size` value of `1.125rem`, unless it is overridden somewhere else. You might think that top-level styles are set in the `styles` section of `theme.json`. But if you recall the last article in this series, top-level styles are the preset values we define in the `settings` section instead:

    {
      ""version"": 2,
      ""settings"": {
        ""typography"": {
          ""fontSizes"": {
            ""size"": ""1.125rem"",
            ""slug"": ""medium""
          }
        }
      },
      ""styles"": {}
    }

Behind the scenes, the WordPress Style Engine generates a CSS custom property that is applied to the `<body>` element:

    body {
      font-size: var(--wp--preset--font-size--medium);
    }

…which results in precisely what we’d expect in CSS:

    body {
      font-size: 1.125rem;
    }

Now we can jump into the `styles` section to override this sort of top-level style on two different levels: `elements` and `blocks`.

### [](#aa-element-level-styles)Element-level styles

What if we want to scope that top-level `font-size` to a specific element? A global element is a little tricky to understand because they are both blocks and blocks that can be nested in other blocks.

Think of `elements` as “core” blocks. That’s actually [what they’re called in the WordPress Handbook](https://developer.wordpress.org/block-editor/reference-guides/core-blocks/), and it’s a good description of what they are: blocks that come with WordPress Core out of the box.

A heading is a perfect example of a core block. There is a [Heading block](https://developer.wordpress.org/block-editor/reference-guides/core-blocks/#heading) we can use to add any heading level (`<h1>`–`<h6>`) to a page or post. So, if you need to drop a Heading 2 element on a page, you have a specific block to do that.

But a Heading 2 might be part of another block. For example, if you were to add a [Query Loop block](https://wordpress.org/support/article/query-loop-block/) to a page, you would get a list of posts, each with a [Post Title block](https://wordpress.org/support/article/post-title-block/) that outputs an `<h2>` element.

![Query Loop block in the WordPress Block Editor with a Heading 2 element.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_05E3806D3ABA334AB915E8BA3ADFAD959E7CB19236C1A6A5AA7D7B47D8666BB1_1673279218988_Screenshot2023-01-09at8.46.45AM.png?resize=2338%2C980&ssl=1)

If you want to style all heading elements, regardless of level, you can do it in the `elements` object in `theme.json`:

    {
      ""version"": 2,
      ""settings"": { }
      ""styles"": {
        // Global-level styles
        ""elements"": {
          ""heading"": { ... },
        }
      }
    }

Let’s say the CSS `color` property is set to black as a top-level style in `settings`:

    {
      ""version"": 2,
      ""settings"": {
        // Top-level styles
        ""color"": {
          ""palette"": {
            ""color"": ""#000000"",
            ""name"": ""Contrast"",
            ""slug"": ""contrast""
          }
        }
      },
    }

The [WordPress Style Engine](https://css-tricks.com/managing-css-styles-in-a-wordpress-block-theme/#aa-the-style-engine) creates a CSS custom property that can be applied to the `<body>` at the top level:

    body {
      color: var(--wp--preset--color--contrast);
    }

Maybe you want all your headings to be a different color than what is already applied to the `<body>` element. You can set that on `styles.elements.heading` to override black with, say, a dark gray color:

    {
      ""version"": 2,
      ""settings"": {
        // Top-level style presets
        ""color"": {
          ""palette"": {
            ""color"": ""#000000"",
            ""name"": ""Contrast"",
            ""slug"": ""contrast""
          }
        }
      },
      ""styles"": {
        // Global-level styles
        ""elements"": {
          ""heading"": {
            ""color"": {
              ""text"": ""#333333""
            }
          }
        }
      }
    }

Another way to go about it is to configure a new color in `settings.color.palette` and apply the generated CSS custom property to `styles.elements.heading.color.text`.

OK, but maybe you want the Heading 2 global element to “pop” more than other heading levels. You can override the dark gray for all the core headings element with another color value assigned to the `h2` element:

    {
      ""version"": 2,
      ""settings"": {
        // Top-level style presets
        ""color"": {
          ""palette"": {
            ""color"": ""#000000"",
            ""name"": ""Contrast"",
            ""slug"": ""contrast""
          }
        }
      },
      ""styles"": {
        // Global-level styles
        ""elements"": {
          ""heading"": {
            ""color"": {
              ""text"": ""#333333""
            }
          },
          ""h2"": {
            ""color"": {
              ""text"": ""#F8A100""
            }
          }
        }
      }
    }

At the time of this writing, the following global elements are currently supported in the `styles.elements` section:

JSON Property

Generated selector

Use cases

`elements.buttons`

Buttons

Buttons block, blocks

`elements.heading`

Headings

Headings block,

`elements.h1` to `elements.h6`

`<h1>` to `<h6>`

Site title, post title, blocks

`elements.link`

`<a>`

Links

`elements.cite`

`blockquote.cite`, `quote.cite`

Quote, Pullquote

`elements.caption`

`<figcaption>`, `<caption>`

Figure, Table

`elements.spacing.padding`

Padding

Headings, row, blocks, paragraph

`elements.typography`

Typography

Headings, paragraph

### [](#aa-block-level-styles)Block-level styles

There’s yet one more level in `styles`, and it’s used to customize the CSS for individual blocks:

    {
      ""version"": 2,
      ""styles"": {
        // Top-level styles
        // etc.
    
        // Global-level styles
        ""elements"": { },
    
        // Block-level styles
        ""blocks"": {  }
      }
    }

Let’s go ahead and pick up right where we left off in the last section. We had set the `color` property to black in the top-level `styles`, overrode that with a different color for all headings in `styles.elements.heading`, then overrode that just for the Heading 2 element on `styles.elements.h2`. Here’s that code again:

    {
      ""version"": 2,
      ""styles"": {
        // Top-level styles
        ""color"": ""#000000"",
    
        // Global-level styles
        ""elements"": {
          ""heading"": {
            ""color"": {
              ""text"": ""#333333""
            }
          },
          ""h2"": {
            ""color"": {
              ""text"": ""#f8a100""
            }
          },
        }
      }
    }

Earlier, we discussed how a global element, like Heading 2, can also be part of another block. We used the Query Loop block as an example, where Heading 2 is used for each post title.

So far, the color of the Query Loop’s post title would be `#F8A100` because that is what is set on `styles.elements.h2`. But you can override that in the `styles.blocks` section if you want to set the Query Loop block’s Heading 2 element to yet another color without interfering with other headings:

    {
      ""version"": 2,
      ""styles"": {
        // Top-level styles
        ""color"": ""#000000"",
    
        // Global-level styles
        ""elements"": {
          ""heading"": {
            ""color"": {
              ""text"": ""#333333""
            }
          },
          ""h2"": {
            ""color"": {
              ""text"": ""#F8A100""
            }
          }
        },
        ""blocks"": {
          ""core/query"": {
            ""elements"": {
              ""h2"": {
                ""color"": {
                  ""text"": ""var(--wp--preset--color--primary)""
                }
              }
            }
          }
        }
      }
    }

Behind the scenes, the WordPress Style Engine creates the CSS for the Query Loop’s `<h2>` element:

    .wp-query h2 {
      color: var(--wp--preset--color--primary);
    }

Pretty great, right? Now we have a way to set default styles and override them at various levels in the theme in a structured way that works much like the [CSS Cascade](https://css-tricks.com/the-c-in-css-the-cascade/).

Check out the WordPress Handbook for a [complete list of blocks that are available to use](https://wordpress.org/support/article/blocks/) in the Block Editor.

### [](#aa-interactive-styles)Interactive styles

What if you want to customize the CSS for different interactive states? Everything we’ve looked at so far is great for styling a core block, like Button, but what about the styles when someone hovers their cursor over a Button block? Or maybe when that button is in focus?

We can do that with [CSS pseudo-classes.](https://css-tricks.com/pseudo-class-selectors/) You’re probably already well-versed in using pseudo-classes like `:hover`, `:focus`, `:active`, and `:visited`. They’re super common!

Thankfully, [support for styling interactive states](https://make.wordpress.org/core/2022/10/10/styling-elements-in-block-themes/) for certain core blocks, like buttons and links, using pseudo-classes gained `theme.json` support in WordPress 6.1. Here’s an example pulled from one of my previous articles that adds a `box-shadow` on a theme’s Button elements on hover:

    {
      ""version"": 2,
      ""settings"": {},
      ""styles"": {
        ""elements"": {
          ""button"": {
            "":hover"": {
              ""shadow"": ""10px 10px 5px 0px rgba(0,0,0,0.66)""
            }
          }
        }
      }
    }

The WordPress Style Engine reads this and generates the following CSS:

    .wp-button:hover {
      box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.66);
    }

But before you rush off to create all your interactive styles, you’ll want to note that `theme.json` currently supports just the `:hover`, `:focus`, and `:active` interactive pseudo-classes as of WordPress 6.1, and even those are limited to the `button` and `link` elements. But that is likely to expand to others in the future — including pseudo-classes specific to form elements — as noted in [this Make WordPress Core blog post](https://make.wordpress.org/core/2022/10/10/styling-elements-in-block-themes/) introducing interactive styles.

So, for now, here is an example of the most complete way to customize the interactive styles of a button.

    {
      ""version"": 2,
      ""styles"": {
        ""elements"": {
          ""button"": {
            ""color"": {
              ""background"": ""#17A2b8"",
              ""text"": ""#ffffff""
            }
            "":hover"": {
              ""color"": {
                ""background"": ""#138496""
              }
            },
            "":focus"": {
              ""color"": {
                ""background"": ""#138496""
              }
            },
            "":active"": {
              ""color"": {
                ""background"": ""#138496""
              }
            }
          }
        }
      }
    }

The same thing works if we were to change `elements.button` to `elements.link`.

One more JSON object is mentioned in the WordPress Handbook called [`css`](https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-living/#css) but there is no documentation for it other than mentioning it is used to set custom CSS that is not handled by other `theme.json` properties.

### [](#aa-referencing-styles)Referencing styles

A [referencing style](https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#referencing-a-style) feature also available in `theme.json`. This allows you to refer to a previously defined root-level style property using the `ref:` term.

In the earlier top-level style example, we have registered the following background color using the `styles.color.background` property at the root of the `styles` property.

    ""styles"": {
      ""color"": {
        ""background"": ""var(--wp--preset--color--base)""
      }
    }

We can reuse the same style property to any number of blocks:

    {
      ""color"": {
        ""text"": { ref: ""styles.color.background"" }
      }
    }

### [](#aa-global-style-variations)Global style variations

It’s possible for a theme to include more than one `theme.json` file. Why? Because that’s how you can make [Global Styles variations](https://developer.wordpress.org/themes/advanced-topics/theme-json/#global-styles-variations).

That link will take you to the formal documentation for Global Styles variations, but the general idea is this: `theme.json` contains all your default values and sits in the theme folder’s root directory, and additional `theme.json` files are added to the theme folder that are “variations” of the default theme.

Here’s how it works. Say we have finished configuring our default `theme.json` file and it’s sitting in the theme’s root directory. Now say you want to implement a “dark mode” feature that allows the user to toggle colors between light and dark palettes. We’d make a new file — maybe call it `dark.json` and place it in a new folder in the theme called `/styles`. We can add as many of these files as we want to create all the variations your heart desires.

    theme-folder/
    |__ /assets
    |__ /patterns
    |__ /templates
    |__ /parts
    |__ /styles
        |__ dark.json
    |__ index.php
    |__ functions.php
    |__ style.css
    |__ theme.json

The biggest difference between the default `theme.json` file and our `dark.json` variation file is that our variation file includes a `title` field that allows us to differentiate it from other JSON files.

    {
      ""version"": 2,
      ""title"": ""Dark"",
      ""styles"": {}
    }

Anything we put in here overrides what’s in `theme.json` once it is activated. And how do you activate a global styles variation? You’ll find it in the Site Editor (Dashboard → Appearance → Editor) under “Browse Styles” (Editor → Styles → “Browse Styles”). That’s the secret behind all the different variations offered in the default Twenty Twenty-Three theme.

![The full-site template editing screen with the style variations panel open.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_05E3806D3ABA334AB915E8BA3ADFAD959E7CB19236C1A6A5AA7D7B47D8666BB1_1674081999482_Screenshot2023-01-18at3.44.17PM.png?resize=2522%2C2128&ssl=1)

You can read more about building block theme style variations in [this CSS-Tricks article](https://css-tricks.com/creating-style-variations-in-wordpress-block-themes/).

### [](#aa-additional-resources)Additional resources

*   [Global Styles & theme.json](https://fullsiteediting.com/lessons/global-styles/) (Full Site Editing With WordPress)
*   [Global Settings & Styles (theme.json)](https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/) (WordPress Developer Resources)
*   [Updates for Settings, Styles, and theme.json](https://make.wordpress.org/core/2022/01/08/updates-for-settings-styles-and-theme-json/) (Make WordPress Core)
*   [Standardizing Theme.json Color Slugs in WordPress Block Themes](https://richtabor.com/standardizing-theme-json-colors/) (Rich Tabor)
*   [Curating the Editor Experience](https://developer.wordpress.org/block-editor/how-to-guides/curating-the-editor-experience/) (WordPress Block Editor Handbook)
*   [3 Ways to Curate the Editor Experience in WordPress](https://wpengine.com/builders/3-ways-to-curate-the-editor-experience-in-wordpress/) (WP Engine Blog)
*   [Video:](https://wordpress.tv/2022/11/10/builder-basics-how-to-curate-the-editing-experience/) [How to curate the editing experience](https://wordpress.tv/2022/11/10/builder-basics-how-to-curate-the-editing-experience/) (Learn WordPress)

### [](#aa-wrapping-up)Wrapping up

We are really close to having a more complete picture of the `theme.json` file. We’ve covered the structure, how to enable features, and how to configure styles at the theme, global, and block level, even going so far as to look at custom styling capabilities and overriding all of our defaults with global styles variations. Hopefully you see just how powerful `theme.json` is in the block theme era of WordPress.

The next article in this series will give you a deeper look at the Style Engine. We’ve referred to it several times but have only briefly described what it does. It’s an integral piece of the block theme puzzle because it transforms all the JSON we write into vanilla CSS code.

It is the single source of truth when it comes to managing a block theme’s CSS. And it’s a good idea to know what WordPress is doing behind the scenes when a theme is rendered, so let’s move on to the next article!

#### [](#aa-wordpress-block-theme-css-and-style-settings-guide)WordPress Block Theme CSS and Style Settings Guide

*   [Introduction](https://css-tricks.com/wordpress-block-theme-guide/)
*   [Glossary of Terms for `theme.json`](https://css-tricks.com/glossary-of-terms-for-theme-json/)
*   [Defining Global Settings](https://css-tricks.com/defining-global-settings/)
*   [Defining Global Styles](https://css-tricks.com/defining-global-styles-in-wordpress/) _(you are here!)_
*   [How the Styles Engine Generates Classes](https://css-tricks.com/how-the-style-engine-generates-classes/)
*   [Global Styles Reference Tables](https://css-tricks.com/wordpress-global-styles-reference-tables/)"
19,Defining Global Settings,https://css-tricks.com/defining-global-settings/,https://css-tricks.com/wp-content/uploads/2023/02/guide-wordpress-block-theme-css.jpg,Ganesh Dahal,1675134000000,1677628800000,"[""WordPress"",""WordPress blocks"",""wordpress themes""]","So far, we’ve spent time getting familiar with `theme.json`, the foundation for all WordPress block themes. We covered the various JSON data types and common terminology related to working with the JSON syntax.

We are going to build on that knowledge in this article.

#### [](#aa-wordpress-block-theme-css-and-style-settings-guide)WordPress Block Theme CSS and Style Settings Guide

*   [Introduction](https://css-tricks.com/wordpress-block-theme-guide/)
*   [Glossary of Terms for `theme.json`](https://css-tricks.com/glossary-of-terms-for-theme-json/)
*   [Defining Global Settings](https://css-tricks.com/defining-global-settings/) _(you are here!)_
*   [Defining Global Styles](https://css-tricks.com/defining-global-styles-in-wordpress/)
*   [How the Styles Engine Generates Classes](https://css-tricks.com/how-the-style-engine-generates-classes/)
*   [Global Styles Reference Tables](https://css-tricks.com/wordpress-global-styles-reference-tables/)

### [](#aa-table-of-contents)Table of contents

*   [What we mean by “top level”](#what-we-mean-by-top-level)
*   [The settings section (settings)](#the-settings-section-settings)
*   [Supported features](#supported-features)
*   [The appearanceTools shorthand](#the-appearancetools-shorthand)
*   [Padding-aware alignments](#paddingaware-alignments)
*   [Configuring preset values](#configuring-preset-values)
*   [Wrapping up](#wrapping-up)

* * *

### [](#aa-what-we-mean-by-top-level)What we mean by “top level”

We discussed how JSON has a structured syntax. We can see that in the basic outline of the `theme.json` file:

    {
      ""version"": 2,
      ""settings"": {},
      ""styles"": {},
      ""customTemplates"": {},
      ""templateParts"": {}
    }

Each object in the basic outline is a “top level” of the file. You can think of the objects as sections where various things are configured. Disregarding the `version`, there are four top-level sections:

*   **`settings`:** This is where we define WordPress presets and defaults; it’s also where we can enable or disable certain WordPress features.
*   **`styles`:** This is where we define CSS for global and block-level theme styles.
*   **`customTemplates`:** This is where we register new custom theme templates. It’s the equivalent of dropping a new PHP template file in a classic theme.
*   **`templateParts`:** This section contains modular pieces that can be included in templates. It’s the equivalent of the `parts` subfolder you typically see in classic themes.

We’re spending most of our time in the `**settings**` and `**styles**` sections. Both provide ways to configure the global styles of a WordPress block theme. So, let’s look at each one and the various options we have to customize the theme appearance.

### [](#aa-the-settings-section-settings)The settings section (`settings`)

Again, this is where we configure WordPress features, sort of like the [`add_theme_support` function](https://developer.wordpress.org/reference%252Ffunctions%252Fadd_theme_support%252F/) you’d reach for in a classic theme’s `functions.php` file.

    {
      ""version"": 2,
      ""settings"": {
        // etc.
      }
    }

Why is this relevant to a theme’s global styles? Several WordPress features affect styling, like UI controls for padding, margins, colors, and fonts. Without enabling those, there’s no way to apply these and other styles in the Global Styles UI in the Site Editor.

In short: what we define here is what WordPress uses to add theme support for the Site Editor’s global style settings that are used throughout the theme.

### [](#aa-supported-features)Supported features

The [WordPress Block Editor Handbook](https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#backward-compatibility-with-add_theme_support) provides a table that outlines available features we can enable in the `settings` section and compares them to their equivalent `add_theme_support` function arguments.

Theme JSON settings

`add_theme_support`

`color.custom`

`custom-colors`

`color.palette`

`editor-color-palette`

`color.gradients`

`editor-gradient-presets`

`spacing.padding`

`custom-spacing`

`spacing.units`

`custom-units`

`typography.lineHeight`

`custom-line-height`

`typography.fontSizes`

`editor-font-sizes`

`useRootPaddingAwareAlignments`

N/A

For example, you were using `add_theme_support` in your classic theme to disable custom font sizes:

    <?php
    add_theme_support(disable-custom-font-sizes);

The equivalent in `theme.json` is the `settings.typography.customFontSize` property:

    {
      ""version"": 2,
      ""settings"": {
        ""typography"": {
          ""customFontSize"": false;
        }
      }
    }

As you might imagine, there are nested features within these features. For example, if we were adding support for `spacing` controls, there are a number of `spacing`\-related features we can individually enable:

    {
      ""version"": 2,
      ""settings"": {
        ""spacing"": {
          ""margin"": false,
          ""padding"": false,
          ""blockGap"": null,
          ""units"": [ ""px"", ""em"", ""rem"", ""vh"", ""vw"" ]
        },
      }
    }

As of WordPress 6.1, these are the `settings` features that can be configured in `theme.json`:

View full table

Setting

Feature

Data type

`border`

`radius`

Boolean

`color`

Boolean

`style`

Boolean

`width`

Boolean

`color`

`custom`

Boolean

`customDuotone`

Boolean

`customGradient`

Boolean

`duotone`

Array

`gradients`

Array

`link`

Boolean

`palette`

Array

`text`

Boolean

`background`

Boolean

`defaultGradients`

Boolean

`defaultPalette`

Boolean

`layout`

`contentSize`

String

`wideSize`

String

`type`

String (`default` and `constrained`)

`spacing`

`margin`

Boolean

`padding`

Boolean

`blockGap`

String

`units`

Array

`typography`

`customFontSize`

Boolean

`lineHeight`

Boolean

`dropCap`

Boolean

`fontStyle`

Boolean

fontWeight

Boolean

`letterSpacing`

Boolean

`textDecoration`

Boolean

`textTransform`

Boolean

`fontSizes`

Array

`fontFamilies`

Array

There are [ongoing discussions](https://make.wordpress.org/design/2022/11/21/design-share-nov-7-nov-18/) to add the [`outline` and `border`](https://github.com/WordPress/gutenberg/pull/45995) properties to the Global Styles panel. They are included in this table before formal adoption.

### [](#aa-the-appearancetools-shorthand)The `appearanceTools` shorthand

I know that the table shows a ton of features. Configuring each setting could get cumbersome. That’s where the `appearanceTools` setting comes into play.

    {
      ""version"": 2,
      ""settings"": {
        ""appearanceTools"": true
      }
    }

Setting it to `true` enables the following settings in one fell swoop:

    {
      ""version"": 2,
      ""settings"": {
        ""border"": {
          ""color"": true,
          ""radius"": true,
          ""style"": true,
          ""width"": true
        },
        ""color"": {
          ""link"": true
        }
        ""spacing"": {
          ""margin"": true,
          ""padding"": true,
          ""blockGap"": true,
        },
        ""typography"": {
          ""lineHeight"": true
        }
      }
    }

You can see how many lines of code we can save this way! But let’s say you want to take advantage of `appearanceTools`, but disable one or two of its supported features. You can do that on an individual basis to override that particular setting:

    {
      ""version"": 2,
      ""settings"": {
        ""appearanceTools"": true,
        ""border"": {
          ""radius"": false
        }
      }
    }

The following screenshot shows how setting `appearanceTools` to `true` exposes those controls in the Global Styles UI, taken from the default [Twenty Twenty-Three theme](https://wordpress.org/themes/twentytwentythree/).

![The WordPress Site Editor.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_24DEF265EF8C89B41F9BB642366BE7BA2754CF882C77B5E3C0C67051AB08C126_1671195635502_globalstylesui.png?resize=1003%2C469&ssl=1)

This [Learn WordPress video](https://wordpress.tv/2022/12/09/builder-basics-demystifying-theme-json-and-global-styles/) by Nick Diego explains the `appearanceTools` properties and the Global Styles interface in great detail.

### [](#aa-padding-aware-alignments)Padding-aware alignments

This feature is worth calling out because it shipped more recently than many other features as part of [WordPress 6.1](https://wordpress.org/news/2022/11/misha/). It is another shortcut for setting two `spacing` features.

So, this:

    {
      ""version"": 2,
      ""settings"": {
        ""useRootPaddingAwareAlignments"": true
      }
    }

…is the equivalent of this:

    {
      ""version"": 2,
      ""settings"": {
        ""spacing"": {
          ""margin"": true,
          ""padding"": true
        },
      }
    }

The real benefit of `useRootPaddingAwareAlignments` is in the name. By enabling it, we opt into a feature that defines global padding on the `<body>` of our theme and allows blocks to “break out” of that padding and go full-width if we need a block to span edge-to-edge.

[See my previous article](https://css-tricks.com/using-the-new-constrained-layout-in-wordpress-block-themes/#aa-userootpaddingawarealignments) for a detailed overview of padding-aware alignments.

### [](#aa-configuring-preset-values)Configuring preset values

_Presets_ are predefined values used by Global Styles features. More specifically, they define [CSS custom properties](https://css-tricks.com/a-complete-guide-to-custom-properties/) used throughout a block theme.

So, let’s say you are defining your block theme’s default color palette and add black (`#000000`) to it:

    {
      ""version"": 2,
      ""settings"": {
        ""color"": {
          ""palette"": [
            {
              ""color"": ""#000000"",
              ""name"": ""Base"",
              ""slug"": ""base""
            }
          ]
        }
      }
    }

Behind the scenes, something called the [Style Engine](https://developer.wordpress.org/block-editor/reference-guides/packages/packages-style-engine/) takes those values and generates the theme’s CSS classes and custom properties. I described the Style Engine [in a previous article](https://css-tricks.com/managing-css-styles-in-a-wordpress-block-theme/#aa-the-style-engine):

> The Style Engine is a new API in WordPress 6.1 that is meant to bring consistency to how styles are generated and where styles are applied. In other words, it takes all of the possible sources of styling and is singularly responsible for properly generating block styles. \[…\] Having a centralized API for styles is probably the most elegant solution given that styles can come from a number of places.

When the Style Engine notices our `styles`, it creates a set of preset custom properties. For example, that color palette example above? It produces a CSS custom property based on the information we supply it.

If we were to open up DevTools and inspect the `<body>` element, we would see our custom properties there:

![DevTools window showing CSS custom variables on the body element.](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/styles-global.png?resize=767%2C214&ssl=1)

Notice how the custom property names are formatted:

    --wp-preset--<feature>--<slug>: <value>

So, going back to our original example where we defined black in a color palette:

    ""color"": {
      ""palette"": [
        {
          ""color"": ""#000000"",
          ""name"": ""Base"",
          ""slug"": ""Base""
        }
      ]
    }

We can expect to find this custom property applied to the `<body>` element:

    body {
      --wp--preset--color--base: #000000;
    }

All we’ve looked at are `settings.color` presets, but nearly every value we define in the `settings` section results in a custom property:

    {
      ""version"": 2,
      ""settings"": {
        ""spacing"": {
          ""spacingSizes"": [
            {
              // Creates: --wp-preset--spacing--40: 1rem
              ""slug"": ""40"",
              ""size"": ""1rem"",
              ""name"": ""Small""
            },
            // etc.
          ]
        }
      }
    }

#### [](#aa-global-presets)Global presets

Now that we know how to define preset values in `theme.json`, you might want to know what presets are available. The following table outlines what is currently available as of this writing and what they produce.

Setting

Feature

CSS custom property

CSS class

`color`

`duotone`

N/A

N/A

`gradients`

`--wp-preset--gradient--<preset-slug>`

`.has-<preset-slug>-<preset-category>`

`palette`

`--wp--preset--palette--<preset-slug>`

Three classes per value:  
  
`.has-<preset-value>-color`  
  
`.has-<preset-value>-background-color`  
  
`.has-<preset-value>-border-color`

`spacing`

`spacingScal`e

N/A

N/A

`spacingSizes`

`--wp--preset--spacing--<preset-slug>`

`.has-<preset-slug>-spacing`

`typography`

`fontSizes`

`--wp--preset--font-size--<preset-slug>`

`.has-<preset-slug>-font-size`

`fontFamilies`

`--wp--preset--font-family--<preset-slug>`

`.has-<preset-slug>-font-family`

#### [](#aa-block-presets)Block presets

We can get more granular when defining preset values in `theme.json`. In addition to the global presets we just saw, we can define presents at the block level.

Let’s say we have the following global color presets:

    {
      ""version"": 2,
      ""settings"": {
        ""color"": {
          ""palette"": [
            {
              // --wp-preset--color--base: #ffffff
              ""color"": ""#FFFFFF"",
              ""name"": ""Base"",
              ""slug"": ""base""
            },
            {
              // --wp-preset--color--contrast: #000000
              ""color"": ""#000000"",
              ""name"": ""Contrast"",
              ""slug"": ""contrast""
            }
          ]
        }
      }
    }

The custom properties generated by those settings are used throughout the theme, including blocks. So, if we were to add a [Separator block](https://wordpress.org/support/article/separator-block/) to a page in the Block Editor, it will refer to the same color palette when it renders.

But we can override that palette — or any of the others in the global `settings` — with a palette specifically for the Separator block:

    {
      ""version"": 2,
      ""settings"": {
        ""color"": {
          ""palette"": [ // etc. ]
        },
        ""blocks"": {
          ""separator"": {
            ""color"": {
              ""palette"": [
                {
                  ""color"": ""#F8A100"",
                  ""name"": ""Orange"",
                  ""slug"": ""orange""
                }
              ]
            }
          }
        }
      }
    }

In this example, the Separator block’s palette overrides the global palette with a single orange (`#F8A100`) color value.

#### [](#aa-custom-presets)Custom presets

You can also create “custom” CSS custom properties on any property. In addition to the `settings` features we’ve looked at so far, there is a `custom` property where we can do that.

    {
      ""version"": 2,
      ""settings"": {
        ""custom"": {
          // etc.
        }
      }
    }

The Style Engine takes anything we define in there and generates CSS custom properties from it. The naming convention is pretty similar to the custom properties generated by the other settings:

    --wp--custom--<variable-name>: <value>

Your defined values in `custom` will be transformed into CSS custom properties and use the `--wp--custom--<variable-name>` [naming convention](https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/#custom).

Here’s an abbreviated example of custom settings pulled straight from the default Twenty Twenty-Two theme. In it are custom settings for `typography.font-size` and `typography.line-height`:

    {
      ""version"": 2,
      ""settings"": {
        ""custom"": {
          ""typography"": {
            ""font-size"": {
              ""huge"": ""clamp(2.25rem, 4vw, 2.75rem)"",
              ""gigantic"": ""clamp(2.75rem, 6vw, 3.25rem)"",
              ""colossal"": ""clamp(3.25rem, 8vw, 6.25rem)""
            },
            ""line-height"": {
              ""tiny"": 1.15,
              ""small"": 1.2,
              ""medium"": 1.4,
              ""normal"": 1.6
            }
          }
        }
      }
    }

### [](#aa-wrapping-up)Wrapping up

We learned a great deal about the `settings` section of the `theme.json` file. We covered the available settings and how they are used to define global styles that are used in the Global Styles UI of the WordPress Site Editor. From there, we learned about preset values, including which ones we can configure and how they are generated into CSS custom properties by the Style Engine.

What we haven’t covered is how we can use `theme.json` to define CSS styles in a block theme. That happens in another top-level section called `styles`, which is the focus of the next part of this series.

#### [](#aa-wordpress-block-theme-css-and-style-settings-guide)WordPress Block Theme CSS and Style Settings Guide

*   [Introduction](https://css-tricks.com/wordpress-block-theme-guide/)
*   [Glossary of Terms for `theme.json`](https://css-tricks.com/glossary-of-terms-for-theme-json/)
*   [Defining Global Settings](https://css-tricks.com/defining-global-settings/) _(you are here!)_
*   [Defining Global Styles](https://css-tricks.com/defining-global-styles-in-wordpress/)
*   [How the Styles Engine Generates Classes](https://css-tricks.com/how-the-style-engine-generates-classes/)
*   [Global Styles Reference Tables](https://css-tricks.com/wordpress-global-styles-reference-tables/)"
20,Glossary of Terms for theme.json,https://css-tricks.com/glossary-of-terms-for-theme-json/,https://css-tricks.com/wp-content/uploads/2023/02/guide-wordpress-block-theme-css.jpg,Ganesh Dahal,1675134000000,1677628800000,"[""json"",""WordPress"",""WordPress blocks"",""wordpress themes""]","#### [](#aa-wordpress-block-theme-css-and-style-settings-guide)WordPress Block Theme CSS and Style Settings Guide

*   [Introduction](https://css-tricks.com/wordpress-block-theme-guide/)
*   [Glossary of Terms for `theme.json`](https://css-tricks.com/glossary-of-terms-for-theme-json/) _(you are here!)_
*   [Defining Global Settings](https://css-tricks.com/defining-global-settings/)
*   [Defining Global Styles](https://css-tricks.com/defining-global-styles-in-wordpress/)
*   [How the Styles Engine Generates Classes](https://css-tricks.com/how-the-style-engine-generates-classes/)
*   [Global Styles Reference Tables](https://css-tricks.com/wordpress-global-styles-reference-tables/)

### [](#aa-common-json-terms)Common JSON terms

We’re going to spend a quick moment getting familiar with JSON-related terms before jumping to the next section that outlines the six different types of JSON data types.

JSON

[JSON](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON) refers to _JavaScript Object Notation_, a machine-readable data-sharing format. As the name suggests, JSON is derived from JavaScript and applied to many other languages like PHP, Ruby, Python, etc. Many software applications, including React, Gatsby, VS Code, and others, use JSON for settings environments.

Object

_Objects_ are key-value pairs separated by colons `:` and contained inside curly brackets (`{}`). You can think of it like CSS in a way. We have a property (or key) followed by a value that defines the property:

    color: #9DFF20;

In JSON, that is represented as an object like this:

    { ""color"": ""#9DFF20"" }

Note: A JSON _object_ property is also called a **field** or **key**. A _key-value_ pair is also called an **item** or **data**.

And like a CSS ruleset can contain many key-value pairs, so can a JSON object. This example is an object with three keys — `color`, `name`, and `slug` — each with a corresponding value:

    { ""color"": ""#9DFF20"", ""name"": ""Primary"", ""slug"": ""primary"" }

Contrary to CSS, JSON is not a “forgiving” language, and even one typing error can break the entire website.

#### [](#aa-nested-object)Nested object

Objects in JSON can contain other objects. We call these _nested objects,_ and it’s what makes JSON a structured language.

    {
      ""object1"": {
        ""object1a"": ""value"",
        ""object1b"": ""value""
      },
      ""object2"" : {
        ""object2a"": ""value"",
        ""object2b"": ""value""
      }
    }

Let’s take an example straight from the [emptytheme](https://github.com/WordPress/theme-experiments/blob/master/emptytheme/theme.json) `theme.json` file:

![](https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/12/empty-json-labelled.png?resize=839%2C300&ssl=1)

Array

An _array_ is a comma-separated group of objects in square brackets (`[]`). The idea is that we might need to define more than one object at a time. A good example is defining the colors of a block theme’s color palette. An array allows us to define a group of colors for that palette:

![](https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/12/json-array.jpg?resize=901%2C566&ssl=1)

### [](#aa-json-data-types)JSON data types

JSON values must be one of the six data types: a **string**, a **number**, an **object**, an **array,** a **boolean** (true or false), and **null**. JSON data are assessed using dot `.` notation.

Here is an abbreviated modified TT3 `theme.json` object file showing all the data types:

    {
      ""version"": 2, // 1: Number (no quotes)
      ""settings"": {
        ""appearanceTools"": true, // 2: Boolean (true or false, no quotes)
        ""useRootPaddingAwareAlignments"": false,
        ""color"": {
          ""palette"": [ // 3: Array of string object palette
            { 
              ""color"": ""#ffffff"", // 4: Object (in curly brackets)
              ""name"": ""Base"",
              ""slug"": ""base""
            }
          ]
        },
        ""layout"": { ""contentSize"": ""650px""}, // 5: String (in double quotes)
        ""styles"": {
          ""typography"": { ""lineHeight"": ""1.6"" },
          ""spacing"": { ""blockGap"": null } // 6: null (no quotes)
        }
      }
    }

### [](#aa-additional-resources)Additional resources

*   [HTML and CSS](https://developer.wordpress.org/block-editor/explanations/architecture/styles/#html-and-css) (Block Editor Handbook | Explanations)
*   [Introducing JSON](https://www.json.org/json-en.html) ([JSON.org](http://JSON.org))
*   [An Introduction to JSON](https://www.digitalocean.com/community/tutorials/an-introduction-to-json) (DigitalOcean)
*   [What is JSON](https://restfulapi.net/introduction-to-json/) (REST API Tutorial)

### [](#aa-next-up)Next up…

Now that we have a solid understanding of JSON and how it is structured in the `theme.json` of WordPress block themes, let’s take a closer look at how global styling works. We can define default styles for a block theme directly in `theme.json`. We can also use the Global Styles UI in WordPress.

How do those work together? What sort of settings are available? When should you use one over the other? We’ll answer those questions and more next.

#### [](#aa-wordpress-block-theme-css-and-style-settings-guide)WordPress Block Theme CSS and Style Settings Guide

*   [Introduction](https://css-tricks.com/wordpress-block-theme-guide/)
*   [Glossary of Terms for `theme.json`](https://css-tricks.com/glossary-of-terms-for-theme-json/) _(you are here!)_
*   [Defining Global Settings](https://css-tricks.com/defining-global-settings/)
*   [Defining Global Styles](https://css-tricks.com/defining-global-styles-in-wordpress/)
*   [How the Styles Engine Generates Classes](https://css-tricks.com/how-the-style-engine-generates-classes/)
*   [Global Styles Reference Tables](https://css-tricks.com/wordpress-global-styles-reference-tables/)"
21,WordPress Block Themes CSS and Style Settings Guide,https://css-tricks.com/wordpress-block-theme-guide/,,Ganesh Dahal,1675134000000,1677628800000,"[""WordPress"",""WordPress blocks"",""wordpress themes""]","In the 2015 State of the World address, WordPress co-creator [Matt Mullenweg](https://twitter.com/photomatt) famously directed the WordPress community to[“Learn JavaScript deeply”](https://www.youtube.com/watch?v=TX6dXRL-jPU). He set that expectation upfront because he wanted everyone to know that JavaScript would be essential to the future of WordPress, which was paving a path toward full-site editing with a React-based editing experience to be called the Block Editor.

That was years ago, and a concerted effort has been taking place to shift WordPress theme development from “classic” PHP-based templating to a more modular, component-driven model centered on “blocks” for constructing page and post layouts.

Now that we’re starting to see new [block-based WordPress themes](https://wordpress.org/themes/tags/full-site-editing/) hit the Theme Directory, many of us who have been developing WordPress themes for years using “classic” PHP templates we’re sitting in some sort of middle-ground between “classic” and “block” themes. [Geoff expanded on this feeling in another post](https://css-tricks.com/not-sure-how-to-wordpress-anymore/), but the general sentiment is that working in WordPress is much different than before.

Where do you even start on a WordPress Block Theme project? That’s what this guide is all about. We could get into the nuances of working with React, but [there’s already a good guide for that here on CSS-Tricks](https://css-tricks.com/learning-gutenberg-1-series-intro/) as well as [tutorials on working with blocks](https://css-tricks.com/rendering-external-api-data-in-wordpress-blocks-on-the-front-end/).

Instead, **this guide is geared toward block themes and how to configure them.** Think of it as an extension to my previous article on [managing styles in WordPress block themes](https://css-tricks.com/managing-css-styles-in-a-wordpress-block-theme/). In there, we covered how to define CSS styles in the `theme.json` file — the foundation of all WordPress block themes, akin to how `style.css` is used in classic themes. We’re going to go deeper in this series, giving `theme.json` a proper introduction and documenting how it’s used to manage the appearance of a WordPress site that fully supports full-site editing features.

As it currently stands, finding resources and proper documentation for defining and managing styles in WordPress block themes is a task in and of itself. Unless you keep up with [GitHub issues](https://github.com/WordPress/gutenberg/issues), [Gutenberg plugin releases](https://make.wordpress.org/core/2022/10/13/whats-new-in-gutenberg-14-3-12-october/#gutenberg-new), and [Make WordPress Core](https://make.wordpress.org/core/), you could feel lost in this new WordPress landscape. [The WordPress Handbook](https://developer.wordpress.org/themes/block-themes/) won’t save you either because it is constantly several steps behind the breakneck speed of development.

So, let’s pull all of that together and learn about managing styles in WordPress block themes.

#### [](#aa-wordpress-block-theme-css-and-style-settings-guide)WordPress Block Theme CSS and Style Settings Guide

*   [Introduction](https://css-tricks.com/wordpress-block-theme-guide/) _(you are here!)_
*   [Glossary of Terms for `theme.json`](https://css-tricks.com/glossary-of-terms-for-theme-json/)
*   [Defining Global Settings](https://css-tricks.com/defining-global-settings/)
*   [Defining Global Styles](https://css-tricks.com/defining-global-styles-in-wordpress/)
*   [How the Styles Engine Generates Classes](https://css-tricks.com/how-the-style-engine-generates-classes/)
*   [Global Styles Reference Tables](https://css-tricks.com/wordpress-global-styles-reference-tables/)"
22,border-image-outset,https://css-tricks.com/almanac/properties/b/border-image-outset/,https://css-tricks.com/wp-content/uploads/2019/12/css-tricks-logo-gradient-outline.png,Sunkanmi Fafowora,1675134000000,,[],"The CSS border-image-outset property sets distance between an element’s [`border-image`](https://css-tricks.com/almanac/properties/b/border-image-source/) area and how far it goes beyond the element’s border-box.

    .container {
      border-style: ridge;
      border-width: 3rem;
      border-image-source: url('path/to/image.jpg');
      border-image-slice: 70; 
      border-image-width: 40%; 
      border-image-repeat: repeat;
      border-image-outset: 2;
    }

CodePen Embed Fallback

The `border-image-outset` property is defined in the [CSS Backgrounds and Borders Module Level 3 specification](https://w3c.github.io/csswg-drafts/css-backgrounds/#the-border-image-outset). It is referred to as the “Edge Overhang” property, which perfectly describes what it’s designed to do: allow the border image area to hang over an element’s border box.

![](https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_72BB6F06491261790737D0EB952A4979C03F0CE1ECD1CF6658196C5DDA901A67_1673540875839_border-image-offset-box-model.jpg?resize=1743%2C633&ssl=1)

### [](#aa-syntax)Syntax

    border-image-outset: [<length [0,∞]> | <number [0,∞]>]{1,4}

*   **Initial value:** `0`
*   **Applies to:** all elements (including the `::first-letter` pseudo-element), except internal table elements when `border-collapse` is set to `collapse`.
*   **Inherited:** no
*   **Percentages:** n/a
*   **Computed value:** four values, each a number or absolute length
*   **Animation type:** by computed value

`border-image-outset` accepts between one and four values, much like the [`margin`](https://css-tricks.com/almanac/properties/m/margin/) and [`padding`](https://css-tricks.com/almanac/properties/p/padding/) shorthand properties:

*   **One value:** Sets all four sides at the same outset distance.
*   **Two values:** The first value sets the outset for the top and bottom sides; the second value sets the outset for the left and right sides.
*   **Three values:** The first value sets the outset for the top side; the second value sets the outset for the right and left sides; the third sets the outset for the bottom side.
*   **Four values:** Sets the outset for each side in clockwise order, starting from the top side (top, right, bottom, and left, in that order).

### [](#aa-values)Values

    /* Length value (includes unit) */
    border-image-outset: 2rem;
    
    /* Number value (unitless) */
    border-image-outset: 2;
    
    /* Single value: Sets all four sides */
    border-image-outset: 2;
    border-image-outset: 2rem;
    border-image-outset: 32px;
    
    /* Two values: top and bottom | left and right */
    border-image-outset: 4 6rem;
    border-image-outset: 2 3rem;
    border-image-outset: 1 24px;
    
    /* Three values: top | left and right | bottom */
    border-image-outset: 4rem 2 5rem;
    border-image-outset: 5 8rem 10rem;
    border-image-outset: 3 6 9;
    
    /* Four values: top | right | bottom | left */
    border-image-outset: 15 4rem 4 10rem;
    border-image-outset: 2 5 13rem 4;
    border-image-outset: 2 5 3 7rem;
    
    /* Global values */
    border-image-outset: inherit;
    border-image-outset: initial;
    border-image-outset: revert;
    border-image-outset: revert-layer;
    border-image-outset: unset;

#### [](#aa-length-0%e2%88%9e)`<length` `[0,∞]>`

A length is a number with any CSS unit — like `10px`, `1.35rem`, `50%`, `25dvh`, etc — and is used to set the height and width dimensions of the image’s outset.

    .container{
      /* Sets dimensions on all four sides */
      border-image-outset: 2rem;
    }

The example above specifies a `2rem` unit length for the `top`, `right`, `bottom`, and `left` outsets of the border. So, each side is `2rem` in length.

CodePen Embed Fallback

#### [](#aa-number-0%e2%88%9e)`<number [0,∞]>`

A number is exactly like a `<length>` value, only without a CSS unit. When we set a unitless number for the property value, that number is relative to the `border-width` value. The used value is equal to the `border-image-outset` value multiplied by the [`border-width`](https://css-tricks.com/almanac/properties/b/border/) value.

    border-image-outset = <number> * border-width

Say we have the following style rule:

    .container {
      border-image-outset: 4;
      border-width: 1rem;
    }

We multiply the `border-image-outset` unitless `<number>` value (`4`) by the `border-width` value (`1rem`), which gives us a a border image offset grand total of `4rem`.

    border-image-outset = 4 * 1rem = 4rem

CodePen Embed Fallback

### [](#aa-border-image-outset-vs-border-image-width)`border-image-outset` vs. `border-image-width`

They’re not the same, of course, though they behave similarly in some respects when it comes to their values. For example, both properties accept `<length>` and `<number>` values, and up to four values in a single declaration.

However, the differences between the two properties are evident in the way each property uniquely affects a part of the border image. `border-image-width` affects the the physical dimension of the border image area. `border-image-outset` affects the distance _between_ the border image and the content box, allowing the border image to extend beyond the border box.

### [](#aa-a-few-things-to-keep-in-mind)A few things to keep in mind

A few more things about the `border-image-outset` property worth knowing:

*   It’s essential to set the [`box-sizing`](https://css-tricks.com/almanac/properties/b/box-sizing/) of elements to `border-box`, i.e., `* { box-sizing: border-box; }`. This prevents borders and padding from [adding to the physical width of the element](https://css-tricks.com/international-box-sizing-awareness-day/) and the element appearing larger than it should.
*   Negative values are **not allowed**.
*   A `border-image` that renders outside the border box does _not_ trigger scrolling. Overflowing portions are invisible to mouse events and do not capture events.
*   Even though they never cause a scrolling mechanism, outset images may still be clipped by an ancestor element or by the viewport.

### [](#aa-demo)Demo

Change the `border-image-outset`, `border-image-width`, and `border-width` values below to see how each input affects the image size.

CodePen Embed Fallback

### [](#aa-browser-support)Browser support

### [](#aa-more-information)More information

*   [CSS Backgrounds and Borders Module Level 3](https://w3c.github.io/csswg-drafts/css-backgrounds/#border-image-repeat) (W3C specification)
*   [Understanding `border-image`](https://css-tricks.com/understanding-border-image/) (CSS-Tricks)
*   [How To Add Border Images and Gradient Borders with Pure CSS](https://www.digitalocean.com/community/tutorials/css-gradient-borders-pure-css?utm_medium=content_acq&utm_source=css-tricks&utm_campaign=&utm_content=awareness_almanac) (DigitalOcean)

### Related

**Almanac** on Feb 3, 2023

### [border](https://css-tricks.com/almanac/properties/b/border/)

[`.element { border: 3px solid #f8a100; }`](https://css-tricks.com/almanac/properties/b/border/)

 [![](https://secure.gravatar.com/avatar/84da92f298e5b124d92fb581b82cfdf4?s=80&d=retro&r=pg)](https://css-tricks.com/author/saracope/)[Sara Cope](https://css-tricks.com/author/saracope/)

**Almanac** on Jan 18, 2023

### [border-image-width](https://css-tricks.com/almanac/properties/b/border-image-width/)

[`.element { border-image-width: 4rem; }`](https://css-tricks.com/almanac/properties/b/border-image-width/)

 [![](https://secure.gravatar.com/avatar/55c2800a1670a25d9ae52278976d5661?s=80&d=retro&r=pg)](https://css-tricks.com/author/sunkanmifafowora/)[Sunkanmi Fafowora](https://css-tricks.com/author/sunkanmifafowora/)

**Almanac** on Dec 20, 2022

### [border-image-repeat](https://css-tricks.com/almanac/properties/b/border-image-repeat/)

[`.element { border-image-repeat: repeat; }`](https://css-tricks.com/almanac/properties/b/border-image-repeat/)

 [![](https://secure.gravatar.com/avatar/55c2800a1670a25d9ae52278976d5661?s=80&d=retro&r=pg)](https://css-tricks.com/author/sunkanmifafowora/)[Sunkanmi Fafowora](https://css-tricks.com/author/sunkanmifafowora/)

**Almanac** on Dec 20, 2022

### [border-image-slice](https://css-tricks.com/almanac/properties/b/border-image-slice/)

[`.element { border-image-slice: 30%; }`](https://css-tricks.com/almanac/properties/b/border-image-slice/)

 [![](https://secure.gravatar.com/avatar/55c2800a1670a25d9ae52278976d5661?s=80&d=retro&r=pg)](https://css-tricks.com/author/sunkanmifafowora/)[Sunkanmi Fafowora](https://css-tricks.com/author/sunkanmifafowora/)

**Almanac** on Nov 17, 2022

### [border-image-source](https://css-tricks.com/almanac/properties/b/border-image-source/)

[`.element { border-image-source: url('path/to/image.webp'); }`](https://css-tricks.com/almanac/properties/b/border-image-source/)

 [![](https://secure.gravatar.com/avatar/55c2800a1670a25d9ae52278976d5661?s=80&d=retro&r=pg)](https://css-tricks.com/author/sunkanmifafowora/)[Sunkanmi Fafowora](https://css-tricks.com/author/sunkanmifafowora/)

**Almanac** on Jan 18, 2023

### [box-sizing](https://css-tricks.com/almanac/properties/b/box-sizing/)

[`.element { box-sizing: border-box; }`](https://css-tricks.com/almanac/properties/b/box-sizing/)

 [![](https://secure.gravatar.com/avatar/84da92f298e5b124d92fb581b82cfdf4?s=80&d=retro&r=pg)](https://css-tricks.com/author/saracope/)[Sara Cope](https://css-tricks.com/author/saracope/)"
